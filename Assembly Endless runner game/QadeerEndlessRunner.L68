00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/03/2023 15:29:22

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner 
00000000                             3  * Written by : Qadeer Hussain C00270632
00000000                             4  * Date       : 08/03/2023
00000000                             5  * Description: Endless Runner Project 
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  *-----------------------------------------------------------
00001000                            10  * Section       : Trap Codes
00001000                            11  * Description   : Trap Codes used throughout StarterKit 
00001000                            12  *-----------------------------------------------------------
00001000                            13  * Trap CODES
00001000  =00000021                 14  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 15  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            16                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 17  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 18  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 19  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            20      
00001000  =00000009                 21  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            22  *-----------------------------------------------------------
00001000                            23  * Section       : Charater Setup
00001000                            24  * Description   : Size of Player and Enemy and properties
00001000                            25  * of these characters e.g Starting Positions and Sizes
00001000                            26  *-----------------------------------------------------------
00001000  =00000014                 27  PLYR_W_INIT EQU         20          ; Players initial Width
00001000  =00000014                 28  PLYR_H_INIT EQU         20          ; Players initial Height
00001000                            29   
00001000  =00000002                 30  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            31  
00001000  =00000014                 32  ENMY_W_INIT EQU         20          ; Enemy initial Width
00001000  =00000014                 33  ENMY_H_INIT EQU         20          ; Enemy initial Height
00001000                            34  
00001000  =0000006C                 35  TOP_Y_LINE  EQU         108         ; Top Y line start point
00001000  =00000156                 36  BOTTOM_Y_LINE  EQU      342         ; Bottom Y line start point
00001000                            37  *-----------------------------------------------------------
00001000                            38  * Section       : Game Stats
00001000                            39  * Description   : Points, Health
00001000                            40  *-----------------------------------------------------------
00001000  =00000001                 41  POINTS      EQU         01          ; Points added
00001000                            42  *-----------------------------------------------------------
00001000                            43  * Section       : Keyboard Keys
00001000                            44  * Description   : Spacebar and Escape or two functioning keys
00001000                            45  * Spacebar to JUMP and Escape to Exit Game
00001000                            46  *-----------------------------------------------------------
00001000  =0000001B                 47  ESCAPE      EQU         $1B         ; Escape ASCII Keycode 
00001000  =00000026                 48  UPARROW     EQU         $26         ; UP key ASCII Keycode
00001000  =00000028                 49  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode   
00001000                            50  *-----------------------------------------------------------
00001000                            51  * Subroutine    : Initialise
00001000                            52  * Description   : Initialise game data into memory such as 
00001000                            53  * sounds and screen size
00001000                            54  *-----------------------------------------------------------
00001000                            55  INITIALISE:
00001000                            56      ; Initialise Sounds
00001000  6100 0576                 57      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
00001004                            58  
00001004                            59      ; Screen Size
00001004  103C 0021                 60      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001008  7200                      61      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
0000100A  4E4F                      62      TRAP    #15                     ; interpret D0 and D1 for screen size
0000100C  33C1 00001B0A             63      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001012  4841                      64      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001014  33C1 00001B08             65      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
0000101A                            66  
0000101A                            67      ; Place the Player at the center of the screen
0000101A  4281                      68      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000101C  23FC 00000000 00001B10    69      MOVE.L  #00,         PLAYER_X   ; Players X set to 0 Position
00001026                            70  
00001026  4281                      71      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001028  3239 00001B0A             72      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000102E  323C 00D7                 73      MOVE.W  #215,       D1          ; Set 225 the spawn for enemy and move to D1
00001032  23C1 00001B14             74      MOVE.L  D1,         PLAYER_Y    ; Move D1 to Players Y Position
00001038                            75  
00001038                            76      ; Initialise Player Score
00001038  4281                      77      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000103A  7200                      78      MOVE.L  #00,         D1         ; Init Score
0000103C  23C1 00001B18             79      MOVE.L  D1,         PLAYER_SCORE
00001042                            80      
00001042                            81      ;Initialize Health
00001042  4281                      82      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001044  7264                      83      MOVE.L  #100,       D1          ; Set 100 as the health and move it to D1
00001046  23C1 00001B1C             84      MOVE.L  D1,         HEALTH_VALUE ; Move D1 to Health Value
0000104C                            85      
0000104C                            86      ; Initial Position for Enemy 1   
0000104C  4281                      87      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104E  3239 00001B08             88      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001054  23C1 00001B20             89      MOVE.L  D1,         ENEMY_X_1   ; Enemy X Position
0000105A                            90  
0000105A  4281                      91      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105C  3239 00001B0A             92      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001062  323C 006E                 93      MOVE.W  #110,       D1          ; Set 110 as the spawn and move it to D1
00001066  23C1 00001B24             94      MOVE.L  D1,         ENEMY_Y_1   ; Move D1 to Enemy y 1
0000106C                            95  
0000106C                            96      ; Initial Position for Enemy 2   
0000106C  4281                      97      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  3239 00001B08             98      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001074  23C1 00001B28             99      MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
0000107A                           100  
0000107A  4281                     101      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000107C  3239 00001B0A            102      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001082  323C 0091                103      MOVE.W  #145,       D1          ; Set 145 as the spawn and move it to D1
00001086  23C1 00001B2C            104      MOVE.L  D1,         ENEMY_Y_2   ; Move D1 to Enemy Y 2
0000108C                           105      
0000108C                           106      ; Initial Position for Enemy 3
0000108C  4281                     107      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000108E  3239 00001B08            108      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001094  23C1 00001B30            109      MOVE.L  D1,         ENEMY_X_3     ; Enemy X Position
0000109A                           110      
0000109A  4281                     111      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000109C  3239 00001B0A            112      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010A2  323C 00B4                113      MOVE.W  #180,       D1          ; Set 180 as the spawn and move it to D1
000010A6  23C1 00001B34            114      MOVE.L  D1,         ENEMY_Y_3   ; Move D1 to Enemy Y 3
000010AC                           115          
000010AC                           116      ; Initial Position for Enemy 4   
000010AC  4281                     117      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010AE  3239 00001B08            118      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010B4  23C1 00001B38            119      MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
000010BA                           120  
000010BA  4281                     121      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010BC  3239 00001B0A            122      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010C2  323C 00D7                123      MOVE.W  #215,       D1          ; Set 215 as the spawn and move it to D1
000010C6  23C1 00001B3C            124      MOVE.L  D1,         ENEMY_Y_4   ; Move D1 to Enemy Y 4
000010CC                           125  
000010CC                           126      ; Initial Position for Enemy 5   
000010CC  4281                     127      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010CE  3239 00001B08            128      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010D4  23C1 00001B40            129      MOVE.L  D1,         ENEMY_X_5   ; Enemy X Position
000010DA                           130  
000010DA  4281                     131      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010DC  3239 00001B0A            132      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010E2  323C 00FA                133      MOVE.W  #250,       D1          ; Set 250 as the spawn and move it to D1
000010E6  23C1 00001B44            134      MOVE.L  D1,         ENEMY_Y_5   ; Move D1 to Enemy Y 5
000010EC                           135      
000010EC                           136      ; Initial Position for Enemy 6 
000010EC  4281                     137      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010EE  3239 00001B08            138      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010F4  23C1 00001B48            139      MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
000010FA                           140  
000010FA  4281                     141      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FC  3239 00001B0A            142      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001102  323C 011D                143      MOVE.W  #285,       D1          ; Set 285 as the spawn and move it to D1
00001106  23C1 00001B4C            144      MOVE.L  D1,         ENEMY_Y_6   ; Move D1 to Enemy Y 6
0000110C                           145      
0000110C                           146      ; Initial Position for Enemy 7 
0000110C  4281                     147      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000110E  3239 00001B08            148      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001114  23C1 00001B50            149      MOVE.L  D1,         ENEMY_X_7   ; Enemy X Position
0000111A                           150  
0000111A  4281                     151      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000111C  3239 00001B0A            152      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001122  323C 0140                153      MOVE.W  #320,       D1          ; Set 320 as the spawn and move it to D1
00001126  23C1 00001B54            154      MOVE.L  D1,         ENEMY_Y_7   ; Move D1 to Enemy Y 7
0000112C                           155      
0000112C                           156      ;Initialise the enemy speeds
0000112C  23FC 00000005 00001B58   157      MOVE.L  #05,        ENEMY_SPEED_1
00001136  23FC 00000003 00001B5C   158      MOVE.L  #03,        ENEMY_SPEED_2
00001140  23FC 00000005 00001B60   159      MOVE.L  #05,        ENEMY_SPEED_3
0000114A  23FC 00000003 00001B64   160      MOVE.L  #03,        ENEMY_SPEED_4
00001154  23FC 00000005 00001B68   161      MOVE.L  #05,        ENEMY_SPEED_5
0000115E  23FC 00000003 00001B6C   162      MOVE.L  #03,        ENEMY_SPEED_6
00001168  23FC 00000005 00001B70   163      MOVE.L  #05,        ENEMY_SPEED_7
00001172                           164          
00001172                           165      ; Enable the screen back buffer(see easy 68k help)
00001172  103C 005C                166      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001176  123C 0011                167      MOVE.B  #17,        D1          ; Combine Tasks
0000117A  4E4F                     168      TRAP    #15                     ; Trap (Perform action)
0000117C                           169  
0000117C                           170      ; Clear the screen (see easy 68k help)
0000117C  103C 000B                171      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001180  323C FF00                172      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001184  4E4F                     173      TRAP    #15                     ; Trap (Perform action)
00001186                           174  
00001186                           175  *-----------------------------------------------------------
00001186                           176  * Subroutine    : Game
00001186                           177  * Description   : Game including main GameLoop. GameLoop is like
00001186                           178  * a while loop in that it runs forever until interupted
00001186                           179  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001186                           180  *-----------------------------------------------------------
00001186                           181  GAME:
00001186                           182  
00001186                           183  GAMELOOP:
00001186  7008                     184      MOVEQ   #08,D0                  ; Get time in 1/100 seconds
00001188  4E4F                     185      TRAP    #15
0000118A                           186  
0000118A  2F01                     187      MOVE.L  D1,-(SP)                ; Push time on the stack
0000118C                           188      
0000118C                           189      ; Main Gameloop
0000118C  6100 004E                190      BSR     INPUT                   ; Check Keyboard Input
00001190  6100 009A                191      BSR     UPDATE_1                ; Update positions 1
00001194  6100 00B0                192      BSR     UPDATE_2                ; Update positions 2
00001198  6100 00C6                193      BSR     UPDATE_3                ; Update positions 3
0000119C  6100 00DC                194      BSR     UPDATE_4                ; Update positions 4
000011A0  6100 00F2                195      BSR     UPDATE_5                ; Update positions 5
000011A4  6100 0108                196      BSR     UPDATE_6                ; Update positions 6
000011A8  6100 011E                197      BSR     UPDATE_7                ; Update positions 7
000011AC  6100 05A8                198      BSR     CHECK_COLLISIONS_1      ; Check for Collisions 1
000011B0  6100 060A                199      BSR     CHECK_COLLISIONS_2      ; Check for Collisions 2
000011B4  6100 066C                200      BSR     CHECK_COLLISIONS_3      ; Check for Collisions 3
000011B8  6100 06CE                201      BSR     CHECK_COLLISIONS_4      ; Check for Collisions 4
000011BC  6100 0730                202      BSR     CHECK_COLLISIONS_5      ; Check for Collisions 5
000011C0  6100 0792                203      BSR     CHECK_COLLISIONS_6      ; Check for Collisions 6
000011C4  6100 07F4                204      BSR     CHECK_COLLISIONS_7      ; Check for Collisions 7
000011C8  6100 023A                205      BSR     DRAW                    ; Draw the Scene
000011CC                           206      
000011CC  2E1F                     207      MOVE.L  (SP)+,D7                ; Move stack to D7
000011CE                           208  WAIT:
000011CE  7008                     209      MOVEQ   #8,D0                   ; Mve this trap 8 to D0
000011D0  4E4F                     210      TRAP    #15
000011D2  9287                     211      SUB.L   D7,D1                   ; Subtract previous time from current time
000011D4  B23C 0002                212      CMP.B   #02,D1                  ; Compare the the subtracted time
000011D8  6BF4                     213      BMI.S   WAIT                    ; Loop if time not up yet
000011DA                           214  
000011DA  60AA                     215      BRA     GAMELOOP                ; Loop back to Game loop
000011DC                           216  *-----------------------------------------------------------
000011DC                           217  * Subroutine    : Input
000011DC                           218  * Description   : Process Keyboard Input
000011DC                           219  *-----------------------------------------------------------
000011DC                           220  INPUT:
000011DC                           221      ; Process Input
000011DC  4281                     222      CLR.L   D1                      ; Clear Data Register
000011DE  103C 0013                223      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000011E2  4E4F                     224      TRAP    #15                     ; Trap (Perform action)
000011E4  1401                     225      MOVE.B  D1,         D2          ; Move last key D1 to D2
000011E6  B43C 0000                226      CMP.B   #00,        D2          ; Key is pressed
000011EA  6700 000E                227      BEQ     PROCESS_INPUT           ; Process Key
000011EE  4E4F                     228      TRAP    #15                     ; Trap for Last Key
000011F0                           229      ; Check if key still pressed
000011F0  B23C 00FF                230      CMP.B   #$FF,       D1          ; Is it still pressed
000011F4  6700 0004                231      BEQ     PROCESS_INPUT           ; Process Last Key
000011F8  4E75                     232      RTS                             ; Return to subroutine
000011FA                           233  *-----------------------------------------------------------
000011FA                           234  * Subroutine    : Process Input
000011FA                           235  * Description   : Branch based on keys pressed
000011FA                           236  *-----------------------------------------------------------
000011FA                           237  PROCESS_INPUT:
000011FA  23C2 00001B0C            238      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00001200  0CB9 0000001B 00001B0C   239      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
0000120A  6700 0882                240      BEQ     EXIT                    ; Exit if Escape
0000120E  0CB9 00000026 00001B0C   241      CMP.L   #UPARROW,  CURRENT_KEY  ; Is Current Key UP
00001218  6700 00C8                242      BEQ     UP                      ; Up
0000121C  0CB9 00000028 00001B0C   243      CMP.L   #DOWNARROW,CURRENT_KEY  ; Is Current Key Down
00001226  6700 00DA                244      BEQ     DOWN                    ; Down
0000122A  4E75                     245      RTS                             ; Return to subroutine
0000122C                           246  *-----------------------------------------------------------
0000122C                           247  * Subroutine    : Update
0000122C                           248  * Description   : Main update loop update Player and Enemies
0000122C                           249  *-----------------------------------------------------------  
0000122C                           250  UPDATE_1:
0000122C                           251      ; Move the Enemy
0000122C  4281                     252      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000122E  4281                     253      CLR.L   D1                      ; Clear the contents of D0
00001230  2239 00001B20            254      MOVE.L  ENEMY_X_1,  D1          ; Move the Enemy X Position to D0
00001236  B2BC 00000000            255      CMP.L   #00,        D1
0000123C  6F00 0156                256      BLE     RESET_ENEMY_POSITION_1  ; Reset Enemy if off Screen
00001240  6000 00E2                257      BRA     MOVE_ENEMY_1
00001244  4E75                     258      RTS        
00001246                           259  
00001246                           260  UPDATE_2:
00001246                           261      ; Move the Enemy
00001246  4281                     262      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001248  4281                     263      CLR.L   D1                      ; Clear the contents of D0
0000124A  2239 00001B28            264      MOVE.L  ENEMY_X_2,  D1          ; Move the Enemy X Position to D0
00001250  B2BC 00000000            265      CMP.L   #00,        D1
00001256  6F00 014C                266      BLE     RESET_ENEMY_POSITION_2  ; Reset Enemy if off Screen
0000125A  6000 0108                267      BRA     MOVE_ENEMY_2
0000125E  4E75                     268      RTS   
00001260                           269      
00001260                           270  UPDATE_3:
00001260                           271      ; Move the Enemy
00001260  4281                     272      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001262  4281                     273      CLR.L   D1                      ; Clear the contents of D0
00001264  2239 00001B30            274      MOVE.L  ENEMY_X_3,  D1          ; Move the Enemy X Position to D0
0000126A  B2BC 00000000            275      CMP.L   #00,        D1
00001270  6F00 0142                276      BLE     RESET_ENEMY_POSITION_3  ; Reset Enemy if off Screen
00001274  6000 00BE                277      BRA     MOVE_ENEMY_3
00001278  4E75                     278      RTS   
0000127A                           279  
0000127A                           280  UPDATE_4:
0000127A                           281      ; Move the Enemy
0000127A  4281                     282      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000127C  4281                     283      CLR.L   D1                      ; Clear the contents of D0
0000127E  2239 00001B38            284      MOVE.L  ENEMY_X_4,  D1          ; Move the Enemy X Position to D0
00001284  B2BC 00000000            285      CMP.L   #00,        D1
0000128A  6F00 0138                286      BLE     RESET_ENEMY_POSITION_4  ; Reset Enemy if off Screen
0000128E  6000 00E4                287      BRA     MOVE_ENEMY_4
00001292  4E75                     288      RTS   
00001294                           289  
00001294                           290  UPDATE_5:
00001294                           291      ; Move the Enemy
00001294  4281                     292      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001296  4281                     293      CLR.L   D1                      ; Clear the contents of D0
00001298  2239 00001B40            294      MOVE.L  ENEMY_X_5,  D1          ; Move the Enemy X Position to D0
0000129E  B2BC 00000000            295      CMP.L   #00,        D1
000012A4  6F00 012E                296      BLE     RESET_ENEMY_POSITION_5  ; Reset Enemy if off Screen
000012A8  6000 009A                297      BRA     MOVE_ENEMY_5            ; Move the Enemy
000012AC  4E75                     298      RTS                             ; Return to subroutine
000012AE                           299      
000012AE                           300  UPDATE_6:
000012AE                           301      ; Move the Enemy
000012AE  4281                     302      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012B0  4281                     303      CLR.L   D1                      ; Clear the contents of D0
000012B2  2239 00001B48            304      MOVE.L  ENEMY_X_6,  D1          ; Move the Enemy X Position to D0
000012B8  B2BC 00000000            305      CMP.L   #00,        D1
000012BE  6F00 0124                306      BLE     RESET_ENEMY_POSITION_6  ; Reset Enemy if off Screen
000012C2  6000 00C0                307      BRA     MOVE_ENEMY_6
000012C6  4E75                     308      RTS 
000012C8                           309  
000012C8                           310  UPDATE_7:
000012C8                           311      ; Move the Enemy
000012C8  4281                     312      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012CA  4281                     313      CLR.L   D1                      ; Clear the contents of D0
000012CC  2239 00001B50            314      MOVE.L  ENEMY_X_7,  D1          ; Move the Enemy X Position to D0
000012D2  B2BC 00000000            315      CMP.L   #00,        D1
000012D8  6F00 011A                316      BLE     RESET_ENEMY_POSITION_7  ; Reset Enemy if off Screen
000012DC  6000 0076                317      BRA     MOVE_ENEMY_7
000012E0  4E75                     318      RTS   
000012E2                           319  *-----------------------------------------------------------
000012E2                           320  * Subroutine    : UP
000012E2                           321  * Description   : Move the enemy up 3 frames
000012E2                           322  * By: Qadeer Hussain
000012E2                           323  *-----------------------------------------------------------
000012E2                           324  UP:  
000012E2  57B9 00001B14            325      SUB.L   #3, PLAYER_Y
000012E8                           326      ; Check if player is out of bounds
000012E8  0CB9 0000006E 00001B14   327     CMP.L   #110, PLAYER_Y ; Stop the player from moving up anymore when player Y valye goes to 110
000012F2  6D00 0004                328      BLT     OUT_OF_BOUNDS_UP
000012F6  4E75                     329      RTS
000012F8                           330      
000012F8                           331  OUT_OF_BOUNDS_UP:
000012F8                           332      ; Player is out of bounds, move back into screen
000012F8  7403                     333      MOVE.L  #3, D2   ; set D2 to the amount to move
000012FA  D5B9 00001B14            334      ADD.L   D2, PLAYER_Y  ; move player down
00001300  4E75                     335      RTS
00001302                           336  *-----------------------------------------------------------
00001302                           337  * Subroutine    : DOWN
00001302                           338  * Description   : Move the enemy down 3 frames
00001302                           339  * By: Qadeer Hussain
00001302                           340  *-----------------------------------------------------------
00001302                           341  DOWN:
00001302  56B9 00001B14            342      ADD.L   #3, PLAYER_Y 
00001308                           343      ; Check if player is out of bounds
00001308  0CB9 00000142 00001B14   344      CMP.L   #322, PLAYER_Y  ; Stop the player from moving down anymore when player Y valye goes to 322
00001312  6C00 0004                345      BGE     OUT_OF_BOUNDS_DOWN
00001316  4E75                     346      RTS 
00001318                           347  
00001318                           348  OUT_OF_BOUNDS_DOWN:
00001318                           349      ; Player is out of bounds, move back into screen
00001318  7403                     350      MOVE.L  #3, D2  ; set D2 to the amount to move
0000131A  4482                     351      NEG.L   D2      ; negate D2 to move upwards
0000131C  D5B9 00001B14            352      ADD.L   D2, PLAYER_Y  ; move player up
00001322  4E75                     353      RTS
00001324                           354  *-----------------------------------------------------------
00001324                           355  * Subroutine    : Move Enemy
00001324                           356  * Description   : Move Enemy Right to Left
00001324                           357  *-----------------------------------------------------------
00001324                           358  MOVE_ENEMY_1:
00001324  4281                     359      CLR.L   D1
00001326  2239 00001B58            360      MOVE.L  ENEMY_SPEED_1,D1   ; Move Enemy speed to D1
0000132C  93B9 00001B20            361      SUB.L   D1,    ENEMY_X_1   ; Sub D1 from Enemy_X
00001332  4E75                     362      RTS
00001334                           363       
00001334                           364  MOVE_ENEMY_3:
00001334  4281                     365      CLR.L   D1
00001336  2239 00001B60            366      MOVE.L  ENEMY_SPEED_3,D1   ; Move Enemy speed to D1
0000133C  93B9 00001B30            367      SUB.L   D1,    ENEMY_X_3   ; Sub D1 from Enemy_X
00001342  4E75                     368      RTS
00001344                           369  
00001344                           370  MOVE_ENEMY_5:
00001344  4281                     371      CLR.L   D1
00001346  2239 00001B68            372      MOVE.L  ENEMY_SPEED_5,D1  ; Move Enemy speed to D1
0000134C  93B9 00001B40            373      SUB.L   D1,   ENEMY_X_5   ; Sub D1 from Enemy_X
00001352  4E75                     374      RTS
00001354                           375      
00001354                           376  MOVE_ENEMY_7:
00001354  4281                     377      CLR.L   D1
00001356  2239 00001B70            378      MOVE.L  ENEMY_SPEED_7,D1  ; Move Enemy speed to D1
0000135C  93B9 00001B50            379      SUB.L   D1,   ENEMY_X_7   ; Sub D1 from Enemy_X
00001362  4E75                     380      RTS
00001364                           381       
00001364                           382  MOVE_ENEMY_2:
00001364  4281                     383      CLR.L   D1
00001366  2239 00001B5C            384      MOVE.L  ENEMY_SPEED_2,D1  ; Move Enemy speed to D1
0000136C  93B9 00001B28            385      SUB.L   D1,   ENEMY_X_2   ; Sub D1 from Enemy_X
00001372  4E75                     386      RTS
00001374                           387       
00001374                           388  MOVE_ENEMY_4:
00001374  4281                     389      CLR.L   D1
00001376  2239 00001B64            390      MOVE.L  ENEMY_SPEED_4,D1  ; Move Enemy speed to D1
0000137C  93B9 00001B38            391      SUB.L   D1,   ENEMY_X_4   ; Sub D1 from Enemy_X
00001382  4E75                     392      RTS
00001384                           393      
00001384                           394  MOVE_ENEMY_6:
00001384  4281                     395      CLR.L   D1
00001386  2239 00001B6C            396      MOVE.L  ENEMY_SPEED_6,D1  ; Move Enemy speed to D1
0000138C  93B9 00001B48            397      SUB.L   D1,   ENEMY_X_6   ; Sub D1 from Enemy_X
00001392  4E75                     398      RTS  
00001394                           399  *-----------------------------------------------------------
00001394                           400  * Subroutine    : Reset Enemy
00001394                           401  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001394                           402  *----------------------------------------------------------- 
00001394                           403  RESET_ENEMY_POSITION_1:             ; Reset enemy 1
00001394  4281                     404      CLR.L  D1                       ; Clear contents of D1 (XOR is faster)
00001396  3239 00001B08            405      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000139C  23C1 00001B20            406      MOVE.L  D1,         ENEMY_X_1   ; Enemy X Position
000013A2  4E75                     407      RTS
000013A4                           408   
000013A4                           409  RESET_ENEMY_POSITION_2:             ; Reset enemy 1
000013A4  4281                     410      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013A6  3239 00001B08            411      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000013AC  23C1 00001B28            412      MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
000013B2  4E75                     413      RTS
000013B4                           414      
000013B4                           415  RESET_ENEMY_POSITION_3:             ; Reset enemy 1
000013B4  4281                     416      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013B6  3239 00001B08            417      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000013BC  23C1 00001B30            418      MOVE.L  D1,         ENEMY_X_3   ; Enemy X Position
000013C2  4E75                     419      RTS
000013C4                           420      
000013C4                           421  RESET_ENEMY_POSITION_4:             ; Reset enemy 1
000013C4  4281                     422      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013C6  3239 00001B08            423      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000013CC  23C1 00001B38            424      MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
000013D2  4E75                     425      RTS
000013D4                           426      
000013D4                           427  RESET_ENEMY_POSITION_5:             ; Reset enemy 1
000013D4  4281                     428      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013D6  3239 00001B08            429      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000013DC  23C1 00001B40            430      MOVE.L  D1,         ENEMY_X_5   ; Enemy X Position
000013E2  4E75                     431      RTS
000013E4                           432      
000013E4                           433  RESET_ENEMY_POSITION_6:             ; Reset enemy 1
000013E4  4281                     434      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013E6  3239 00001B08            435      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000013EC  23C1 00001B48            436      MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
000013F2  4E75                     437      RTS
000013F4                           438      
000013F4                           439  RESET_ENEMY_POSITION_7:             ; Reset enemy 1
000013F4  4281                     440      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013F6  3239 00001B08            441      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000013FC  23C1 00001B50            442      MOVE.L  D1,         ENEMY_X_7   ; Enemy X Position
00001402  4E75                     443      RTS
00001404                           444  *-----------------------------------------------------------
00001404                           445  * Subroutine    : Draw
00001404                           446  * Description   : Draw Screen
00001404                           447  *-----------------------------------------------------------
00001404                           448  DRAW: 
00001404                           449      ; Enable back buffer
00001404  103C 005E                450      MOVE.B  #94,        D0
00001408  4E4F                     451      TRAP    #15
0000140A                           452  
0000140A                           453      ; Clear the screen
0000140A  103C 000B                454      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000140E  323C FF00                455      MOVE.W  #$FF00,     D1          ; Clear contents
00001412  4E4F                     456      TRAP    #15                     ; Trap (Perform action)
00001414                           457  
00001414  6100 006C                458      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001418  6100 017C                459      BSR     DRAW_PLAYER             ; Draw Player
0000141C  6100 02C8                460      BSR     DRAW_ENEMY_6            ; Draw Enemy No.6
00001420  6100 02FC                461      BSR     DRAW_ENEMY_7            ; Draw Enemy No.7
00001424  6100 01A8                462      BSR     DRAW_ENEMY_1            ; Draw Enemy No.1
00001428  6100 01DC                463      BSR     DRAW_ENEMY_2            ; Draw Enemy No.2
0000142C  6100 0210                464      BSR     DRAW_ENEMY_3            ; Draw Enemy No.3
00001430  6100 0244                465      BSR     DRAW_ENEMY_4            ; Draw Enemy No.4
00001434  6100 0278                466      BSR     DRAW_ENEMY_5            ; Draw Enemy No.5
00001438  6100 0024                467      BSR     DRAW_BOTTOM_LINE        ; Draw bottom line
0000143C  6100 0004                468      BSR     DRAW_TOP_LINE           ; Draw top line
00001440                           469      
00001440  4E75                     470      RTS                             ; Return to subroutine
00001442                           471  DRAW_TOP_LINE:
00001442                           472      
00001442  223C 0000FF00            473      MOVE.L  #LIME,       D1         ; Set color
00001448  7050                     474      MOVE.L  #80,         D0         ; Move the pen colour trap to D0   
0000144A  4E4F                     475      TRAP    #15
0000144C                           476      
0000144C  4281                     477      CLR.L   D1
0000144E  746C                     478      MOVE.L  #TOP_Y_LINE,D2          ; Move the Top Y to D2
00001450  3639 00001B08            479      MOVE.W  SCREEN_W,  D3           ; Move the screen_W which will be the length of the line to D3
00001456  786C                     480      MOVE.L  #TOP_Y_LINE,D4          ; Move the Top Y to D4
00001458                           481      
00001458  7054                     482      MOVE.L  #84,       D0           ; Trap to draw the line
0000145A  4E4F                     483      TRAP    #15
0000145C                           484      
0000145C  4E75                     485      RTS             
0000145E                           486  DRAW_BOTTOM_LINE:
0000145E                           487      
0000145E  223C 0000FF00            488      MOVE.L  #LIME,       D1         ; Set color
00001464  7050                     489      MOVE.L  #80,         D0         ; Move the pen colour trap to D0
00001466  4E4F                     490      TRAP    #15
00001468                           491      
00001468  4281                     492      CLR.L   D1
0000146A  243C 00000156            493      MOVE.L  #BOTTOM_Y_LINE,D2       ; Move the Bottom Y value to D2
00001470  3639 00001B08            494      MOVE.W  SCREEN_W,  D3           ; Move the screen_W which will be the length of the line to D3
00001476  283C 00000156            495      MOVE.L  #BOTTOM_Y_LINE,D4       ; Move the Bottom Y value to D4
0000147C                           496      
0000147C  7054                     497      MOVE.L  #84,       D0           ; Trap to draw the line
0000147E  4E4F                     498      TRAP    #15 
00001480                           499      
00001480  4E75                     500      RTS    
00001482                           501  *-----------------------------------------------------------
00001482                           502  * Subroutine    : Draw Player Data
00001482                           503  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001482                           504  *-----------------------------------------------------------
00001482                           505  DRAW_PLYR_DATA:
00001482  4281                     506      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001484                           507  
00001484                           508      ; Player Score Message
00001484  103C 000B                509      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001488  323C 0201                510      MOVE.W  #$0201,     D1          ; Col 02, Row 01
0000148C  4E4F                     511      TRAP    #15                     ; Trap (Perform action)
0000148E  43F9 00001AAE            512      LEA     SCORE_MSG,  A1          ; Score Message
00001494  303C 000D                513      MOVE    #13,        D0          ; No Line feed
00001498  4E4F                     514      TRAP    #15                     ; Trap (Perform action)
0000149A                           515  
0000149A                           516      ; Player Score Value
0000149A  103C 000B                517      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000149E  323C 0901                518      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000014A2  4E4F                     519      TRAP    #15                     ; Trap (Perform action)
000014A4  103C 0003                520      MOVE.B  #03,        D0          ; Display number at D1.L
000014A8  2239 00001B18            521      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000014AE  4E4F                     522      TRAP    #15                     ; Trap (Perform action)
000014B0                           523      
000014B0                           524      ; Health Message
000014B0  103C 000B                525      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014B4  323C 0203                526      MOVE.W  #$0203,     D1          ; Col 02, Row 03
000014B8  4E4F                     527      TRAP    #15                     ; Trap (Perform action)
000014BA  43F9 00001AD8            528      LEA     HEALTH_MSG, A1          ; Health Message
000014C0  303C 000D                529      MOVE    #13,        D0          ; No Line feed
000014C4  4E4F                     530      TRAP    #15                     ; Trap (Perform action)
000014C6                           531      
000014C6                           532      ; Health Value
000014C6  103C 000B                533      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014CA  323C 0903                534      MOVE.W  #$0903,     D1          ; Col 09, Row 03
000014CE  4E4F                     535      TRAP    #15                     ; Trap (Perform action)
000014D0  103C 0003                536      MOVE.B  #03,        D0          ; Display number at D1.L
000014D4  2239 00001B1C            537      MOVE.L  HEALTH_VALUE,D1         ; Move Health to D1.L
000014DA  4E4F                     538      TRAP    #15                     ; Trap (Perform action)
000014DC                           539      
000014DC                           540      ; Player X Message
000014DC  103C 000B                541      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014E0  323C 0202                542      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000014E4  4E4F                     543      TRAP    #15                     ; Trap (Perform action)
000014E6  43F9 00001AD2            544      LEA     X_MSG,      A1          ; X Message
000014EC  303C 000D                545      MOVE    #13,        D0          ; No Line feed
000014F0  4E4F                     546      TRAP    #15                     ; Trap (Perform action)
000014F2                           547      
000014F2                           548      ; Player X
000014F2  103C 000B                549      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
000014F6  323C 0502                550      MOVE.W  #$0502,     D1          ; Col 05, Row 02
000014FA  4E4F                     551      TRAP    #15                     ; Trap (Perform action)
000014FC  103C 0003                552      MOVE.B  #03,        D0          ; Display number at D1.L
00001500  2239 00001B10            553      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001506  4E4F                     554      TRAP    #15                     ; Trap (Perform action)
00001508                           555      
00001508                           556      ; Player Y Message
00001508  103C 000B                557      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000150C  323C 1002                558      MOVE.W  #$1002,     D1          ; Col 10, Row 02
00001510  4E4F                     559      TRAP    #15                     ; Trap (Perform action)
00001512  43F9 00001AD5            560      LEA     Y_MSG,      A1          ; Y Message
00001518  303C 000D                561      MOVE    #13,        D0          ; No Line feed
0000151C  4E4F                     562      TRAP    #15                     ; Trap (Perform action)
0000151E                           563      
0000151E                           564      ; Player Y
0000151E  103C 000B                565      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001522  323C 1202                566      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00001526  4E4F                     567      TRAP    #15                     ; Trap (Perform action)
00001528  103C 0003                568      MOVE.B  #03,        D0          ; Display number at D1.L
0000152C  2239 00001B14            569      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
00001532  4E4F                     570      TRAP    #15                     ; Trap (Perform action) 
00001534                           571      
00001534                           572      ; Show Keys Pressed
00001534  103C 000B                573      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001538  323C 2001                574      MOVE.W  #$2001,     D1          ; Col 20, Row 1
0000153C  4E4F                     575      TRAP    #15                     ; Trap (Perform action)
0000153E  43F9 00001AB7            576      LEA     KEYCODE_MSG, A1         ; Keycode
00001544  303C 000D                577      MOVE    #13,        D0          ; No Line feed
00001548  4E4F                     578      TRAP    #15                     ; Trap (Perform action)
0000154A                           579  
0000154A                           580      ; Show KeyCode
0000154A  103C 000B                581      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000154E  323C 3001                582      MOVE.W  #$3001,     D1          ; Col 30, Row 1
00001552  4E4F                     583      TRAP    #15                     ; Trap (Perform action)    
00001554  2239 00001B0C            584      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
0000155A  103C 0003                585      MOVE.B  #03,        D0          ; Display the contents of D1
0000155E  4E4F                     586      TRAP    #15                     ; Trap (Perform action)
00001560                           587      
00001560                           588      ; Show Contols
00001560  103C 000B                589      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001564  323C 2017                590      MOVE.W  #$2017,     D1          ; Col 20, Row 19
00001568  4E4F                     591      TRAP    #15                     ; Trap (Perform action)
0000156A  43F9 00001AE2            592      LEA     CONTROLS,   A1        ; Keycode
00001570  303C 000D                593      MOVE    #13,        D0          ; No Line feed
00001574  4E4F                     594      TRAP    #15                     ; Trap (Perform action)
00001576                           595  
00001576  4E75                     596      RTS  
00001578                           597  *-----------------------------------------------------------
00001578                           598  * Subroutines   : Sound Load and Play
00001578                           599  * Description   : Initialise game sounds into memory 
00001578                           600  * Current Sounds are RUN, JUMP and Opps for Collision
00001578                           601  *-----------------------------------------------------------
00001578                           602  OPPS_LOAD:
00001578  43F9 00001B74            603      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
0000157E  323C 0002                604      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001582  303C 0047                605      MOVE    #71,        D0          ; Load into memory
00001586  4E4F                     606      TRAP    #15                     ; Trap (Perform action)
00001588  4E75                     607      RTS                             ; Return to subroutine
0000158A                           608  
0000158A                           609  PLAY_OPPS:
0000158A  323C 0002                610      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
0000158E  303C 0048                611      MOVE    #72,        D0          ; Play Sound
00001592  4E4F                     612      TRAP    #15                     ; Trap (Perform action)
00001594  4E75                     613      RTS                             ; Return to subroutine
00001596                           614  *-----------------------------------------------------------
00001596                           615  * Subroutine    : Draw Player
00001596                           616  * Description   : Draw Player Square
00001596                           617  *-----------------------------------------------------------
00001596                           618  DRAW_PLAYER:
00001596                           619      ; Set Pixel Colors
00001596  223C 00FFFFFF            620      MOVE.L  #WHITE,     D1          ; Set Background color
0000159C  103C 0050                621      MOVE.B  #80,        D0          ; Task for Background Color
000015A0  4E4F                     622      TRAP    #15                     ; Trap (Perform action)
000015A2                           623  
000015A2                           624      ; Set X, Y, Width and Height
000015A2  2239 00001B10            625      MOVE.L  PLAYER_X,   D1          ; X
000015A8  2439 00001B14            626      MOVE.L  PLAYER_Y,   D2          ; Y
000015AE  2639 00001B10            627      MOVE.L  PLAYER_X,   D3
000015B4  0683 00000014            628      ADD.L   #PLYR_W_INIT,   D3      ; Width
000015BA  2839 00001B14            629      MOVE.L  PLAYER_Y,   D4 
000015C0  0684 00000014            630      ADD.L   #PLYR_H_INIT,   D4      ; Height
000015C6                           631      
000015C6                           632      ; Draw Player
000015C6  103C 0057                633      MOVE.B  #87,        D0          ; Draw Player
000015CA  4E4F                     634      TRAP    #15                     ; Trap (Perform action)
000015CC  4E75                     635      RTS                             ; Return to subroutine
000015CE                           636  
000015CE                           637  *-----------------------------------------------------------
000015CE                           638  * Subroutine    : Draw Enemy
000015CE                           639  * Description   : Draw Enemy Square
000015CE                           640  *-----------------------------------------------------------    
000015CE                           641  DRAW_ENEMY_1:                       ; Draw Enemy No.1
000015CE                           642      ; Set Pixel Colors
000015CE  223C 000000FF            643      MOVE.L  #RED,       D1          ; Set Background color
000015D4  103C 0050                644      MOVE.B  #80,        D0          ; Task for Background Color
000015D8  4E4F                     645      TRAP    #15                     ; Trap (Perform action)
000015DA                           646  
000015DA                           647      ; Set X, Y, Width and Height
000015DA  2239 00001B20            648      MOVE.L  ENEMY_X_1,    D1        ; X
000015E0  2439 00001B24            649      MOVE.L  ENEMY_Y_1,    D2        ; Y
000015E6  2639 00001B20            650      MOVE.L  ENEMY_X_1,    D3
000015EC  0683 00000014            651      ADD.L   #ENMY_W_INIT, D3        ; Width
000015F2  2839 00001B24            652      MOVE.L  ENEMY_Y_1,    D4 
000015F8  0684 00000014            653      ADD.L   #ENMY_H_INIT, D4        ; Height
000015FE                           654      
000015FE                           655      ; Draw Enemy    
000015FE  103C 0057                656      MOVE.B  #87,        D0          ; Draw Enemy
00001602  4E4F                     657      TRAP    #15                     ; Trap (Perform action)
00001604  4E75                     658      RTS                             ; Return to subroutine
00001606                           659  
00001606                           660  DRAW_ENEMY_2:                       ; Draw Enemy No.2
00001606                           661      ; Set Pixel Colors
00001606  223C 000000FF            662      MOVE.L  #RED,       D1          ; Set Background color
0000160C  103C 0050                663      MOVE.B  #80,        D0          ; Task for Background Color
00001610  4E4F                     664      TRAP    #15                     ; Trap (Perform action)
00001612                           665  
00001612                           666      ; Set X, Y, Width and Height
00001612  2239 00001B28            667      MOVE.L  ENEMY_X_2,    D1        ; X
00001618  2439 00001B2C            668      MOVE.L  ENEMY_Y_2,    D2        ; Y
0000161E  2639 00001B28            669      MOVE.L  ENEMY_X_2,    D3
00001624  0683 00000014            670      ADD.L   #ENMY_W_INIT, D3        ; Width
0000162A  2839 00001B2C            671      MOVE.L  ENEMY_Y_2,    D4 
00001630  0684 00000014            672      ADD.L   #ENMY_H_INIT, D4        ; Height
00001636                           673      
00001636                           674      ; Draw Enemy    
00001636  103C 0057                675      MOVE.B  #87,        D0          ; Draw Enemy
0000163A  4E4F                     676      TRAP    #15                     ; Trap (Perform action)
0000163C  4E75                     677      RTS                             ; Return to subroutine
0000163E                           678              
0000163E                           679  DRAW_ENEMY_3:                       ; Draw Enemy No.3
0000163E                           680      ; Set Pixel Colors
0000163E  223C 000000FF            681      MOVE.L  #RED,       D1          ; Set Background color
00001644  103C 0050                682      MOVE.B  #80,        D0          ; Task for Background Color
00001648  4E4F                     683      TRAP    #15                     ; Trap (Perform action)
0000164A                           684  
0000164A                           685      ; Set X, Y, Width and Height
0000164A  2239 00001B30            686      MOVE.L  ENEMY_X_3,    D1        ; X
00001650  2439 00001B34            687      MOVE.L  ENEMY_Y_3,    D2        ; Y
00001656  2639 00001B30            688      MOVE.L  ENEMY_X_3,    D3
0000165C  0683 00000014            689      ADD.L   #ENMY_W_INIT, D3        ; Width
00001662  2839 00001B34            690      MOVE.L  ENEMY_Y_3,    D4 
00001668  0684 00000014            691      ADD.L   #ENMY_H_INIT, D4        ; Height
0000166E                           692      
0000166E                           693      ; Draw Enemy    
0000166E  103C 0057                694      MOVE.B  #87,        D0          ; Draw Enemy
00001672  4E4F                     695      TRAP    #15                     ; Trap (Perform action)
00001674  4E75                     696      RTS                             ; Return to subroutine
00001676                           697  
00001676                           698  DRAW_ENEMY_4:                       ; Draw Enemy No.4
00001676                           699      ; Set Pixel Colors
00001676  223C 000000FF            700      MOVE.L  #RED,       D1          ; Set Background color
0000167C  103C 0050                701      MOVE.B  #80,        D0          ; Task for Background Color
00001680  4E4F                     702      TRAP    #15                     ; Trap (Perform action)
00001682                           703  
00001682                           704      ; Set X, Y, Width and Height
00001682  2239 00001B38            705      MOVE.L  ENEMY_X_4,    D1        ; X
00001688  2439 00001B3C            706      MOVE.L  ENEMY_Y_4,    D2        ; Y
0000168E  2639 00001B38            707      MOVE.L  ENEMY_X_4,    D3
00001694  0683 00000014            708      ADD.L   #ENMY_W_INIT, D3        ; Width
0000169A  2839 00001B3C            709      MOVE.L  ENEMY_Y_4,    D4 
000016A0  0684 00000014            710      ADD.L   #ENMY_H_INIT, D4        ; Height
000016A6                           711      
000016A6                           712      ; Draw Enemy    
000016A6  103C 0057                713      MOVE.B  #87,        D0          ; Draw Enemy
000016AA  4E4F                     714      TRAP    #15                     ; Trap (Perform action)
000016AC  4E75                     715      RTS                             ; Return to subroutine 
000016AE                           716      
000016AE                           717  DRAW_ENEMY_5:                       ; Draw Enemy No.5
000016AE                           718      ; Set Pixel Colors
000016AE  223C 000000FF            719      MOVE.L  #RED,       D1          ; Set Background color
000016B4  103C 0050                720      MOVE.B  #80,        D0          ; Task for Background Color
000016B8  4E4F                     721      TRAP    #15                     ; Trap (Perform action)
000016BA                           722  
000016BA                           723      ; Set X, Y, Width and Height
000016BA  2239 00001B40            724      MOVE.L  ENEMY_X_5,    D1          ; X
000016C0  2439 00001B44            725      MOVE.L  ENEMY_Y_5,      D2          ; Y
000016C6  2639 00001B40            726      MOVE.L  ENEMY_X_5,    D3
000016CC  0683 00000014            727      ADD.L   #ENMY_W_INIT,   D3      ; Width
000016D2  2839 00001B44            728      MOVE.L  ENEMY_Y_5,    D4 
000016D8  0684 00000014            729      ADD.L   #ENMY_H_INIT,   D4      ; Height
000016DE                           730      
000016DE                           731      ; Draw Enemy    
000016DE  103C 0057                732      MOVE.B  #87,        D0          ; Draw Enemy
000016E2  4E4F                     733      TRAP    #15                     ; Trap (Perform action)
000016E4  4E75                     734      RTS                             ; Return to subroutine
000016E6                           735  
000016E6                           736  DRAW_ENEMY_6:                       ; Draw Enemy No.6
000016E6                           737      ; Set Pixel Colors
000016E6  223C 000000FF            738      MOVE.L  #RED,       D1          ; Set Background color
000016EC  103C 0050                739      MOVE.B  #80,        D0          ; Task for Background Color
000016F0  4E4F                     740      TRAP    #15                     ; Trap (Perform action)
000016F2                           741  
000016F2                           742      ; Set X, Y, Width and Height
000016F2  2239 00001B48            743      MOVE.L  ENEMY_X_6,    D1        ; X
000016F8  2439 00001B4C            744      MOVE.L  ENEMY_Y_6,    D2        ; Y
000016FE  2639 00001B48            745      MOVE.L  ENEMY_X_6,    D3
00001704  0683 00000014            746      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000170A  2839 00001B4C            747      MOVE.L  ENEMY_Y_6,    D4 
00001710  0684 00000014            748      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001716                           749      
00001716                           750      ; Draw Enemy    
00001716  103C 0057                751      MOVE.B  #87,        D0          ; Draw Enemy
0000171A  4E4F                     752      TRAP    #15                     ; Trap (Perform action)
0000171C  4E75                     753      RTS                             ; Return to subroutine  
0000171E                           754  
0000171E                           755  DRAW_ENEMY_7:                       ; Draw Enemy No.7
0000171E                           756      ; Set Pixel Colors
0000171E  223C 000000FF            757      MOVE.L  #RED,       D1          ; Set Background color
00001724  103C 0050                758      MOVE.B  #80,        D0          ; Task for Background Color
00001728  4E4F                     759      TRAP    #15                     ; Trap (Perform action)
0000172A                           760  
0000172A                           761      ; Set X, Y, Width and Height
0000172A  2239 00001B50            762      MOVE.L  ENEMY_X_7,    D1        ; X
00001730  2439 00001B54            763      MOVE.L  ENEMY_Y_7,    D2        ; Y
00001736  2639 00001B50            764      MOVE.L  ENEMY_X_7,    D3
0000173C  0683 00000014            765      ADD.L   #ENMY_W_INIT, D3        ; Width
00001742  2839 00001B54            766      MOVE.L  ENEMY_Y_7,    D4 
00001748  0684 00000014            767      ADD.L   #ENMY_H_INIT, D4        ; Height
0000174E                           768      
0000174E                           769      ; Draw Enemy    
0000174E  103C 0057                770      MOVE.B  #87,        D0          ; Draw Enemy
00001752  4E4F                     771      TRAP    #15                     ; Trap (Perform action)
00001754  4E75                     772      RTS                             ; Return to subroutine              
00001756                           773  ;----------------------------------------------------------
00001756                           774  * Subroutine    : Collision Check
00001756                           775  * Description   : Axis-Aligned Bounding Box Collision Detection
00001756                           776  * Algorithm checks for overlap on the 4 sides of the Player and 
00001756                           777  * Enemy rectangles
00001756                           778  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001756                           779  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001756                           780  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001756                           781  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001756                           782  *-----------------------------------------------------------
00001756                           783  CHECK_COLLISIONS_1:
00001756  4281                     784      CLR.L   D1                      ; Clear D1
00001758  4282                     785      CLR.L   D2                      ; Clear D2
0000175A                           786  
0000175A                           787  PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W:
0000175A  2239 00001B10            788      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001760  2439 00001B20            789      MOVE.L  ENEMY_X_1,  D2          ; Move Enemy X to D2
00001766  D4B8 0014                790      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000176A  B481                     791      CMP.L   D1,         D2          ; Do the Overlap ?
0000176C  6F00 0006                792      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  ; Less than or Equal ?
00001770  6000 02AE                793      BRA     COLLISION_CHECK_DONE   ; If not no collision
00001774                           794      
00001774                           795  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1:     ; Check player is not  
00001774  D2B8 0014                796      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001778  2439 00001B20            797      MOVE.L  ENEMY_X_1,  D2          ; Move Enemy X to D2
0000177E  B481                     798      CMP.L   D1,         D2          ; Do they OverLap ?
00001780  6C00 0006                799      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  ; Less than or Equal
00001784  6000 029A                800      BRA     COLLISION_CHECK_DONE   ; If not no collision
00001788                           801     
00001788                           802  PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H:     
00001788  2239 00001B14            803      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000178E  2439 00001B24            804      MOVE.L  ENEMY_Y_1,  D2          ; Move Enemy Y to D2
00001794  D4B8 0014                805      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001798  B481                     806      CMP.L   D1,         D2          ; Do they Overlap ?
0000179A  6F00 0006                807      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  ; Less than or Equal
0000179E  6000 0280                808      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017A2                           809      
000017A2                           810  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1:     ; Less than or Equal 
000017A2  2239 00001B14            811      MOVE.L  PLAYER_Y,   D1
000017A8  D2B8 0014                812      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000017AC  2439 00001B24            813      MOVE.L  ENEMY_Y_1,  D2          ; Move Enemy Height to D2  
000017B2  B481                     814      CMP.L   D1,         D2          ; Do they OverLap ?
000017B4  6C00 027A                815      BGE     COLLISION              ; Collision !
000017B8  6000 0266                816      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017BC                           817  *------------------------------------------------------------------------------ 
000017BC                           818  CHECK_COLLISIONS_2:
000017BC  4281                     819      CLR.L   D1                      ; Clear D1
000017BE  4282                     820      CLR.L   D2                      ; Clear D2
000017C0                           821  
000017C0                           822  PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W:
000017C0  2239 00001B10            823      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000017C6  2439 00001B28            824      MOVE.L  ENEMY_X_2,  D2          ; Move Enemy X to D2
000017CC  D4B8 0014                825      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000017D0  B481                     826      CMP.L   D1,         D2          ; Do the Overlap ?
000017D2  6F00 0006                827      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  ; Less than or Equal ?
000017D6  6000 0248                828      BRA     COLLISION_CHECK_DONE   ; If not no collision
000017DA                           829      
000017DA                           830  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2:     ; Check player is not  
000017DA  D2B8 0014                831      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000017DE  2439 00001B28            832      MOVE.L  ENEMY_X_2,  D2          ; Move Enemy X to D2
000017E4  B481                     833      CMP.L   D1,         D2          ; Do they OverLap ?
000017E6  6C00 0006                834      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  ; Less than or Equal
000017EA  6000 0234                835      BRA     COLLISION_CHECK_DONE   ; If not no collision
000017EE                           836     
000017EE                           837  PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H:     
000017EE  2239 00001B14            838      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000017F4  2439 00001B2C            839      MOVE.L  ENEMY_Y_2,  D2          ; Move Enemy Y to D2
000017FA  D4B8 0014                840      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000017FE  B481                     841      CMP.L   D1,         D2          ; Do they Overlap ?
00001800  6F00 0006                842      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  ; Less than or Equal
00001804  6000 021A                843      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001808                           844      
00001808                           845  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2:     ; Less than or Equal ?
00001808  2239 00001B14            846      MOVE.L  PLAYER_Y,   D1
0000180E  D2B8 0014                847      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001812  2439 00001B2C            848      MOVE.L  ENEMY_Y_2,  D2          ; Move Enemy Height to D2  
00001818  B481                     849      CMP.L   D1,         D2          ; Do they OverLap ?
0000181A  6C00 0214                850      BGE     COLLISION              ; Collision !
0000181E  6000 0200                851      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001822                           852  *--------------------------------------------------------------------------------- 
00001822                           853  CHECK_COLLISIONS_3:
00001822  4281                     854      CLR.L   D1                      ; Clear D1
00001824  4282                     855      CLR.L   D2                      ; Clear D2
00001826                           856  
00001826                           857  PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W:
00001826  2239 00001B10            858      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000182C  2439 00001B30            859      MOVE.L  ENEMY_X_3,  D2          ; Move Enemy X to D2
00001832  D4B8 0014                860      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001836  B481                     861      CMP.L   D1,         D2          ; Do the Overlap ?
00001838  6F00 0006                862      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  ; Less than or Equal ?
0000183C  6000 01E2                863      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001840                           864  
00001840                           865  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3:     ; Check player is not  
00001840  D2B8 0014                866      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001844  2439 00001B30            867      MOVE.L  ENEMY_X_3,  D2          ; Move Enemy X to D2
0000184A  B481                     868      CMP.L   D1,         D2          ; Do they OverLap ?
0000184C  6C00 0006                869      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  ; Less than or Equal
00001850  6000 01CE                870      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001854                           871     
00001854                           872  PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H:     
00001854  2239 00001B14            873      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000185A  2439 00001B34            874      MOVE.L  ENEMY_Y_3,  D2          ; Move Enemy Y to D2
00001860  D4B8 0014                875      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001864  B481                     876      CMP.L   D1,         D2          ; Do they Overlap ?
00001866  6F00 0006                877      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  ; Less than or Equal
0000186A  6000 01B4                878      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000186E                           879      
0000186E                           880  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3:     ; Less than or Equal ?
0000186E  2239 00001B14            881      MOVE.L  PLAYER_Y,   D1
00001874  D2B8 0014                882      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001878  2439 00001B34            883      MOVE.L  ENEMY_Y_3,  D2          ; Move Enemy Height to D2  
0000187E  B481                     884      CMP.L   D1,         D2          ; Do they OverLap ?
00001880  6C00 01AE                885      BGE     COLLISION              ; Collision !
00001884  6000 019A                886      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001888                           887  *--------------------------------------------------------------------------------
00001888                           888  CHECK_COLLISIONS_4:
00001888  4281                     889      CLR.L   D1                      ; Clear D1
0000188A  4282                     890      CLR.L   D2                      ; Clear D2
0000188C                           891  
0000188C                           892  PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W:
0000188C  2239 00001B10            893      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001892  2439 00001B38            894      MOVE.L  ENEMY_X_4,  D2          ; Move Enemy X to D2
00001898  D4B8 0014                895      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000189C  B481                     896      CMP.L   D1,         D2          ; Do the Overlap ?
0000189E  6F00 0006                897      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  ; Less than or Equal ?
000018A2  6000 017C                898      BRA     COLLISION_CHECK_DONE    ; If not no collision
000018A6                           899  
000018A6                           900  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4:     ; Check player is not  
000018A6  D2B8 0014                901      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000018AA  2439 00001B38            902      MOVE.L  ENEMY_X_4,  D2          ; Move Enemy X to D2
000018B0  B481                     903      CMP.L   D1,         D2          ; Do they OverLap ?
000018B2  6C00 0006                904      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  ; Less than or Equal
000018B6  6000 0168                905      BRA     COLLISION_CHECK_DONE    ; If not no collision
000018BA                           906     
000018BA                           907  PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H:     
000018BA  2239 00001B14            908      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000018C0  2439 00001B3C            909      MOVE.L  ENEMY_Y_4,  D2          ; Move Enemy Y to D2
000018C6  D4B8 0014                910      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000018CA  B481                     911      CMP.L   D1,         D2          ; Do they Overlap ?
000018CC  6F00 0006                912      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  ; Less than or Equal
000018D0  6000 014E                913      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000018D4                           914      
000018D4                           915  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4:     ; Less than or Equal ?
000018D4  2239 00001B14            916      MOVE.L  PLAYER_Y,   D1
000018DA  D2B8 0014                917      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000018DE  2439 00001B3C            918      MOVE.L  ENEMY_Y_4,  D2          ; Move Enemy Height to D2  
000018E4  B481                     919      CMP.L   D1,         D2          ; Do they OverLap ?
000018E6  6C00 0148                920      BGE     COLLISION               ; Collision !
000018EA  6000 0134                921      BRA     COLLISION_CHECK_DONE    ; If not no collision
000018EE                           922  *---------------------------------------------------------------------------------
000018EE                           923  CHECK_COLLISIONS_5:
000018EE  4281                     924      CLR.L   D1                      ; Clear D1
000018F0  4282                     925      CLR.L   D2                      ; Clear D2
000018F2                           926      
000018F2                           927  PLAYER_X_LTE_TO_ENEMY_X_5_PLUS_W:
000018F2  2239 00001B10            928      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000018F8  2439 00001B40            929      MOVE.L  ENEMY_X_5,  D2          ; Move Enemy X to D2
000018FE  D4B8 0014                930      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001902  B481                     931      CMP.L   D1,         D2          ; Do the Overlap ?
00001904  6F00 0006                932      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5  ; Less than or Equal ?
00001908  6000 0116                933      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000190C                           934      
0000190C                           935  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5:     ; Check player is not  
0000190C  D2B8 0014                936      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001910  2439 00001B40            937      MOVE.L  ENEMY_X_5,  D2          ; Move Enemy X to D2
00001916  B481                     938      CMP.L   D1,         D2          ; Do they OverLap ?
00001918  6C00 0006                939      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H  ; Less than or Equal
0000191C  6000 0102                940      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001920                           941     
00001920                           942  PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H:     
00001920  2239 00001B14            943      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001926  2439 00001B44            944      MOVE.L  ENEMY_Y_5,  D2          ; Move Enemy Y to D2
0000192C  D4B8 0014                945      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001930  B481                     946      CMP.L   D1,         D2          ; Do they Overlap ?
00001932  6F00 0006                947      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5  ; Less than or Equal
00001936  6000 00E8                948      BRA     COLLISION_CHECK_DONE    ; If not no collision 
0000193A                           949      
0000193A                           950  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5:     ; Less than or Equal ?
0000193A  2239 00001B14            951      MOVE.L  PLAYER_Y,   D1
00001940  D2B8 0014                952      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001944  2439 00001B44            953      MOVE.L  ENEMY_Y_5,  D2          ; Move Enemy Height to D2  
0000194A  B481                     954      CMP.L   D1,         D2          ; Do they OverLap ?
0000194C  6C00 00E2                955      BGE     COLLISION               ; Collision !
00001950  6000 00CE                956      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001954                           957  *----------------------------------------------------------------------------------
00001954                           958  CHECK_COLLISIONS_6:
00001954  4281                     959      CLR.L   D1                      ; Clear D1
00001956  4282                     960      CLR.L   D2                      ; Clear D2
00001958                           961      
00001958                           962  PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W:
00001958  2239 00001B10            963      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000195E  2439 00001B48            964      MOVE.L  ENEMY_X_6,  D2          ; Move Enemy X to D2
00001964  D4B8 0014                965      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001968  B481                     966      CMP.L   D1,         D2          ; Do the Overlap ?
0000196A  6F00 0006                967      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  ; Less than or Equal ?
0000196E  6000 00B0                968      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001972                           969      
00001972                           970  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6:     ; Check player is not  
00001972  D2B8 0014                971      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001976  2439 00001B48            972      MOVE.L  ENEMY_X_6,  D2          ; Move Enemy X to D2
0000197C  B481                     973      CMP.L   D1,         D2          ; Do they OverLap ?
0000197E  6C00 0006                974      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  ; Less than or Equal
00001982  6000 009C                975      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001986                           976     
00001986                           977  PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H:     
00001986  2239 00001B14            978      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000198C  2439 00001B4C            979      MOVE.L  ENEMY_Y_6,  D2          ; Move Enemy Y to D2
00001992  D4B8 0014                980      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001996  B481                     981      CMP.L   D1,         D2          ; Do they Overlap ?
00001998  6F00 0006                982      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  ; Less than or Equal
0000199C  6000 0082                983      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000019A0                           984      
000019A0                           985  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6:     ; Less than or Equal ?
000019A0  2239 00001B14            986      MOVE.L  PLAYER_Y,   D1
000019A6  D2B8 0014                987      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000019AA  2439 00001B4C            988      MOVE.L  ENEMY_Y_6,  D2          ; Move Enemy Height to D2  
000019B0  B481                     989      CMP.L   D1,         D2          ; Do they OverLap ?
000019B2  6C00 007C                990      BGE     COLLISION               ; Collision !
000019B6  6000 0068                991      BRA     COLLISION_CHECK_DONE    ; If not no collision
000019BA                           992  *---------------------------------------------------------------------------------
000019BA                           993  CHECK_COLLISIONS_7:
000019BA  4281                     994      CLR.L   D1                      ; Clear D1
000019BC  4282                     995      CLR.L   D2                      ; Clear D2
000019BE                           996      
000019BE                           997  PLAYER_X_LTE_TO_ENEMY_X_7_PLUS_W:
000019BE  2239 00001B10            998      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000019C4  2439 00001B50            999      MOVE.L  ENEMY_X_7,  D2          ; Move Enemy X to D2
000019CA  D4B8 0014               1000      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000019CE  B481                    1001      CMP.L   D1,         D2          ; Do the Overlap ?
000019D0  6F00 0006               1002      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7  ; Less than or Equal ?
000019D4  6000 004A               1003      BRA     COLLISION_CHECK_DONE    ; If not no collision
000019D8                          1004      
000019D8                          1005  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7:     ; Check player is not  
000019D8  D2B8 0014               1006      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000019DC  2439 00001B50           1007      MOVE.L  ENEMY_X_7,  D2          ; Move Enemy X to D2
000019E2  B481                    1008      CMP.L   D1,         D2          ; Do they OverLap ?
000019E4  6C00 0006               1009      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H  ; Less than or Equal
000019E8  6000 0036               1010      BRA     COLLISION_CHECK_DONE    ; If not no collision
000019EC                          1011     
000019EC                          1012  PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H:     
000019EC  2239 00001B14           1013      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000019F2  2439 00001B54           1014      MOVE.L  ENEMY_Y_7,  D2          ; Move Enemy Y to D2
000019F8  D4B8 0014               1015      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000019FC  B481                    1016      CMP.L   D1,         D2          ; Do they Overlap ?
000019FE  6F00 0006               1017      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7  ; Less than or Equal
00001A02  6000 001C               1018      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001A06                          1019      
00001A06                          1020  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7:     ; Less than or Equal ?
00001A06  2239 00001B14           1021      MOVE.L  PLAYER_Y,   D1
00001A0C  D2B8 0014               1022      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001A10  2439 00001B54           1023      MOVE.L  ENEMY_Y_7,  D2          ; Move Enemy Height to D2  
00001A16  B481                    1024      CMP.L   D1,         D2          ; Do they OverLap ?
00001A18  6C00 0016               1025      BGE     COLLISION               ; Collision !
00001A1C  6000 0002               1026      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001A20                          1027  *---------------------------------------------------------------------------------
00001A20                          1028  COLLISION_CHECK_DONE:               ; No Collision Update points
00001A20  2239 00001B18           1029      MOVE.L  PLAYER_SCORE,D1         ; Move Player_score yo D1
00001A26  5281                    1030      ADD.L   #POINTS,    D1          ; Add points upgrade to D1
00001A28  23C1 00001B18           1031      MOVE.L  D1,PLAYER_SCORE         ; Update player score in memory
00001A2E  4E75                    1032      RTS                             ; Return to subroutine
00001A30                          1033  
00001A30                          1034  COLLISION:
00001A30  6100 FB58               1035      BSR     PLAY_OPPS               ; Play Opps Wav
00001A34  04B9 00000014 00001B1C  1036      SUB.L   #20, HEALTH_VALUE       ; Sub 20 from Health everytime there is a collison
00001A3E                          1037      IF.L    (HEALTH_VALUE) <EQ> #0 THEN     ; If the = 0 then
00001A4C                          1038      
00001A4C  103C 000B               1039              MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001A50  323C FF00               1040              MOVE.W  #$FF00,     D1          ; Clear contents
00001A54  4E4F                    1041              TRAP    #15                     ; Trap (Perform action)
00001A56                          1042              
00001A56  6100 FA2A               1043              BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001A5A  6100 FB3A               1044              BSR     DRAW_PLAYER             ; Draw Player
00001A5E  6100 FB6E               1045              BSR     DRAW_ENEMY_1            ; Draw Enemey 1
00001A62  6100 FBA2               1046              BSR     DRAW_ENEMY_2            ; Draw Enemey 2
00001A66  6100 FBD6               1047              BSR     DRAW_ENEMY_3            ; Draw Enemey 3
00001A6A  6100 FC0A               1048              BSR     DRAW_ENEMY_4            ; Draw Enemey 4
00001A6E  6100 FC3E               1049              BSR     DRAW_ENEMY_5            ; Draw Enemey 5
00001A72  6100 FC72               1050              BSR     DRAW_ENEMY_6            ; Draw Enemey 6
00001A76  6100 FCA6               1051              BSR     DRAW_ENEMY_7            ; Draw Enemey 7
00001A7A  6100 F9E2               1052              BSR     DRAW_BOTTOM_LINE        ; Draw bottom line
00001A7E  6100 F9C2               1053              BSR     DRAW_TOP_LINE           ; Draw bottom line
00001A82                          1054  
00001A82  103C 005E               1055              MOVE.B  #94,        D0
00001A86  4E4F                    1056              TRAP    #15
00001A88                          1057              
00001A88  6100 0004               1058              BSR EXIT
00001A8C                          1059      ENDI
00001A8C  4E75                    1060      RTS                             ; Return to subroutine   
00001A8E                          1061  *-----------------------------------------------------------
00001A8E                          1062  * Subroutine    : EXIT
00001A8E                          1063  * Description   : Exit message and End Game
00001A8E                          1064  *-----------------------------------------------------------
00001A8E                          1065  EXIT:
00001A8E                          1066      ; Show if Exiting is Running
00001A8E  103C 000B               1067      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001A92  323C 4004               1068      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001A96  4E4F                    1069      TRAP    #15                     ; Trap (Perform action)
00001A98  43F9 00001AFB           1070      LEA     EXIT_MSG,   A1          ; Exit
00001A9E  303C 000D               1071      MOVE    #13,        D0          ; No Line feed
00001AA2  4E4F                    1072      TRAP    #15                     ; Trap (Perform action)
00001AA4  103C 0009               1073      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001AA8  4E4F                    1074      TRAP    #15                     ; Trap (Perform action)
00001AAA  FFFF FFFF               1075      SIMHALT
00001AAE                          1076  
00001AAE                          1077  *-----------------------------------------------------------
00001AAE                          1078  * Section       : Messages
00001AAE                          1079  * Description   : Messages to Print on Console, names should be
00001AAE                          1080  * self documenting
00001AAE                          1081  *-----------------------------------------------------------
00001AAE= 53 63 6F 72 65 20 ...   1082  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001AB7= 4B 65 79 43 6F 64 ...   1083  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00001AC2                          1084  ;---------------------------------------------------------
00001AC2= 55 70 2E 2E 2E 2E 00    1085  UP_MSG          DC.B    'Up....', 0       ; Up Message
00001AC9= 44 6F 77 6E 2E 2E ...   1086  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
00001AD2                          1087  ;-----------------------------------------------------------
00001AD2= 58 3A 00                1088  X_MSG           DC.B    'X:', 0             ; X Position Message
00001AD5= 59 3A 00                1089  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001AD8= 48 65 61 6C 74 68 ...   1090  HEALTH_MSG      DC.B    'Health : ',0       ; Health message
00001AE2= 43 6F 6E 74 72 6F ...   1091  CONTROLS        DC.B    'Controls Up and Down key',0
00001AFB= 45 78 69 74 69 6E ...   1092  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001B07                          1093  *-----------------------------------------------------------
00001B07                          1094  * Section       : Graphic Colors
00001B07                          1095  * Description   : Screen Pixel Color
00001B07                          1096  *-----------------------------------------------------------
00001B07  =00FFFFFF               1097  WHITE           EQU     $00FFFFFF
00001B07  =000000FF               1098  RED             EQU     $000000FF
00001B07  =0000FF00               1099  LIME            EQU     $0000FF00 
00001B07                          1100  *-----------------------------------------------------------
00001B07                          1101  * Section       : Screen Size
00001B07                          1102  * Description   : Screen Width and Height
00001B07                          1103  *-----------------------------------------------------------
00001B08                          1104  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001B0A                          1105  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001B0C                          1106  *-----------------------------------------------------------
00001B0C                          1107  * Section       : Keyboard Input
00001B0C                          1108  * Description   : Used for storing Keypresses
00001B0C                          1109  *-----------------------------------------------------------
00001B0C                          1110  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001B10                          1111  *-----------------------------------------------------------
00001B10                          1112  * Section       : Character Positions
00001B10                          1113  * Description   : Player and Enemy Position Memory Locations
00001B10                          1114  *-----------------------------------------------------------
00001B10                          1115  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001B14                          1116  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001B18                          1117  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001B1C                          1118  HEALTH_VALUE    DS.L    01  ; Reserve Space for Health Value
00001B20                          1119  
00001B20                          1120  ENEMY_X_1       DS.L    01  ; Reserve Space for Enemy X Position
00001B24                          1121  ENEMY_Y_1       DS.L    01  ; Reserve Space for Enemy Y Position
00001B28                          1122  
00001B28                          1123  ENEMY_X_2       DS.L    01  ; Reserve Space for Enemy X Position
00001B2C                          1124  ENEMY_Y_2       DS.L    01  ; Reserve Space for Enemy Y Position
00001B30                          1125  
00001B30                          1126  ENEMY_X_3       DS.L    01  ; Reserve Space for Enemy X Position
00001B34                          1127  ENEMY_Y_3       DS.L    01  ; Reserve Space for Enemy Y Position
00001B38                          1128  
00001B38                          1129  ENEMY_X_4       DS.L    01  ; Reserve Space for Enemy X Position
00001B3C                          1130  ENEMY_Y_4       DS.L    01  ; Reserve Space for Enemy Y Position
00001B40                          1131  
00001B40                          1132  ENEMY_X_5       DS.L    01  ; Reserve Space for Enemy X Position
00001B44                          1133  ENEMY_Y_5       DS.L    01  ; Reserve Space for Enemy Y Position
00001B48                          1134  
00001B48                          1135  ENEMY_X_6       DS.L    01  ; Reserve Space for Enemy X Position
00001B4C                          1136  ENEMY_Y_6       DS.L    01  ; Reserve Space for Enemy Y Position
00001B50                          1137  
00001B50                          1138  ENEMY_X_7       DS.L    01  ; Reserve Space for Enemy X Position
00001B54                          1139  ENEMY_Y_7       DS.L    01  ; Reserve Space for Enemy Y Position
00001B58                          1140  
00001B58                          1141  ENEMY_SPEED_1   DS.L    01  ; Reserve space for Enemy Speed
00001B5C                          1142  ENEMY_SPEED_2   DS.L    01
00001B60                          1143  ENEMY_SPEED_3   DS.L    01
00001B64                          1144  ENEMY_SPEED_4   DS.L    01
00001B68                          1145  ENEMY_SPEED_5   DS.L    01
00001B6C                          1146  ENEMY_SPEED_6   DS.L    01
00001B70                          1147  ENEMY_SPEED_7   DS.L    01
00001B74                          1148  *-----------------------------------------------------------
00001B74                          1149  * Section       : Sounds
00001B74                          1150  * Description   : Sound files, which are then loaded and given
00001B74                          1151  * an address in memory, they take a longtime to process and play
00001B74                          1152  * so keep the files small. Used https://voicemaker.in/ to 
00001B74                          1153  * generate and Audacity to convert MP3 to WAV
00001B74                          1154  *-----------------------------------------------------------
00001B74= 6F 70 70 73 2E 77 ...   1155  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001B7D                          1156  
00001B7D                          1157      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BOTTOM_Y_LINE       156
CHECK_COLLISIONS_1  1756
CHECK_COLLISIONS_2  17BC
CHECK_COLLISIONS_3  1822
CHECK_COLLISIONS_4  1888
CHECK_COLLISIONS_5  18EE
CHECK_COLLISIONS_6  1954
CHECK_COLLISIONS_7  19BA
COLLISION           1A30
COLLISION_CHECK_DONE  1A20
CONTROLS            1AE2
CURRENT_KEY         1B0C
DOWN                1302
DOWNARROW           28
DOWN_MSG            1AC9
DRAW                1404
DRAW_BOTTOM_LINE    145E
DRAW_ENEMY_1        15CE
DRAW_ENEMY_2        1606
DRAW_ENEMY_3        163E
DRAW_ENEMY_4        1676
DRAW_ENEMY_5        16AE
DRAW_ENEMY_6        16E6
DRAW_ENEMY_7        171E
DRAW_PLAYER         1596
DRAW_PLYR_DATA      1482
DRAW_TOP_LINE       1442
ENEMY_SPEED_1       1B58
ENEMY_SPEED_2       1B5C
ENEMY_SPEED_3       1B60
ENEMY_SPEED_4       1B64
ENEMY_SPEED_5       1B68
ENEMY_SPEED_6       1B6C
ENEMY_SPEED_7       1B70
ENEMY_X_1           1B20
ENEMY_X_2           1B28
ENEMY_X_3           1B30
ENEMY_X_4           1B38
ENEMY_X_5           1B40
ENEMY_X_6           1B48
ENEMY_X_7           1B50
ENEMY_Y_1           1B24
ENEMY_Y_2           1B2C
ENEMY_Y_3           1B34
ENEMY_Y_4           1B3C
ENEMY_Y_5           1B44
ENEMY_Y_6           1B4C
ENEMY_Y_7           1B54
ENMY_H_INIT         14
ENMY_W_INIT         14
ESCAPE              1B
EXIT                1A8E
EXIT_MSG            1AFB
GAME                1186
GAMELOOP            1186
HEALTH_MSG          1AD8
HEALTH_VALUE        1B1C
INITIALISE          1000
INPUT               11DC
KEYCODE_MSG         1AB7
LIME                FF00
MOVE_ENEMY_1        1324
MOVE_ENEMY_2        1364
MOVE_ENEMY_3        1334
MOVE_ENEMY_4        1374
MOVE_ENEMY_5        1344
MOVE_ENEMY_6        1384
MOVE_ENEMY_7        1354
OPPS_INDEX          2
OPPS_LOAD           1578
OPPS_WAV            1B74
OUT_OF_BOUNDS_DOWN  1318
OUT_OF_BOUNDS_UP    12F8
PLAYER_SCORE        1B18
PLAYER_X            1B10
PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W  175A
PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W  17C0
PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W  1826
PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W  188C
PLAYER_X_LTE_TO_ENEMY_X_5_PLUS_W  18F2
PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W  1958
PLAYER_X_LTE_TO_ENEMY_X_7_PLUS_W  19BE
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  1774
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  17DA
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  1840
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  18A6
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5  190C
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  1972
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7  19D8
PLAYER_Y            1B14
PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  1788
PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  17EE
PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  1854
PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  18BA
PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H  1920
PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  1986
PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H  19EC
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  17A2
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  1808
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  186E
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  18D4
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5  193A
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  19A0
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7  1A06
PLAY_OPPS           158A
PLYR_H_INIT         14
PLYR_W_INIT         14
POINTS              1
PROCESS_INPUT       11FA
RED                 FF
RESET_ENEMY_POSITION_1  1394
RESET_ENEMY_POSITION_2  13A4
RESET_ENEMY_POSITION_3  13B4
RESET_ENEMY_POSITION_4  13C4
RESET_ENEMY_POSITION_5  13D4
RESET_ENEMY_POSITION_6  13E4
RESET_ENEMY_POSITION_7  13F4
SCORE_MSG           1AAE
SCREEN_H            1B0A
SCREEN_W            1B08
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
TOP_Y_LINE          6C
UP                  12E2
UPARROW             26
UPDATE_1            122C
UPDATE_2            1246
UPDATE_3            1260
UPDATE_4            127A
UPDATE_5            1294
UPDATE_6            12AE
UPDATE_7            12C8
UP_MSG              1AC2
WAIT                11CE
WHITE               FFFFFF
X_MSG               1AD2
Y_MSG               1AD5
_00000000           1A8C
