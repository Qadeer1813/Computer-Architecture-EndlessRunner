00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 07/03/2023 01:02:29

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Qadeer Hussain
00000000                             4  * Date       : 08/03/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  *-----------------------------------------------------------
00001000                            10  * Section       : Trap Codes
00001000                            11  * Description   : Trap Codes used throughout StarterKit 
00001000                            12  *-----------------------------------------------------------
00001000                            13  * Trap CODES
00001000  =00000021                 14  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 15  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            16                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 17  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 18  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 19  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            20      
00001000  =00000009                 21  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            22  
00001000                            23  *-----------------------------------------------------------
00001000                            24  * Section       : Charater Setup
00001000                            25  * Description   : Size of Player and Enemy and properties
00001000                            26  * of these characters e.g Starting Positions and Sizes
00001000                            27  *-----------------------------------------------------------
00001000  =00000014                 28  PLYR_W_INIT EQU         20          ; Players initial Width
00001000  =00000014                 29  PLYR_H_INIT EQU         20          ; Players initial Height
00001000                            30  
00001000  =00000000                 31  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 32  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000                            33  
00001000  =00000001                 34  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            35  
00001000  =00000001                 36  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 37  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            38  
00001000  =00000000                 39  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 40  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 41  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            42  
00001000  =00000014                 43  ENMY_W_INIT EQU         20          ; Enemy initial Width
00001000  =00000014                 44  ENMY_H_INIT EQU         20          ; Enemy initial Height
00001000                            45  
00001000  =00000061                 46  TOP_Y_LINE  EQU         97
00001000  =00000174                 47  BOTTOM_Y_LINE  EQU      372        
00001000                            48  *-----------------------------------------------------------
00001000                            49  * Section       : Game Stats
00001000                            50  * Description   : Points, Health
00001000                            51  *-----------------------------------------------------------
00001000  =00000001                 52  POINTS      EQU         01          ; Points added
00001000                            53  *-----------------------------------------------------------
00001000                            54  * Section       : Keyboard Keys
00001000                            55  * Description   : Spacebar and Escape or two functioning keys
00001000                            56  * Spacebar to JUMP and Escape to Exit Game
00001000                            57  *-----------------------------------------------------------
00001000  =0000001B                 58  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            59  ;------------------------------------------------------------  
00001000  =00000026                 60  UPARROW     EQU         $26         ; Right key ASCII Keycode
00001000  =00000028                 61  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode 
00001000                            62  ;------------------------------------------------------------    
00001000                            63  *-----------------------------------------------------------
00001000                            64  * Subroutine    : Initialise
00001000                            65  * Description   : Initialise game data into memory such as 
00001000                            66  * sounds and screen size
00001000                            67  *-----------------------------------------------------------
00001000                            68  INITIALISE:
00001000                            69      ; Initialise Sounds
00001000  6100 04E2                 70      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
00001004                            71  
00001004                            72      ; Screen Size
00001004  103C 0021                 73      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001008  7200                      74      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
0000100A  4E4F                      75      TRAP    #15                     ; interpret D0 and D1 for screen size
0000100C  33C1 00001A0A             76      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001012  4841                      77      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001014  33C1 00001A08             78      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
0000101A                            79  
0000101A                            80      ; Place the Player at the center of the screen
0000101A  4281                      81      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000101C  23FC 00000000 00001A10    82      MOVE.L  #00,         PLAYER_X    ; Players X set to 0 Position
00001026                            83  
00001026  4281                      84      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001028  3239 00001A0A             85      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000102E  323C 00CD                 86      MOVE.W  #205,        D1          ; divide by 2 for center on Y Axis
00001032  23C1 00001A14             87      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001038                            88  
00001038                            89      ; Initialise Player Score
00001038  4281                      90      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000103A  7200                      91      MOVE.L  #00,         D1          ; Init Score
0000103C  23C1 00001A18             92      MOVE.L  D1,         PLAYER_SCORE
00001042                            93      
00001042                            94      ;Initialize Health
00001042  4281                      95      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001044  7264                      96      MOVE.L  #100,       D1          ; Init Score
00001046  23C1 00001A1C             97      MOVE.L  D1,         HEALTH_VALUE
0000104C                            98  
0000104C                            99      ; Initialize Player on Ground
0000104C  23FC 00000001 00001A28   100      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001056                           101  
00001056                           102      ; Initial Position for Enemy 1   
00001056  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001058  3239 00001A08            104      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000105E  23C1 00001A2C            105      MOVE.L  D1,         ENEMY_X_1   ; Enemy X Position
00001064                           106  
00001064  4281                     107      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001066  3239 00001A0A            108      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000106C  323C 0064                109      MOVE.W  #100,        D1          ; divide by 2 for center on Y Axis
00001070  23C1 00001A30            110      MOVE.L  D1,         ENEMY_Y_1   ; Enemy Y Position
00001076                           111  
00001076                           112      ; Initial Position for Enemy 2   
00001076                           113  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001076                           114  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001076                           115  *    MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
00001076                           116  *
00001076                           117  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001076                           118  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001076                           119  *    MOVE.W  #115,        D1          ; divide by 2 for center on Y Axis
00001076                           120  *    MOVE.L  D1,         ENEMY_Y_2   ; Enemy Y Position
00001076                           121  
00001076                           122      ; Initial Position for Enemy 3   
00001076  4281                     123      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001078  3239 00001A08            124      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000107E  23C1 00001A34            125      MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
00001084                           126  
00001084  4281                     127      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001086  3239 00001A0A            128      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000108C  323C 0096                129      MOVE.W  #150,        D1          ; divide by 2 for center on Y Axis
00001090  23C1 00001A38            130      MOVE.L  D1,         ENEMY_Y_2   ; Enemy Y Position
00001096                           131      
00001096                           132      ; Initial Position for Enemy 4   
00001096                           133  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001096                           134  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001096                           135  *    MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
00001096                           136  *
00001096                           137  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001096                           138  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001096                           139  *    MOVE.W  #175,        D1          ; divide by 2 for center on Y Axis
00001096                           140  *    MOVE.L  D1,         ENEMY_Y_4   ; Enemy Y Position
00001096                           141  
00001096                           142      ; Initial Position for Enemy Center(5)
00001096  4281                     143      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001098  3239 00001A08            144      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000109E  23C1 00001A3C            145      MOVE.L  D1,         ENEMY_X_3     ; Enemy X Position
000010A4                           146      
000010A4  4281                     147      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010A6  3239 00001A0A            148      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010AC  323C 00C8                149      MOVE.W  #200,        D1          ; divide by 2 for center on Y Axis
000010B0  23C1 00001A40            150      MOVE.L  D1,         ENEMY_Y_3   ; Enemy Y Position
000010B6                           151      
000010B6                           152      ; Initial Position for Enemy 6   
000010B6                           153  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010B6                           154  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010B6                           155  *    MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
000010B6                           156  *
000010B6                           157  *    CLR.L   D2                      ; Clear contents of D1 (XOR is faster)
000010B6                           158  *    MOVE.W  SCREEN_H,   D2          ; Place Screen width in D1
000010B6                           159  *    MOVE.W  #235,       D2          ; divide by 2 for center on Y Axis
000010B6                           160  *    MOVE.L  D2,         ENEMY_Y_6   ; Enemy Y Position
000010B6                           161      
000010B6                           162      ; Initial Position for Enemy 7   
000010B6  4281                     163      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010B8  3239 00001A08            164      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010BE  23C1 00001A44            165      MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
000010C4                           166  
000010C4  4281                     167      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C6  3239 00001A0A            168      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010CC  323C 00FA                169      MOVE.W  #250,        D1          ; divide by 2 for center on Y Axis
000010D0  23C1 00001A48            170      MOVE.L  D1,         ENEMY_Y_4   ; Enemy Y Position
000010D6                           171  
000010D6                           172      ; Initial Position for Enemy 8   
000010D6                           173  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010D6                           174  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010D6                           175  *    MOVE.L  D1,         ENEMY_X_8   ; Enemy X Position
000010D6                           176  *
000010D6                           177  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010D6                           178  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010D6                           179  *    MOVE.W  #295,        D1          ; divide by 2 for center on Y Axis
000010D6                           180  *    MOVE.L  D1,         ENEMY_Y_8   ; Enemy Y Position
000010D6                           181  
000010D6                           182      ; Initial Position for Enemy 9   
000010D6  4281                     183      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010D8  3239 00001A08            184      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010DE  23C1 00001A4C            185      MOVE.L  D1,         ENEMY_X_5   ; Enemy X Position
000010E4                           186  
000010E4  4281                     187      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E6  3239 00001A0A            188      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010EC  323C 012C                189      MOVE.W  #300,        D1          ; divide by 2 for center on Y Axis
000010F0  23C1 00001A50            190      MOVE.L  D1,         ENEMY_Y_5   ; Enemy Y Position
000010F6                           191  
000010F6                           192      ; Initial Position for Enemy 10   
000010F6                           193  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010F6                           194  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010F6                           195  *    MOVE.L  D1,         ENEMY_X10   ; Enemy X Position
000010F6                           196  *
000010F6                           197  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010F6                           198  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010F6                           199  *    MOVE.W  #355,        D1          ; divide by 2 for center on Y Axis
000010F6                           200  *    MOVE.L  D1,         ENEMY_Y10   ; Enemy Y Position
000010F6                           201      
000010F6                           202      ; Initial Position for Enemy 10 
000010F6  4281                     203      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010F8  3239 00001A08            204      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010FE  23C1 00001A54            205      MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
00001104                           206  
00001104  4281                     207      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001106  3239 00001A0A            208      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000110C  323C 015E                209      MOVE.W  #350,        D1          ; divide by 2 for center on Y Axis
00001110  23C1 00001A58            210      MOVE.L  D1,         ENEMY_Y_6   ; Enemy Y Position
00001116                           211          
00001116                           212      ; Enable the screen back buffer(see easy 68k help)
00001116  103C 005C                213      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
0000111A  123C 0011                214      MOVE.B  #17,        D1          ; Combine Tasks
0000111E  4E4F                     215      TRAP    #15                     ; Trap (Perform action)
00001120                           216  
00001120                           217      ; Clear the screen (see easy 68k help)
00001120  103C 000B                218      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001124  323C FF00                219      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001128  4E4F                     220      TRAP    #15                     ; Trap (Perform action)
0000112A                           221  
0000112A                           222  *-----------------------------------------------------------
0000112A                           223  * Subroutine    : Game
0000112A                           224  * Description   : Game including main GameLoop. GameLoop is like
0000112A                           225  * a while loop in that it runs forever until interupted
0000112A                           226  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
0000112A                           227  *-----------------------------------------------------------
0000112A                           228  GAME:
0000112A                           229  
0000112A                           230  GAMELOOP:
0000112A  7008                     231      MOVEQ   #08,D0                   ; Get time in 1/100 seconds
0000112C  4E4F                     232      TRAP    #15
0000112E                           233  
0000112E  2F01                     234      MOVE.L  D1,-(SP)                ; Push time on the stack
00001130                           235      
00001130                           236      ; Main Gameloop
00001130  6100 0046                237      BSR     INPUT                   ; Check Keyboard Input
00001134  6100 0092                238      BSR     UPDATE_1
00001138  6100 00A8                239      BSR     UPDATE_2
0000113C  6100 00BE                240      BSR     UPDATE_3
00001140  6100 00D4                241      BSR     UPDATE_4
00001144  6100 00EA                242      BSR     UPDATE_5                  ; Update positions and points(5)
00001148  6100 0100                243      BSR     UPDATE_6
0000114C                           244  *    BSR     UPDATE_7
0000114C                           245  *    BSR     UPDATE_8
0000114C                           246  *    BSR     UPDATE_9
0000114C                           247  *    BSR     UPDATE_10
0000114C  6100 053C                248      BSR     CHECK_COLLISIONS_1
00001150  6100 05AE                249      BSR     CHECK_COLLISIONS_2
00001154  6100 0620                250      BSR     CHECK_COLLISIONS_3
00001158  6100 0692                251      BSR     CHECK_COLLISIONS_4
0000115C  6100 0704                252      BSR     CHECK_COLLISIONS_5        ; Check for Collisions(5)
00001160  6100 0776                253      BSR     CHECK_COLLISIONS_6
00001164                           254  *    BSR     CHECK_COLLISIONS_7 
00001164                           255  *    BSR     CHECK_COLLISIONS_8
00001164                           256  *    BSR     CHECK_COLLISIONS_9
00001164                           257  *    BSR     CHECK_COLLISIONS_10
00001164  6100 01D0                258      BSR     DRAW                    ; Draw the Scene
00001168                           259      
00001168  2E1F                     260      MOVE.L  (SP)+,D7
0000116A                           261  WAIT:
0000116A  7008                     262      MOVEQ   #8,D0                   ; Get time in 1/100 ths seconds
0000116C  4E4F                     263      TRAP    #15
0000116E  9287                     264      SUB.L   D7,D1                   ; Subtract previous time from current time
00001170  B23C 0002                265      CMP.B   #02,D1                  ; Compare with 9/100ths adding the wait allowed the character and enemy to slow down to the same pace 
00001174                           266                                      ;but i also changed the speed of the enenemy  so the enemy is slightly faster than character
00001174  6BF4                     267      BMI.S   WAIT                    ; Loop if time not up yet
00001176                           268  
00001176  60B2                     269      BRA     GAMELOOP                ; Loop back to Game loop
00001178                           270      
00001178                           271  
00001178                           272  *-----------------------------------------------------------
00001178                           273  * Subroutine    : Input
00001178                           274  * Description   : Process Keyboard Input
00001178                           275  *-----------------------------------------------------------
00001178                           276  INPUT:
00001178                           277      ; Process Input
00001178  4281                     278      CLR.L   D1                      ; Clear Data Register
0000117A  103C 0013                279      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000117E  4E4F                     280      TRAP    #15                     ; Trap (Perform action)
00001180  1401                     281      MOVE.B  D1,         D2          ; Move last key D1 to D2
00001182  B43C 0000                282      CMP.B   #00,        D2          ; Key is pressed
00001186  6700 000E                283      BEQ     PROCESS_INPUT           ; Process Key
0000118A  4E4F                     284      TRAP    #15                     ; Trap for Last Key
0000118C                           285      ; Check if key still pressed
0000118C  B23C 00FF                286      CMP.B   #$FF,       D1          ; Is it still pressed
00001190  6700 0004                287      BEQ     PROCESS_INPUT           ; Process Last Key
00001194  4E75                     288      RTS                             ; Return to subroutine
00001196                           289  
00001196                           290  *-----------------------------------------------------------
00001196                           291  * Subroutine    : Process Input
00001196                           292  * Description   : Branch based on keys pressed
00001196                           293  *-----------------------------------------------------------
00001196                           294  PROCESS_INPUT:
00001196  23C2 00001A0C            295      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
0000119C  0CB9 0000001B 00001A0C   296      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000011A6  6700 0800                297      BEQ     EXIT                    ; Exit if Escape
000011AA                           298      ;--------------------------------------------------
000011AA  0CB9 00000026 00001A0C   299      CMP.L   #UPARROW,  CURRENT_KEY  ; Is Current Key UP
000011B4  6700 00AE                300      BEQ     UP                      ; Up
000011B8  0CB9 00000028 00001A0C   301      CMP.L   #DOWNARROW,CURRENT_KEY  ; Is Current Key Down
000011C2  6700 00C0                302      BEQ     DOWN                    ; Down
000011C6                           303      ;--------------------------------------------------
000011C6  4E75                     304      RTS                             ; Return to subroutine
000011C8                           305  
000011C8                           306  *-----------------------------------------------------------
000011C8                           307  * Subroutine    : Update
000011C8                           308  * Description   : Main update loop update Player and Enemies
000011C8                           309  *-----------------------------------------------------------  
000011C8                           310  UPDATE_1:
000011C8                           311      ; Move the Enemy
000011C8  4281                     312      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011CA  4281                     313      CLR.L   D1                      ; Clear the contents of D0
000011CC  2239 00001A2C            314      MOVE.L  ENEMY_X_1,  D1          ; Move the Enemy X Position to D0
000011D2  B2BC 00000000            315      CMP.L   #00,        D1
000011D8  6F00 00FC                316      BLE     RESET_ENEMY_POSITION_1  ; Reset Enemy if off Screen
000011DC  6000 00C8                317      BRA     MOVE_ENEMY_1
000011E0  4E75                     318      RTS        
000011E2                           319  
000011E2                           320  UPDATE_2:
000011E2                           321      ; Move the Enemy
000011E2  4281                     322      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011E4  4281                     323      CLR.L   D1                      ; Clear the contents of D0
000011E6  2239 00001A34            324      MOVE.L  ENEMY_X_2,  D1          ; Move the Enemy X Position to D0
000011EC  B2BC 00000000            325      CMP.L   #00,        D1
000011F2  6F00 00F2                326      BLE     RESET_ENEMY_POSITION_2  ; Reset Enemy if off Screen
000011F6  6000 00C6                327      BRA     MOVE_ENEMY_2
000011FA  4E75                     328      RTS   
000011FC                           329      
000011FC                           330  UPDATE_3:
000011FC                           331      ; Move the Enemy
000011FC  4281                     332      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011FE  4281                     333      CLR.L   D1                      ; Clear the contents of D0
00001200  2239 00001A3C            334      MOVE.L  ENEMY_X_3,  D1          ; Move the Enemy X Position to D0
00001206  B2BC 00000000            335      CMP.L   #00,        D1
0000120C  6F00 00E8                336      BLE     RESET_ENEMY_POSITION_3  ; Reset Enemy if off Screen
00001210  6000 009C                337      BRA     MOVE_ENEMY_3
00001214  4E75                     338      RTS   
00001216                           339  
00001216                           340  UPDATE_4:
00001216                           341      ; Move the Enemy
00001216  4281                     342      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001218  4281                     343      CLR.L   D1                      ; Clear the contents of D0
0000121A  2239 00001A44            344      MOVE.L  ENEMY_X_4,  D1          ; Move the Enemy X Position to D0
00001220  B2BC 00000000            345      CMP.L   #00,        D1
00001226  6F00 00DE                346      BLE     RESET_ENEMY_POSITION_4  ; Reset Enemy if off Screen
0000122A  6000 009A                347      BRA     MOVE_ENEMY_4
0000122E  4E75                     348      RTS   
00001230                           349  
00001230                           350  UPDATE_5:
00001230                           351      ; Move the Enemy
00001230  4281                     352      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001232  4281                     353      CLR.L   D1                      ; Clear the contents of D0
00001234  2239 00001A4C            354      MOVE.L  ENEMY_X_5,    D1          ; Move the Enemy X Position to D0
0000123A  B2BC 00000000            355      CMP.L   #00,        D1
00001240  6F00 00D4                356      BLE     RESET_ENEMY_POSITION_5    ; Reset Enemy if off Screen
00001244  6000 0070                357      BRA     MOVE_ENEMY_5              ; Move the Enemy
00001248  4E75                     358      RTS                             ; Return to subroutine
0000124A                           359      
0000124A                           360  UPDATE_6:
0000124A                           361      ; Move the Enemy
0000124A  4281                     362      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000124C  4281                     363      CLR.L   D1                      ; Clear the contents of D0
0000124E  2239 00001A54            364      MOVE.L  ENEMY_X_6,  D1          ; Move the Enemy X Position to D0
00001254  B2BC 00000000            365      CMP.L   #00,        D1
0000125A  6F00 00CA                366      BLE     RESET_ENEMY_POSITION_6  ; Reset Enemy if off Screen
0000125E  6000 006E                367      BRA     MOVE_ENEMY_6
00001262  4E75                     368      RTS 
00001264                           369  
00001264                           370  *UPDATE_7:
00001264                           371  *    ; Move the Enemy
00001264                           372  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001264                           373  *    CLR.L   D1                      ; Clear the contents of D0
00001264                           374  *    MOVE.L  ENEMY_X_7,  D1          ; Move the Enemy X Position to D0
00001264                           375  *    CMP.L   #00,        D1
00001264                           376  *    BLE     RESET_ENEMY_POSITION_7  ; Reset Enemy if off Screen
00001264                           377  *    BRA     MOVE_ENEMY_7
00001264                           378  *    RTS   
00001264                           379  *    
00001264                           380  *UPDATE_8:
00001264                           381  *    ; Move the Enemy
00001264                           382  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001264                           383  *    CLR.L   D1                      ; Clear the contents of D0
00001264                           384  *    MOVE.L  ENEMY_X_8,  D1          ; Move the Enemy X Position to D0
00001264                           385  *    CMP.L   #00,        D1
00001264                           386  *    BLE     RESET_ENEMY_POSITION_8  ; Reset Enemy if off Screen
00001264                           387  *    BRA     MOVE_ENEMY_8
00001264                           388  *    RTS  
00001264                           389  *    
00001264                           390  *UPDATE_9:
00001264                           391  *    ; Move the Enemy
00001264                           392  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001264                           393  *    CLR.L   D1                      ; Clear the contents of D0
00001264                           394  *    MOVE.L  ENEMY_X_9,  D1          ; Move the Enemy X Position to D0
00001264                           395  *    CMP.L   #00,        D1
00001264                           396  *    BLE     RESET_ENEMY_POSITION_9  ; Reset Enemy if off Screen
00001264                           397  *    BRA     MOVE_ENEMY_9
00001264                           398  *    RTS  
00001264                           399  *    
00001264                           400  *UPDATE_10:
00001264                           401  *    ; Move the Enemy
00001264                           402  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001264                           403  *    CLR.L   D1                      ; Clear the contents of D0
00001264                           404  *    MOVE.L  ENEMY_X10,  D1          ; Move the Enemy X Position to D0
00001264                           405  *    CMP.L   #00,        D1
00001264                           406  *    BLE     RESET_ENEMY_POSITION_10  ; Reset Enemy if off Screen
00001264                           407  *    BRA     MOVE_ENEMY_10
00001264                           408  *    RTS  
00001264                           409  *-----------------------------------------------------------
00001264                           410  * Subroutine    : UP
00001264                           411  * Description   : Move the enemy up 2 frames
00001264                           412  * By: Qadeer Hussain
00001264                           413  *-----------------------------------------------------------
00001264                           414  UP:  
00001264  57B9 00001A14            415      SUB.L   #3, PLAYER_Y
0000126A                           416      ; Check if player is out of bounds
0000126A  0CB9 00000064 00001A14   417      CMP.L   #100, PLAYER_Y     ; check if player is above top of screen
00001274  6D00 0004                418      BLT     OUT_OF_BOUNDS_UP
00001278  4E75                     419      RTS
0000127A                           420      
0000127A                           421  OUT_OF_BOUNDS_UP:
0000127A                           422      ; Player is out of bounds, move back into screen
0000127A  7403                     423      MOVE.L  #3, D2   ; set D2 to the amount to move
0000127C  D5B9 00001A14            424      ADD.L   D2, PLAYER_Y  ; move player down
00001282  4E75                     425      RTS
00001284                           426  *-----------------------------------------------------------
00001284                           427  * Subroutine    : DOWN
00001284                           428  * Description   : Move the enemy down 2 frames
00001284                           429  * By: Qadeer Hussain
00001284                           430  *-----------------------------------------------------------
00001284                           431  DOWN:
00001284  56B9 00001A14            432      ADD.L   #3, PLAYER_Y 
0000128A                           433      ; Check if player is out of bounds
0000128A  0CB9 0000015D 00001A14   434      CMP.L   #349, PLAYER_Y  ; check if player is below bottom of screen
00001294  6C00 0004                435      BGE     OUT_OF_BOUNDS_DOWN
00001298  4E75                     436      RTS    
0000129A                           437  
0000129A                           438  OUT_OF_BOUNDS_DOWN:
0000129A                           439      ; Player is out of bounds, move back into screen
0000129A  7403                     440      MOVE.L  #3, D2   ; set D2 to the amount to move
0000129C  4482                     441      NEG.L   D2      ; negate D2 to move upwards
0000129E  D5B9 00001A14            442      ADD.L   D2, PLAYER_Y  ; move player up
000012A4  4E75                     443      RTS
000012A6                           444  *-----------------------------------------------------------
000012A6                           445  * Subroutine    : Move Enemy
000012A6                           446  * Description   : Move Enemy Right to Left
000012A6                           447  *-----------------------------------------------------------
000012A6                           448  MOVE_ENEMY_1:
000012A6  5BB9 00001A2C            449       SUB.L   #05,   ENEMY_X_1   ; Move enemy by X Value
000012AC  4E75                     450       RTS
000012AE                           451       
000012AE                           452  MOVE_ENEMY_3:
000012AE  5BB9 00001A3C            453       SUB.L   #05,   ENEMY_X_3   ; Move enemy by X Value
000012B4  4E75                     454       RTS
000012B6                           455  
000012B6                           456  MOVE_ENEMY_5:
000012B6  5BB9 00001A4C            457      SUB.L    #05,   ENEMY_X_5   ; Move enemy(5) by X Value
000012BC  4E75                     458      RTS
000012BE                           459      
000012BE                           460  *MOVE_ENEMY_7:
000012BE                           461  *    SUB.L    #05,   ENEMY_X_7   ; Move enemy(5) by X Value
000012BE                           462  *    RTS
000012BE                           463  *     
000012BE                           464  *MOVE_ENEMY_9:
000012BE                           465  *     SUB.L   #05,   ENEMY_X_9   ; Move enemy by X Value
000012BE                           466  *     RTS  
000012BE                           467       
000012BE                           468  MOVE_ENEMY_2:
000012BE  59B9 00001A34            469       SUB.L   #04,   ENEMY_X_2   ; Move enemy by X Value
000012C4  4E75                     470       RTS
000012C6                           471       
000012C6                           472  MOVE_ENEMY_4:
000012C6  59B9 00001A44            473       SUB.L   #04,   ENEMY_X_4   ; Move enemy by X Value
000012CC  4E75                     474       RTS
000012CE                           475      
000012CE                           476  MOVE_ENEMY_6:
000012CE  59B9 00001A54            477       SUB.L   #04,   ENEMY_X_6   ; Move enemy by X Value
000012D4  4E75                     478       RTS  
000012D6                           479       
000012D6                           480  *MOVE_ENEMY_8:
000012D6                           481  *     SUB.L   #04,   ENEMY_X_8   ; Move enemy by X Value
000012D6                           482  *     RTS  
000012D6                           483  *     
000012D6                           484  *MOVE_ENEMY_10:
000012D6                           485  *     SUB.L   #04,   ENEMY_X10   ; Move enemy by X Value
000012D6                           486  *     RTS  
000012D6                           487  *-----------------------------------------------------------
000012D6                           488  * Subroutine    : Reset Enemy
000012D6                           489  * Description   : Reset Enemy if to passes 0 to Right of Screen
000012D6                           490  *-----------------------------------------------------------    
000012D6                           491  RESET_ENEMY_POSITION_1:
000012D6  4281                     492      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012D8  3239 00001A08            493      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012DE  23C1 00001A2C            494      MOVE.L  D1,         ENEMY_X_1     ; Enemy X Position
000012E4  4E75                     495      RTS
000012E6                           496  RESET_ENEMY_POSITION_2:
000012E6  4281                     497      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012E8  3239 00001A08            498      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012EE  23C1 00001A34            499      MOVE.L  D1,         ENEMY_X_2     ; Enemy X Position
000012F4  4E75                     500      RTS
000012F6                           501      
000012F6                           502  RESET_ENEMY_POSITION_3:
000012F6  4281                     503      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012F8  3239 00001A08            504      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012FE  23C1 00001A3C            505      MOVE.L  D1,         ENEMY_X_3     ; Enemy X Position
00001304  4E75                     506      RTS
00001306                           507      
00001306                           508  RESET_ENEMY_POSITION_4:
00001306  4281                     509      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001308  3239 00001A08            510      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000130E  23C1 00001A44            511      MOVE.L  D1,         ENEMY_X_4     ; Enemy X Position
00001314  4E75                     512      RTS
00001316                           513      
00001316                           514  RESET_ENEMY_POSITION_5:
00001316  4281                     515      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001318  3239 00001A08            516      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000131E  23C1 00001A4C            517      MOVE.L  D1,         ENEMY_X_5     ; Enemy X Position
00001324  4E75                     518      RTS
00001326                           519      
00001326                           520  RESET_ENEMY_POSITION_6:
00001326  4281                     521      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001328  3239 00001A08            522      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000132E  23C1 00001A54            523      MOVE.L  D1,         ENEMY_X_6     ; Enemy X Position
00001334  4E75                     524      RTS
00001336                           525      
00001336                           526  *RESET_ENEMY_POSITION_7:
00001336                           527  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001336                           528  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001336                           529  *    MOVE.L  D1,         ENEMY_X_7     ; Enemy X Position
00001336                           530  *    RTS
00001336                           531  *    
00001336                           532  *RESET_ENEMY_POSITION_8:
00001336                           533  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001336                           534  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001336                           535  *    MOVE.L  D1,         ENEMY_X_8     ; Enemy X Position
00001336                           536  *    RTS
00001336                           537  *    
00001336                           538  *RESET_ENEMY_POSITION_9:
00001336                           539  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001336                           540  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001336                           541  *    MOVE.L  D1,         ENEMY_X_9     ; Enemy X Position
00001336                           542  *    RTS
00001336                           543  *    
00001336                           544  *RESET_ENEMY_POSITION_10:
00001336                           545  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001336                           546  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001336                           547  *    MOVE.L  D1,         ENEMY_X10     ; Enemy X Position
00001336                           548  *    RTS
00001336                           549  *-----------------------------------------------------------
00001336                           550  * Subroutine    : Draw
00001336                           551  * Description   : Draw Screen
00001336                           552  *-----------------------------------------------------------
00001336                           553  DRAW: 
00001336                           554      ; Enable back buffer
00001336  103C 005E                555      MOVE.B  #94,        D0
0000133A  4E4F                     556      TRAP    #15
0000133C                           557  
0000133C                           558      ; Clear the screen
0000133C  103C 000B                559      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001340  323C FF00                560      MOVE.W  #$FF00,     D1          ; Clear contents
00001344  4E4F                     561      TRAP    #15                     ; Trap (Perform action)
00001346                           562  
00001346  6100 0068                563      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000134A  6100 01B6                564      BSR     DRAW_PLAYER             ; Draw Player
0000134E  6100 0302                565      BSR     DRAW_ENEMY_6
00001352                           566  *    BSR     DRAW_ENEMY_7
00001352                           567  *    BSR     DRAW_ENEMY_8
00001352                           568  *    BSR     DRAW_ENEMY_9
00001352                           569  *    BSR     DRAW_ENEMY_10
00001352  6100 01E6                570      BSR     DRAW_ENEMY_1            ; Draw Enemey No.1
00001356  6100 021A                571      BSR     DRAW_ENEMY_2
0000135A  6100 024E                572      BSR     DRAW_ENEMY_3
0000135E  6100 0282                573      BSR     DRAW_ENEMY_4
00001362  6100 02B6                574      BSR     DRAW_ENEMY_5              ; Draw Enemy No.5
00001366  6100 0024                575      BSR     DRAW_BOTTOM_LINE
0000136A  6100 0004                576      BSR     DRAW_TOP_LINE
0000136E                           577      
0000136E  4E75                     578      RTS                             ; Return to subroutine
00001370                           579  DRAW_TOP_LINE:
00001370                           580      
00001370  223C 0000FF00            581      MOVE.L  #LIME,       D1          ; Set Background color
00001376  7050                     582      MOVE.L  #80,        D0
00001378  4E4F                     583      TRAP    #15
0000137A                           584      
0000137A  4281                     585      CLR.L   D1
0000137C  7461                     586      MOVE.L  #TOP_Y_LINE,D2
0000137E  3639 00001A08            587      MOVE.W  SCREEN_W,  D3
00001384  7861                     588      MOVE.L  #TOP_Y_LINE,D4
00001386                           589      
00001386  7054                     590      MOVE.L  #84,       D0
00001388  4E4F                     591      TRAP    #15
0000138A                           592      
0000138A  4E75                     593      RTS
0000138C                           594  DRAW_BOTTOM_LINE:
0000138C                           595      
0000138C  223C 0000FF00            596      MOVE.L  #LIME,       D1          ; Set Background color
00001392  7050                     597      MOVE.L  #80,        D0
00001394  4E4F                     598      TRAP    #15
00001396                           599      
00001396  4281                     600      CLR.L   D1
00001398  243C 00000174            601      MOVE.L  #BOTTOM_Y_LINE,D2
0000139E  3639 00001A08            602      MOVE.W  SCREEN_W,  D3
000013A4  283C 00000174            603      MOVE.L  #BOTTOM_Y_LINE,D4
000013AA                           604      
000013AA  7054                     605      MOVE.L  #84,       D0
000013AC  4E4F                     606      TRAP    #15
000013AE                           607      
000013AE  4E75                     608      RTS    
000013B0                           609  *-----------------------------------------------------------
000013B0                           610  * Subroutine    : Draw Player Data
000013B0                           611  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000013B0                           612  *-----------------------------------------------------------
000013B0                           613  DRAW_PLYR_DATA:
000013B0  4281                     614      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013B2                           615  
000013B2                           616      ; Player Score Message
000013B2  103C 000B                617      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013B6  323C 0201                618      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000013BA  4E4F                     619      TRAP    #15                     ; Trap (Perform action)
000013BC  43F9 000019C8            620      LEA     SCORE_MSG,  A1          ; Score Message
000013C2  303C 000D                621      MOVE    #13,        D0          ; No Line feed
000013C6  4E4F                     622      TRAP    #15                     ; Trap (Perform action)
000013C8                           623  
000013C8                           624      ; Player Score Value
000013C8  103C 000B                625      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013CC  323C 0901                626      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000013D0  4E4F                     627      TRAP    #15                     ; Trap (Perform action)
000013D2  103C 0003                628      MOVE.B  #03,        D0          ; Display number at D1.L
000013D6  2239 00001A18            629      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000013DC  4E4F                     630      TRAP    #15                     ; Trap (Perform action)
000013DE                           631      
000013DE                           632      ; Health Message
000013DE  103C 000B                633      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013E2  323C 0203                634      MOVE.W  #$0203,     D1          ; Col 02, Row 03
000013E6  4E4F                     635      TRAP    #15                     ; Trap (Perform action)
000013E8  43F9 000019F2            636      LEA     HEALTH_MSG,   A1          ; Health Message
000013EE  303C 000D                637      MOVE    #13,        D0          ; No Line feed
000013F2  4E4F                     638      TRAP    #15                     ; Trap (Perform action)
000013F4                           639      
000013F4                           640      ; Health Value
000013F4  103C 000B                641      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013F8  323C 0903                642      MOVE.W  #$0903,     D1          ; Col 09, Row 03
000013FC  4E4F                     643      TRAP    #15                     ; Trap (Perform action)
000013FE  103C 0003                644      MOVE.B  #03,        D0          ; Display number at D1.L
00001402  2239 00001A1C            645      MOVE.L  HEALTH_VALUE,  D1          ; Move Score to D1.L
00001408  4E4F                     646      TRAP    #15                     ; Trap (Perform action)
0000140A                           647      
0000140A                           648      ; Player X Message
0000140A  103C 000B                649      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000140E  323C 0202                650      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001412  4E4F                     651      TRAP    #15                     ; Trap (Perform action)
00001414  43F9 000019EC            652      LEA     X_MSG,      A1          ; X Message
0000141A  303C 000D                653      MOVE    #13,        D0          ; No Line feed
0000141E  4E4F                     654      TRAP    #15                     ; Trap (Perform action)
00001420                           655      
00001420                           656      ; Player X
00001420  103C 000B                657      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001424  323C 0502                658      MOVE.W  #$0502,     D1          ; Col 05, Row 02
00001428  4E4F                     659      TRAP    #15                     ; Trap (Perform action)
0000142A  103C 0003                660      MOVE.B  #03,        D0          ; Display number at D1.L
0000142E  2239 00001A10            661      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001434  4E4F                     662      TRAP    #15                     ; Trap (Perform action)
00001436                           663      
00001436                           664      ; Player Y Message
00001436  103C 000B                665      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000143A  323C 1002                666      MOVE.W  #$1002,     D1          ; Col 10, Row 02
0000143E  4E4F                     667      TRAP    #15                     ; Trap (Perform action)
00001440  43F9 000019EF            668      LEA     Y_MSG,      A1          ; Y Message
00001446  303C 000D                669      MOVE    #13,        D0          ; No Line feed
0000144A  4E4F                     670      TRAP    #15                     ; Trap (Perform action)
0000144C                           671      
0000144C                           672      ; Player Y
0000144C  103C 000B                673      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001450  323C 1202                674      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00001454  4E4F                     675      TRAP    #15                     ; Trap (Perform action)
00001456  103C 0003                676      MOVE.B  #03,        D0          ; Display number at D1.L
0000145A  2239 00001A14            677      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
00001460  4E4F                     678      TRAP    #15                     ; Trap (Perform action) 
00001462                           679      
00001462                           680      ; Show Keys Pressed
00001462  103C 000B                681      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001466  323C 2001                682      MOVE.W  #$2001,     D1          ; Col 20, Row 1
0000146A  4E4F                     683      TRAP    #15                     ; Trap (Perform action)
0000146C  43F9 000019D1            684      LEA     KEYCODE_MSG, A1         ; Keycode
00001472  303C 000D                685      MOVE    #13,        D0          ; No Line feed
00001476  4E4F                     686      TRAP    #15                     ; Trap (Perform action)
00001478                           687  
00001478                           688      ; Show KeyCode
00001478  103C 000B                689      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000147C  323C 3001                690      MOVE.W  #$3001,     D1          ; Col 30, Row 1
00001480  4E4F                     691      TRAP    #15                     ; Trap (Perform action)    
00001482  2239 00001A0C            692      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00001488  103C 0003                693      MOVE.B  #03,        D0          ; Display the contents of D1
0000148C  4E4F                     694      TRAP    #15                     ; Trap (Perform action)
0000148E                           695  
0000148E  4E75                     696      RTS  
00001490                           697  *-----------------------------------------------------------
00001490                           698  * Subroutine    : Player is on Ground
00001490                           699  * Description   : Check if the Player is on or off Ground
00001490                           700  *-----------------------------------------------------------
00001490                           701  IS_PLAYER_ON_GND:
00001490                           702      ; Check if Player is on Ground
00001490  4281                     703      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001492  4282                     704      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001494  3239 00001A0A            705      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000149A  82FC 0002                706      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000149E  2439 00001A14            707      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
000014A4  B441                     708      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
000014A6  6C00 0008                709      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
000014AA  6D00 002C                710      BLT     SET_OFF_GROUND          ; The Player is off the Ground
000014AE  4E75                     711      RTS                             ; Return to subroutine
000014B0                           712      
000014B0                           713  *-----------------------------------------------------------
000014B0                           714  * Subroutine    : On Ground
000014B0                           715  * Description   : Set the Player On Ground
000014B0                           716  *-----------------------------------------------------------
000014B0                           717  SET_ON_GROUND:
000014B0  4281                     718      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000014B2  3239 00001A0A            719      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000014B8  82FC 0002                720      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000014BC  23C1 00001A14            721      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
000014C2  4281                     722      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000014C4  7200                     723      MOVE.L  #00,        D1          ; Player Velocity
000014C6  23C1 00001A20            724      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
000014CC  23FC 00000001 00001A28   725      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
000014D6  4E75                     726      RTS
000014D8                           727  
000014D8                           728  *-----------------------------------------------------------
000014D8                           729  * Subroutine    : Off Ground
000014D8                           730  * Description   : Set the Player Off Ground
000014D8                           731  *-----------------------------------------------------------
000014D8                           732  SET_OFF_GROUND:
000014D8  23FC 00000000 00001A28   733      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000014E2  4E75                     734      RTS                             ; Return to subroutine
000014E4                           735  *-----------------------------------------------------------
000014E4                           736  * Subroutines   : Sound Load and Play
000014E4                           737  * Description   : Initialise game sounds into memory 
000014E4                           738  * Current Sounds are RUN, JUMP and Opps for Collision
000014E4                           739  *-----------------------------------------------------------
000014E4                           740  OPPS_LOAD:
000014E4  43F9 00001A7C            741      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000014EA  323C 0002                742      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000014EE  303C 0047                743      MOVE    #71,        D0          ; Load into memory
000014F2  4E4F                     744      TRAP    #15                     ; Trap (Perform action)
000014F4  4E75                     745      RTS                             ; Return to subroutine
000014F6                           746  
000014F6                           747  PLAY_OPPS:
000014F6  323C 0002                748      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000014FA  303C 0048                749      MOVE    #72,        D0          ; Play Sound
000014FE  4E4F                     750      TRAP    #15                     ; Trap (Perform action)
00001500  4E75                     751      RTS                             ; Return to subroutine
00001502                           752  *-----------------------------------------------------------
00001502                           753  * Subroutine    : Draw Player
00001502                           754  * Description   : Draw Player Square
00001502                           755  *-----------------------------------------------------------
00001502                           756  DRAW_PLAYER:
00001502                           757      ; Set Pixel Colors
00001502  223C 00FFFFFF            758      MOVE.L  #WHITE,     D1          ; Set Background color
00001508  103C 0050                759      MOVE.B  #80,        D0          ; Task for Background Color
0000150C  4E4F                     760      TRAP    #15                     ; Trap (Perform action)
0000150E                           761  
0000150E                           762      ; Set X, Y, Width and Height
0000150E  2239 00001A10            763      MOVE.L  PLAYER_X,   D1          ; X
00001514  2439 00001A14            764      MOVE.L  PLAYER_Y,   D2          ; Y
0000151A  2639 00001A10            765      MOVE.L  PLAYER_X,   D3
00001520  0683 00000014            766      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001526  2839 00001A14            767      MOVE.L  PLAYER_Y,   D4 
0000152C  0684 00000014            768      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001532                           769      
00001532                           770      ; Draw Player
00001532  103C 0057                771      MOVE.B  #87,        D0          ; Draw Player
00001536  4E4F                     772      TRAP    #15                     ; Trap (Perform action)
00001538  4E75                     773      RTS                             ; Return to subroutine
0000153A                           774  
0000153A                           775  *-----------------------------------------------------------
0000153A                           776  * Subroutine    : Draw Enemy
0000153A                           777  * Description   : Draw Enemy Square
0000153A                           778  *-----------------------------------------------------------    
0000153A                           779  DRAW_ENEMY_1:
0000153A                           780      ; Set Pixel Colors
0000153A  223C 000000FF            781      MOVE.L  #RED,       D1          ; Set Background color
00001540  103C 0050                782      MOVE.B  #80,        D0          ; Task for Background Color
00001544  4E4F                     783      TRAP    #15                     ; Trap (Perform action)
00001546                           784  
00001546                           785      ; Set X, Y, Width and Height
00001546  2239 00001A2C            786      MOVE.L  ENEMY_X_1,    D1          ; X
0000154C  2439 00001A30            787      MOVE.L  ENEMY_Y_1,    D2          ; Y
00001552  2639 00001A2C            788      MOVE.L  ENEMY_X_1,    D3
00001558  0683 00000014            789      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000155E  2839 00001A30            790      MOVE.L  ENEMY_Y_1,    D4 
00001564  0684 00000014            791      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000156A                           792      
0000156A                           793      ; Draw Enemy    
0000156A  103C 0057                794      MOVE.B  #87,        D0          ; Draw Enemy
0000156E  4E4F                     795      TRAP    #15                     ; Trap (Perform action)
00001570  4E75                     796      RTS                             ; Return to subroutine
00001572                           797  
00001572                           798  DRAW_ENEMY_2:
00001572                           799      ; Set Pixel Colors
00001572  223C 000000FF            800      MOVE.L  #RED,       D1          ; Set Background color
00001578  103C 0050                801      MOVE.B  #80,        D0          ; Task for Background Color
0000157C  4E4F                     802      TRAP    #15                     ; Trap (Perform action)
0000157E                           803  
0000157E                           804      ; Set X, Y, Width and Height
0000157E  2239 00001A34            805      MOVE.L  ENEMY_X_2,    D1          ; X
00001584  2439 00001A38            806      MOVE.L  ENEMY_Y_2,    D2          ; Y
0000158A  2639 00001A34            807      MOVE.L  ENEMY_X_2,    D3
00001590  0683 00000014            808      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001596  2839 00001A38            809      MOVE.L  ENEMY_Y_2,    D4 
0000159C  0684 00000014            810      ADD.L   #ENMY_H_INIT,   D4      ; Height
000015A2                           811      
000015A2                           812      ; Draw Enemy    
000015A2  103C 0057                813      MOVE.B  #87,        D0          ; Draw Enemy
000015A6  4E4F                     814      TRAP    #15                     ; Trap (Perform action)
000015A8  4E75                     815      RTS                             ; Return to subroutine
000015AA                           816  
000015AA                           817  DRAW_ENEMY_3:
000015AA                           818      ; Set Pixel Colors
000015AA  223C 000000FF            819      MOVE.L  #RED,       D1          ; Set Background color
000015B0  103C 0050                820      MOVE.B  #80,        D0          ; Task for Background Color
000015B4  4E4F                     821      TRAP    #15                     ; Trap (Perform action)
000015B6                           822  
000015B6                           823      ; Set X, Y, Width and Height
000015B6  2239 00001A3C            824      MOVE.L  ENEMY_X_3,    D1          ; X
000015BC  2439 00001A40            825      MOVE.L  ENEMY_Y_3,    D2          ; Y
000015C2  2639 00001A3C            826      MOVE.L  ENEMY_X_3,    D3
000015C8  0683 00000014            827      ADD.L   #ENMY_W_INIT,   D3      ; Width
000015CE  2839 00001A40            828      MOVE.L  ENEMY_Y_3,    D4 
000015D4  0684 00000014            829      ADD.L   #ENMY_H_INIT,   D4      ; Height
000015DA                           830      
000015DA                           831      ; Draw Enemy    
000015DA  103C 0057                832      MOVE.B  #87,        D0          ; Draw Enemy
000015DE  4E4F                     833      TRAP    #15                     ; Trap (Perform action)
000015E0  4E75                     834      RTS                             ; Return to subroutine
000015E2                           835  
000015E2                           836  DRAW_ENEMY_4:
000015E2                           837      ; Set Pixel Colors
000015E2  223C 000000FF            838      MOVE.L  #RED,       D1          ; Set Background color
000015E8  103C 0050                839      MOVE.B  #80,        D0          ; Task for Background Color
000015EC  4E4F                     840      TRAP    #15                     ; Trap (Perform action)
000015EE                           841  
000015EE                           842      ; Set X, Y, Width and Height
000015EE  2239 00001A44            843      MOVE.L  ENEMY_X_4,    D1          ; X
000015F4  2439 00001A48            844      MOVE.L  ENEMY_Y_4,    D2          ; Y
000015FA  2639 00001A44            845      MOVE.L  ENEMY_X_4,    D3
00001600  0683 00000014            846      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001606  2839 00001A48            847      MOVE.L  ENEMY_Y_4,    D4 
0000160C  0684 00000014            848      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001612                           849      
00001612                           850      ; Draw Enemy    
00001612  103C 0057                851      MOVE.B  #87,        D0          ; Draw Enemy
00001616  4E4F                     852      TRAP    #15                     ; Trap (Perform action)
00001618  4E75                     853      RTS                             ; Return to subroutine 
0000161A                           854      
0000161A                           855  DRAW_ENEMY_5:                         ; Draw Enemy No.5
0000161A                           856      ; Set Pixel Colors
0000161A  223C 000000FF            857      MOVE.L  #RED,       D1          ; Set Background color
00001620  103C 0050                858      MOVE.B  #80,        D0          ; Task for Background Color
00001624  4E4F                     859      TRAP    #15                     ; Trap (Perform action)
00001626                           860  
00001626                           861      ; Set X, Y, Width and Height
00001626  2239 00001A4C            862      MOVE.L  ENEMY_X_5,    D1          ; X
0000162C  2439 00001A50            863      MOVE.L  ENEMY_Y_5,      D2          ; Y
00001632  2639 00001A4C            864      MOVE.L  ENEMY_X_5,    D3
00001638  0683 00000014            865      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000163E  2839 00001A50            866      MOVE.L  ENEMY_Y_5,    D4 
00001644  0684 00000014            867      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000164A                           868      
0000164A                           869      ; Draw Enemy    
0000164A  103C 0057                870      MOVE.B  #87,        D0          ; Draw Enemy
0000164E  4E4F                     871      TRAP    #15                     ; Trap (Perform action)
00001650  4E75                     872      RTS                             ; Return to subroutine
00001652                           873  
00001652                           874  DRAW_ENEMY_6:
00001652                           875      ; Set Pixel Colors
00001652  223C 000000FF            876      MOVE.L  #RED,       D1          ; Set Background color
00001658  103C 0050                877      MOVE.B  #80,        D0          ; Task for Background Color
0000165C  4E4F                     878      TRAP    #15                     ; Trap (Perform action)
0000165E                           879  
0000165E                           880      ; Set X, Y, Width and Height
0000165E  2239 00001A54            881      MOVE.L  ENEMY_X_6,    D1          ; X
00001664  2439 00001A58            882      MOVE.L  ENEMY_Y_6,    D2          ; Y
0000166A  2639 00001A54            883      MOVE.L  ENEMY_X_6,    D3
00001670  0683 00000014            884      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001676  2839 00001A58            885      MOVE.L  ENEMY_Y_6,    D4 
0000167C  0684 00000014            886      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001682                           887      
00001682                           888      ; Draw Enemy    
00001682  103C 0057                889      MOVE.B  #87,        D0          ; Draw Enemy
00001686  4E4F                     890      TRAP    #15                     ; Trap (Perform action)
00001688  4E75                     891      RTS                             ; Return to subroutine  
0000168A                           892  
0000168A                           893  *DRAW_ENEMY_7:
0000168A                           894  *    ; Set Pixel Colors
0000168A                           895  *    MOVE.L  #RED,       D1          ; Set Background color
0000168A                           896  *    MOVE.B  #80,        D0          ; Task for Background Color
0000168A                           897  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           898  *
0000168A                           899  *    ; Set X, Y, Width and Height
0000168A                           900  *    MOVE.L  ENEMY_X_7,    D1          ; X
0000168A                           901  *    MOVE.L  ENEMY_Y_7,    D2          ; Y
0000168A                           902  *    MOVE.L  ENEMY_X_7,    D3
0000168A                           903  *    ADD.L   #ENMY_W_INIT,   D3      ; Width
0000168A                           904  *    MOVE.L  ENEMY_Y_7,    D4 
0000168A                           905  *    ADD.L   #ENMY_H_INIT,   D4      ; Height
0000168A                           906  *    
0000168A                           907  *    ; Draw Enemy    
0000168A                           908  *    MOVE.B  #87,        D0          ; Draw Enemy
0000168A                           909  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           910  *    RTS                             ; Return to subroutine   
0000168A                           911  *
0000168A                           912  *DRAW_ENEMY_8:
0000168A                           913  *    ; Set Pixel Colors
0000168A                           914  *    MOVE.L  #RED,       D1          ; Set Background color
0000168A                           915  *    MOVE.B  #80,        D0          ; Task for Background Color
0000168A                           916  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           917  *
0000168A                           918  *    ; Set X, Y, Width and Height
0000168A                           919  *    MOVE.L  ENEMY_X_8,    D1          ; X
0000168A                           920  *    MOVE.L  ENEMY_Y_8,    D2          ; Y
0000168A                           921  *    MOVE.L  ENEMY_X_8,    D3
0000168A                           922  *    ADD.L   #ENMY_W_INIT,   D3      ; Width
0000168A                           923  *    MOVE.L  ENEMY_Y_8,    D4 
0000168A                           924  *    ADD.L   #ENMY_H_INIT,   D4      ; Height
0000168A                           925  *    
0000168A                           926  *    ; Draw Enemy    
0000168A                           927  *    MOVE.B  #87,        D0          ; Draw Enemy
0000168A                           928  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           929  *    RTS                             ; Return to subroutine   
0000168A                           930  *
0000168A                           931  *DRAW_ENEMY_9:
0000168A                           932  *    ; Set Pixel Colors
0000168A                           933  *    MOVE.L  #RED,       D1          ; Set Background color
0000168A                           934  *    MOVE.B  #80,        D0          ; Task for Background Color
0000168A                           935  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           936  *
0000168A                           937  *    ; Set X, Y, Width and Height
0000168A                           938  *    MOVE.L  ENEMY_X_9,    D1          ; X
0000168A                           939  *    MOVE.L  ENEMY_Y_9,    D2          ; Y
0000168A                           940  *    MOVE.L  ENEMY_X_9,    D3
0000168A                           941  *    ADD.L   #ENMY_W_INIT,   D3      ; Width
0000168A                           942  *    MOVE.L  ENEMY_Y_9,    D4 
0000168A                           943  *    ADD.L   #ENMY_H_INIT,   D4      ; Height
0000168A                           944  *    
0000168A                           945  *    ; Draw Enemy    
0000168A                           946  *    MOVE.B  #87,        D0          ; Draw Enemy
0000168A                           947  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           948  *    RTS                             ; Return to subroutine 
0000168A                           949  *
0000168A                           950  *DRAW_ENEMY_10:
0000168A                           951  *    ; Set Pixel Colors
0000168A                           952  *    MOVE.L  #RED,       D1          ; Set Background color
0000168A                           953  *    MOVE.B  #80,        D0          ; Task for Background Color
0000168A                           954  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           955  *
0000168A                           956  *    ; Set X, Y, Width and Height
0000168A                           957  *    MOVE.L  ENEMY_X10,    D1          ; X
0000168A                           958  *    MOVE.L  ENEMY_Y10,    D2          ; Y
0000168A                           959  *    MOVE.L  ENEMY_X10,    D3
0000168A                           960  *    ADD.L   #ENMY_W_INIT,   D3      ; Width
0000168A                           961  *    MOVE.L  ENEMY_Y10,    D4 
0000168A                           962  *    ADD.L   #ENMY_H_INIT,   D4      ; Height
0000168A                           963  *    
0000168A                           964  *    ; Draw Enemy    
0000168A                           965  *    MOVE.B  #87,        D0          ; Draw Enemy
0000168A                           966  *    TRAP    #15                     ; Trap (Perform action)
0000168A                           967  *    RTS                             ; Return to subroutine              
0000168A                           968  ;----------------------------------------------------------
0000168A                           969  * Subroutine    : Collision Check
0000168A                           970  * Description   : Axis-Aligned Bounding Box Collision Detection
0000168A                           971  * Algorithm checks for overlap on the 4 sides of the Player and 
0000168A                           972  * Enemy rectangles
0000168A                           973  * PLAYER_X <= ENEMY_X + ENEMY_W &&
0000168A                           974  * PLAYER_X + PLAYER_W >= ENEMY_X &&
0000168A                           975  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
0000168A                           976  * PLAYER_H + PLAYER_Y >= ENEMY_Y
0000168A                           977  *-----------------------------------------------------------
0000168A                           978  CHECK_COLLISIONS_1:
0000168A  4281                     979      CLR.L   D1                      ; Clear D1
0000168C  4282                     980      CLR.L   D2                      ; Clear D2
0000168E                           981  
0000168E                           982  PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W:
0000168E  2239 00001A10            983      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001694  2439 00001A2C            984      MOVE.L  ENEMY_X_1,  D2          ; Move Enemy X to D2
0000169A  D4B8 0014                985      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000169E  B481                     986      CMP.L   D1,         D2          ; Do the Overlap ?
000016A0  6F00 0006                987      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  ; Less than or Equal ?
000016A4  6000 004A                988      BRA     COLLISION_CHECK_DONE_1   ; If not no collision
000016A8                           989  
000016A8                           990      
000016A8                           991  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1:    
000016A8  D2B8 0014                992      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000016AC  2439 00001A2C            993      MOVE.L  ENEMY_X_1,  D2          ; Move Enemy X to D2
000016B2  B481                     994      CMP.L   D1,         D2          ; Do they OverLap ?
000016B4  6C00 0006                995      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  ; Less than or Equal
000016B8  6000 0036                996      BRA     COLLISION_CHECK_DONE_1    ; If not no collision
000016BC                           997  
000016BC                           998     
000016BC                           999  PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H:     
000016BC  2239 00001A14           1000      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000016C2  2439 00001A30           1001      MOVE.L  ENEMY_Y_1,  D2          ; Move Enemy Y to D2
000016C8  D4B8 0014               1002      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000016CC  B481                    1003      CMP.L   D1,         D2          ; Do they Overlap ?
000016CE  6F00 0006               1004      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  ; Less than or Equal
000016D2  6000 001C               1005      BRA     COLLISION_CHECK_DONE_1    ; If not no collision 
000016D6                          1006      
000016D6                          1007  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1:     ; Less than or Equal ?
000016D6  2239 00001A14           1008      MOVE.L  PLAYER_Y,   D1
000016DC  D2B8 0014               1009      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000016E0  2439 00001A30           1010      MOVE.L  ENEMY_Y_1,  D2          ; Move Enemy Height to D2  
000016E6  B481                    1011      CMP.L   D1,         D2          ; Do they OverLap ?
000016E8  6C00 0264               1012      BGE     COLLISION              ; Collision !
000016EC  6000 0002               1013      BRA     COLLISION_CHECK_DONE_1    ; If not no collision
000016F0                          1014  
000016F0                          1015  COLLISION_CHECK_DONE_1:               ; No Collision Update points
000016F0  5281                    1016      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000016F2  D2B9 00001A18           1017      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000016F8  23C1 00001A18           1018      MOVE.L  D1,PLAYER_SCORE        ; Update player score in memory
000016FE  4E75                    1019      RTS                             ; Return to subroutine
00001700                          1020  *--------------------------------------------------------------------------------- 
00001700                          1021  CHECK_COLLISIONS_2:
00001700  4281                    1022      CLR.L   D1                      ; Clear D1
00001702  4282                    1023      CLR.L   D2                      ; Clear D2
00001704                          1024  
00001704                          1025  PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W:
00001704  2239 00001A10           1026      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000170A  2439 00001A34           1027      MOVE.L  ENEMY_X_2,  D2          ; Move Enemy X to D2
00001710  D4B8 0014               1028      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001714  B481                    1029      CMP.L   D1,         D2          ; Do the Overlap ?
00001716  6F00 0006               1030      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  ; Less than or Equal ?
0000171A  6000 004A               1031      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
0000171E                          1032      
0000171E                          1033  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2:     ; Check player is not  
0000171E  D2B8 0014               1034      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001722  2439 00001A34           1035      MOVE.L  ENEMY_X_2,  D2          ; Move Enemy X to D2
00001728  B481                    1036      CMP.L   D1,         D2          ; Do they OverLap ?
0000172A  6C00 0006               1037      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  ; Less than or Equal
0000172E  6000 0036               1038      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
00001732                          1039     
00001732                          1040  PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H:     
00001732  2239 00001A14           1041      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001738  2439 00001A38           1042      MOVE.L  ENEMY_Y_2,  D2          ; Move Enemy Y to D2
0000173E  D4B8 0014               1043      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001742  B481                    1044      CMP.L   D1,         D2          ; Do they Overlap ?
00001744  6F00 0006               1045      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  ; Less than or Equal
00001748  6000 001C               1046      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
0000174C                          1047      
0000174C                          1048  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2:     ; Less than or Equal ?
0000174C  2239 00001A14           1049      MOVE.L  PLAYER_Y,   D1
00001752  D2B8 0014               1050      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001756  2439 00001A38           1051      MOVE.L  ENEMY_Y_2,  D2          ; Move Enemy Height to D2  
0000175C  B481                    1052      CMP.L   D1,         D2          ; Do they OverLap ?
0000175E  6C00 01EE               1053      BGE     COLLISION              ; Collision !
00001762  6000 0002               1054      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
00001766                          1055      
00001766                          1056  COLLISION_CHECK_DONE_2:               ; No Collision Update points
00001766  5281                    1057      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001768  D2B9 00001A18           1058      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000176E  23C1 00001A18           1059      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001774  4E75                    1060      RTS                             ; Return to subroutine
00001776                          1061  *--------------------------------------------------------------------------------- 
00001776                          1062  CHECK_COLLISIONS_3:
00001776  4281                    1063      CLR.L   D1                      ; Clear D1
00001778  4282                    1064      CLR.L   D2                      ; Clear D2
0000177A                          1065  
0000177A                          1066  PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W:
0000177A  2239 00001A10           1067      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001780  2439 00001A3C           1068      MOVE.L  ENEMY_X_3,  D2          ; Move Enemy X to D2
00001786  D4B8 0014               1069      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000178A  B481                    1070      CMP.L   D1,         D2          ; Do the Overlap ?
0000178C  6F00 0006               1071      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  ; Less than or Equal ?
00001790  6000 004A               1072      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
00001794                          1073  
00001794                          1074  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3:     ; Check player is not  
00001794  D2B8 0014               1075      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001798  2439 00001A3C           1076      MOVE.L  ENEMY_X_3,  D2          ; Move Enemy X to D2
0000179E  B481                    1077      CMP.L   D1,         D2          ; Do they OverLap ?
000017A0  6C00 0006               1078      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  ; Less than or Equal
000017A4  6000 0036               1079      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
000017A8                          1080     
000017A8                          1081  PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H:     
000017A8  2239 00001A14           1082      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000017AE  2439 00001A40           1083      MOVE.L  ENEMY_Y_3,  D2          ; Move Enemy Y to D2
000017B4  D4B8 0014               1084      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000017B8  B481                    1085      CMP.L   D1,         D2          ; Do they Overlap ?
000017BA  6F00 0006               1086      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  ; Less than or Equal
000017BE  6000 001C               1087      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
000017C2                          1088      
000017C2                          1089  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3:     ; Less than or Equal ?
000017C2  2239 00001A14           1090      MOVE.L  PLAYER_Y,   D1
000017C8  D2B8 0014               1091      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000017CC  2439 00001A40           1092      MOVE.L  ENEMY_Y_3,  D2          ; Move Enemy Height to D2  
000017D2  B481                    1093      CMP.L   D1,         D2          ; Do they OverLap ?
000017D4  6C00 0178               1094      BGE     COLLISION              ; Collision !
000017D8  6000 0002               1095      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
000017DC                          1096      
000017DC                          1097  COLLISION_CHECK_DONE_3:               ; No Collision Update points
000017DC  5281                    1098      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000017DE  D2B9 00001A18           1099      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000017E4  23C1 00001A18           1100      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000017EA  4E75                    1101      RTS                             ; Return to subroutine
000017EC                          1102  *--------------------------------------------------------------------------------
000017EC                          1103  CHECK_COLLISIONS_4:
000017EC  4281                    1104      CLR.L   D1                      ; Clear D1
000017EE  4282                    1105      CLR.L   D2                      ; Clear D2
000017F0                          1106  
000017F0                          1107  PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W:
000017F0  2239 00001A10           1108      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000017F6  2439 00001A44           1109      MOVE.L  ENEMY_X_4,  D2          ; Move Enemy X to D2
000017FC  D4B8 0014               1110      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001800  B481                    1111      CMP.L   D1,         D2          ; Do the Overlap ?
00001802  6F00 0006               1112      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  ; Less than or Equal ?
00001806  6000 004A               1113      BRA     COLLISION_CHECK_DONE_4    ; If not no collision
0000180A                          1114  
0000180A                          1115      
0000180A                          1116  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4:     ; Check player is not  
0000180A  D2B8 0014               1117      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000180E  2439 00001A44           1118      MOVE.L  ENEMY_X_4,  D2          ; Move Enemy X to D2
00001814  B481                    1119      CMP.L   D1,         D2          ; Do they OverLap ?
00001816  6C00 0006               1120      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  ; Less than or Equal
0000181A  6000 0036               1121      BRA     COLLISION_CHECK_DONE_4    ; If not no collision
0000181E                          1122     
0000181E                          1123  PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H:     
0000181E  2239 00001A14           1124      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001824  2439 00001A48           1125      MOVE.L  ENEMY_Y_4,  D2          ; Move Enemy Y to D2
0000182A  D4B8 0014               1126      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000182E  B481                    1127      CMP.L   D1,         D2          ; Do they Overlap ?
00001830  6F00 0006               1128      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  ; Less than or Equal
00001834  6000 001C               1129      BRA     COLLISION_CHECK_DONE_4    ; If not no collision 
00001838                          1130      
00001838                          1131  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4:     ; Less than or Equal ?
00001838  2239 00001A14           1132      MOVE.L  PLAYER_Y,   D1
0000183E  D2B8 0014               1133      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001842  2439 00001A48           1134      MOVE.L  ENEMY_Y_4,  D2          ; Move Enemy Height to D2  
00001848  B481                    1135      CMP.L   D1,         D2          ; Do they OverLap ?
0000184A  6C00 0102               1136      BGE     COLLISION              ; Collision !
0000184E  6000 0002               1137      BRA     COLLISION_CHECK_DONE_4    ; If not no collision
00001852                          1138      
00001852                          1139  COLLISION_CHECK_DONE_4:               ; No Collision Update points
00001852  5281                    1140      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001854  D2B9 00001A18           1141      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000185A  23C1 00001A18           1142      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001860  4E75                    1143      RTS                             ; Return to subroutine
00001862                          1144  *---------------------------------------------------------------------------------
00001862                          1145  CHECK_COLLISIONS_5:
00001862  4281                    1146      CLR.L   D1                      ; Clear D1
00001864  4282                    1147      CLR.L   D2                      ; Clear D2
00001866                          1148      
00001866                          1149  PLAYER_X_LTE_TO_ENEMY_X_5_PLUS_W:
00001866  2239 00001A10           1150      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000186C  2439 00001A4C           1151      MOVE.L  ENEMY_X_5,  D2          ; Move Enemy X to D2
00001872  D4B8 0014               1152      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001876  B481                    1153      CMP.L   D1,         D2          ; Do the Overlap ?
00001878  6F00 0006               1154      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5  ; Less than or Equal ?
0000187C  6000 004A               1155      BRA     COLLISION_CHECK_DONE_5    ; If not no collision
00001880                          1156      
00001880                          1157  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5:     ; Check player is not  
00001880  D2B8 0014               1158      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001884  2439 00001A4C           1159      MOVE.L  ENEMY_X_5,  D2          ; Move Enemy X to D2
0000188A  B481                    1160      CMP.L   D1,         D2          ; Do they OverLap ?
0000188C  6C00 0006               1161      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H  ; Less than or Equal
00001890  6000 0036               1162      BRA     COLLISION_CHECK_DONE_5    ; If not no collision
00001894                          1163     
00001894                          1164  PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H:     
00001894  2239 00001A14           1165      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000189A  2439 00001A50           1166      MOVE.L  ENEMY_Y_5,  D2          ; Move Enemy Y to D2
000018A0  D4B8 0014               1167      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000018A4  B481                    1168      CMP.L   D1,         D2          ; Do they Overlap ?
000018A6  6F00 0006               1169      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5  ; Less than or Equal
000018AA  6000 001C               1170      BRA     COLLISION_CHECK_DONE_5    ; If not no collision 
000018AE                          1171      
000018AE                          1172  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5:     ; Less than or Equal ?
000018AE  2239 00001A14           1173      MOVE.L  PLAYER_Y,   D1
000018B4  D2B8 0014               1174      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000018B8  2439 00001A50           1175      MOVE.L  ENEMY_Y_5,  D2          ; Move Enemy Height to D2  
000018BE  B481                    1176      CMP.L   D1,         D2          ; Do they OverLap ?
000018C0  6C00 008C               1177      BGE     COLLISION               ; Collision !
000018C4  6000 0002               1178      BRA     COLLISION_CHECK_DONE_5    ; If not no collision
000018C8                          1179      
000018C8                          1180  COLLISION_CHECK_DONE_5:               ; No Collision Update points
000018C8  5281                    1181      ADD.L   #POINTS,     D1          ; Move points upgrade to D1
000018CA  D2B9 00001A18           1182      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000018D0  23C1 00001A18           1183      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000018D6  4E75                    1184      RTS                             ; Return to subroutine
000018D8                          1185  *----------------------------------------------------------------------------------
000018D8                          1186  CHECK_COLLISIONS_6:
000018D8  4281                    1187      CLR.L   D1                      ; Clear D1
000018DA  4282                    1188      CLR.L   D2                      ; Clear D2
000018DC                          1189      
000018DC                          1190  PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W:
000018DC  2239 00001A10           1191      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000018E2  2439 00001A54           1192      MOVE.L  ENEMY_X_6,  D2          ; Move Enemy X to D2
000018E8  D4B8 0014               1193      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000018EC  B481                    1194      CMP.L   D1,         D2          ; Do the Overlap ?
000018EE  6F00 0006               1195      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  ; Less than or Equal ?
000018F2  6000 004A               1196      BRA     COLLISION_CHECK_DONE_6    ; If not no collision
000018F6                          1197      
000018F6                          1198  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6:     ; Check player is not  
000018F6  D2B8 0014               1199      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000018FA  2439 00001A54           1200      MOVE.L  ENEMY_X_6,  D2          ; Move Enemy X to D2
00001900  B481                    1201      CMP.L   D1,         D2          ; Do they OverLap ?
00001902  6C00 0006               1202      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  ; Less than or Equal
00001906  6000 0036               1203      BRA     COLLISION_CHECK_DONE_6    ; If not no collision
0000190A                          1204     
0000190A                          1205  PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H:     
0000190A  2239 00001A14           1206      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001910  2439 00001A58           1207      MOVE.L  ENEMY_Y_6,  D2          ; Move Enemy Y to D2
00001916  D4B8 0014               1208      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000191A  B481                    1209      CMP.L   D1,         D2          ; Do they Overlap ?
0000191C  6F00 0006               1210      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  ; Less than or Equal
00001920  6000 001C               1211      BRA     COLLISION_CHECK_DONE_6    ; If not no collision 
00001924                          1212      
00001924                          1213  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6:     ; Less than or Equal ?
00001924  2239 00001A14           1214      MOVE.L  PLAYER_Y,   D1
0000192A  D2B8 0014               1215      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000192E  2439 00001A58           1216      MOVE.L  ENEMY_Y_6,  D2          ; Move Enemy Height to D2  
00001934  B481                    1217      CMP.L   D1,         D2          ; Do they OverLap ?
00001936  6C00 0016               1218      BGE     COLLISION               ; Collision !
0000193A  6000 0002               1219      BRA     COLLISION_CHECK_DONE_6    ; If not no collision
0000193E                          1220  
0000193E                          1221  COLLISION_CHECK_DONE_6:               ; No Collision Update points
0000193E  5281                    1222      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001940  D2B9 00001A18           1223      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001946  23C1 00001A18           1224      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000194C  4E75                    1225      RTS                              ; Return to subroutine
0000194E                          1226  *---------------------------------------------------------------------------------
0000194E                          1227  *CHECK_COLLISIONS_7:
0000194E                          1228  *    CLR.L   D1                      ; Clear D1
0000194E                          1229  *    CLR.L   D2                      ; Clear D2
0000194E                          1230  *    
0000194E                          1231  *PLAYER_X_LTE_TO_ENEMY_X_7_PLUS_W:
0000194E                          1232  *    MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000194E                          1233  *    MOVE.L  ENEMY_X_7,  D2          ; Move Enemy X to D2
0000194E                          1234  *    ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000194E                          1235  *    CMP.L   D1,         D2          ; Do the Overlap ?
0000194E                          1236  *    BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7  ; Less than or Equal ?
0000194E                          1237  *    BRA     COLLISION_CHECK_DONE_7    ; If not no collision
0000194E                          1238  *    
0000194E                          1239  *PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7:     ; Check player is not  
0000194E                          1240  *    ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000194E                          1241  *    MOVE.L  ENEMY_X_7,  D2          ; Move Enemy X to D2
0000194E                          1242  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1243  *    BGE     PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H  ; Less than or Equal
0000194E                          1244  *    BRA     COLLISION_CHECK_DONE_7    ; If not no collision
0000194E                          1245  *   
0000194E                          1246  *PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H:     
0000194E                          1247  *    MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000194E                          1248  *    MOVE.L  ENEMY_Y_7,  D2          ; Move Enemy Y to D2
0000194E                          1249  *    ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000194E                          1250  *    CMP.L   D1,         D2          ; Do they Overlap ?
0000194E                          1251  *    BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7  ; Less than or Equal
0000194E                          1252  *    BRA     COLLISION_CHECK_DONE_7    ; If not no collision 
0000194E                          1253  *    
0000194E                          1254  *PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7:     ; Less than or Equal ?
0000194E                          1255  *    MOVE.L  PLAYER_Y,   D1
0000194E                          1256  *    ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000194E                          1257  *    MOVE.L  ENEMY_Y_7,  D2          ; Move Enemy Height to D2  
0000194E                          1258  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1259  *    BGE     COLLISION               ; Collision !
0000194E                          1260  *    BRA     COLLISION_CHECK_DONE_7    ; If not no collision
0000194E                          1261  *
0000194E                          1262  *COLLISION_CHECK_DONE_7:               ; No Collision Update points
0000194E                          1263  *    ADD.L   #POINTS,     D1          ; Move points upgrade to D1
0000194E                          1264  *    ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000194E                          1265  *    MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000194E                          1266  *    RTS                               ; Return to subroutine
0000194E                          1267  **---------------------------------------------------------------------------------
0000194E                          1268  *CHECK_COLLISIONS_8:
0000194E                          1269  *    CLR.L   D1                      ; Clear D1
0000194E                          1270  *    CLR.L   D2                      ; Clear D2
0000194E                          1271  *    
0000194E                          1272  *PLAYER_X_LTE_TO_ENEMY_X_8_PLUS_W:
0000194E                          1273  *    MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000194E                          1274  *    MOVE.L  ENEMY_X_8,  D2          ; Move Enemy X to D2
0000194E                          1275  *    ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000194E                          1276  *    CMP.L   D1,         D2          ; Do the Overlap ?
0000194E                          1277  *    BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_8  ; Less than or Equal ?
0000194E                          1278  *    BRA     COLLISION_CHECK_DONE_8    ; If not no collision
0000194E                          1279  *    
0000194E                          1280  *PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_8:     ; Check player is not  
0000194E                          1281  *    ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000194E                          1282  *    MOVE.L  ENEMY_X_8,  D2          ; Move Enemy X to D2
0000194E                          1283  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1284  *    BGE     PLAYER_Y_LTE_TO_ENEMY_Y_8_PLUS_H  ; Less than or Equal
0000194E                          1285  *    BRA     COLLISION_CHECK_DONE_8    ; If not no collision
0000194E                          1286  *   
0000194E                          1287  *PLAYER_Y_LTE_TO_ENEMY_Y_8_PLUS_H:     
0000194E                          1288  *    MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000194E                          1289  *    MOVE.L  ENEMY_Y_8,  D2          ; Move Enemy Y to D2
0000194E                          1290  *    ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000194E                          1291  *    CMP.L   D1,         D2          ; Do they Overlap ?
0000194E                          1292  *    BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_8  ; Less than or Equal
0000194E                          1293  *    BRA     COLLISION_CHECK_DONE_8    ; If not no collision
0000194E                          1294  *    
0000194E                          1295  *PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_8:     ; Less than or Equal ?
0000194E                          1296  *    MOVE.L  PLAYER_Y,   D1
0000194E                          1297  *    ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000194E                          1298  *    MOVE.L  ENEMY_Y_8,  D2          ; Move Enemy Height to D2  
0000194E                          1299  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1300  *    BGE     COLLISION               ; Collision !
0000194E                          1301  *    BRA     COLLISION_CHECK_DONE_8    ; If not no collision
0000194E                          1302  *
0000194E                          1303  *COLLISION_CHECK_DONE_8:               ; No Collision Update points
0000194E                          1304  *    ADD.L   #POINTS,     D1          ; Move points upgrade to D1
0000194E                          1305  *    ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000194E                          1306  *    MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000194E                          1307  *    RTS                             ; Return to subroutine
0000194E                          1308  **---------------------------------------------------------------------------------
0000194E                          1309  *CHECK_COLLISIONS_9:
0000194E                          1310  *    CLR.L   D1                      ; Clear D1
0000194E                          1311  *    CLR.L   D2                      ; Clear D2
0000194E                          1312  *    
0000194E                          1313  *PLAYER_X_LTE_TO_ENEMY_X_9_PLUS_W:
0000194E                          1314  *    MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000194E                          1315  *    MOVE.L  ENEMY_X_9,  D2          ; Move Enemy X to D2
0000194E                          1316  *    ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000194E                          1317  *    CMP.L   D1,         D2          ; Do the Overlap ?
0000194E                          1318  *    BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_9  ; Less than or Equal ?
0000194E                          1319  *    BRA     COLLISION_CHECK_DONE_9    ; If not no collision
0000194E                          1320  *    
0000194E                          1321  *PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_9:     ; Check player is not  
0000194E                          1322  *    ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000194E                          1323  *    MOVE.L  ENEMY_X_9,  D2          ; Move Enemy X to D2
0000194E                          1324  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1325  *    BGE     PLAYER_Y_LTE_TO_ENEMY_Y_9_PLUS_H  ; Less than or Equal
0000194E                          1326  *    BRA     COLLISION_CHECK_DONE_9    ; If not no collision
0000194E                          1327  *   
0000194E                          1328  *PLAYER_Y_LTE_TO_ENEMY_Y_9_PLUS_H:     
0000194E                          1329  *    MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000194E                          1330  *    MOVE.L  ENEMY_Y_9,  D2          ; Move Enemy Y to D2
0000194E                          1331  *    ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000194E                          1332  *    CMP.L   D1,         D2          ; Do they Overlap ?
0000194E                          1333  *    BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_9  ; Less than or Equal
0000194E                          1334  *    BRA     COLLISION_CHECK_DONE_9    ; If not no collision 
0000194E                          1335  *    
0000194E                          1336  *PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_9:     ; Less than or Equal ?
0000194E                          1337  *    MOVE.L  PLAYER_Y,   D1
0000194E                          1338  *    ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000194E                          1339  *    MOVE.L  ENEMY_Y_9,  D2          ; Move Enemy Height to D2  
0000194E                          1340  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1341  *    BGE     COLLISION               ; Collision !
0000194E                          1342  *    BRA     COLLISION_CHECK_DONE_9    ; If not no collision 
0000194E                          1343  *
0000194E                          1344  *COLLISION_CHECK_DONE_9:               ; No Collision Update points
0000194E                          1345  *    ADD.L   #POINTS,     D1          ; Move points upgrade to D1
0000194E                          1346  *    ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000194E                          1347  *    MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000194E                          1348  *    RTS                               ; Return to subroutine
0000194E                          1349  **---------------------------------------------------------------------------------
0000194E                          1350  *CHECK_COLLISIONS_10:
0000194E                          1351  *    CLR.L   D1                      ; Clear D1
0000194E                          1352  *    CLR.L   D2                      ; Clear D2
0000194E                          1353  *    
0000194E                          1354  *PLAYER_X_LTE_TO_ENEMY_X10_PLUS_W:
0000194E                          1355  *    MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000194E                          1356  *    MOVE.L  ENEMY_X10,  D2          ; Move Enemy X to D2
0000194E                          1357  *    ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000194E                          1358  *    CMP.L   D1,         D2          ; Do the Overlap ?
0000194E                          1359  *    BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X10  ; Less than or Equal ?
0000194E                          1360  *    BRA     COLLISION_CHECK_DONE_10    ; If not no collision
0000194E                          1361  *    
0000194E                          1362  *PLAYER_X_PLUS_W_LTE_TO_ENEMY_X10:     ; Check player is not  
0000194E                          1363  *    ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000194E                          1364  *    MOVE.L  ENEMY_X10,  D2          ; Move Enemy X to D2
0000194E                          1365  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1366  *    BGE     PLAYER_Y_LTE_TO_ENEMY_Y10_PLUS_H  ; Less than or Equal
0000194E                          1367  *    BRA     COLLISION_CHECK_DONE_10    ; If not no collision
0000194E                          1368  *   
0000194E                          1369  *PLAYER_Y_LTE_TO_ENEMY_Y10_PLUS_H:     
0000194E                          1370  *    MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000194E                          1371  *    MOVE.L  ENEMY_Y10,  D2          ; Move Enemy Y to D2
0000194E                          1372  *    ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000194E                          1373  *    CMP.L   D1,         D2          ; Do they Overlap ?
0000194E                          1374  *    BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y10  ; Less than or Equal
0000194E                          1375  *    BRA     COLLISION_CHECK_DONE_10    ; If not no collision 
0000194E                          1376  *    
0000194E                          1377  *PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y10:     ; Less than or Equal ?
0000194E                          1378  *    MOVE.L  PLAYER_Y,   D1
0000194E                          1379  *    ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000194E                          1380  *    MOVE.L  ENEMY_Y10,  D2          ; Move Enemy Height to D2  
0000194E                          1381  *    CMP.L   D1,         D2          ; Do they OverLap ?
0000194E                          1382  *    BGE     COLLISION               ; Collision !
0000194E                          1383  *    BRA     COLLISION_CHECK_DONE_10    ; If not no collision 
0000194E                          1384  *
0000194E                          1385  *COLLISION_CHECK_DONE_10:               ; No Collision Update points
0000194E                          1386  *    ADD.L   #POINTS,     D1          ; Move points upgrade to D1
0000194E                          1387  *    ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000194E                          1388  *    MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000194E                          1389  *    RTS                               ; Return to subroutine
0000194E                          1390  *---------------------------------------------------------------------------------
0000194E                          1391  
0000194E                          1392  COLLISION:
0000194E  6100 FBA6               1393      BSR     PLAY_OPPS               ; Play Opps Wav
00001952  04B9 00000014 00001A1C  1394      SUB.L   #20, HEALTH_VALUE
0000195C                          1395      IF.L    (HEALTH_VALUE) <EQ> #0 THEN
0000196A                          1396      
0000196A  103C 000B               1397              MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000196E  323C FF00               1398              MOVE.W  #$FF00,     D1          ; Clear contents
00001972  4E4F                    1399              TRAP    #15                     ; Trap (Perform action)
00001974                          1400              
00001974  6100 FA3A               1401              BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001978  6100 FB88               1402              BSR     DRAW_PLAYER             ; Draw Player
0000197C  6100 FBBC               1403              BSR     DRAW_ENEMY_1
00001980  6100 FBF0               1404              BSR     DRAW_ENEMY_2
00001984  6100 FC24               1405              BSR     DRAW_ENEMY_3
00001988  6100 FC58               1406              BSR     DRAW_ENEMY_4
0000198C  6100 FC8C               1407              BSR     DRAW_ENEMY_5  
00001990  6100 FCC0               1408              BSR     DRAW_ENEMY_6
00001994                          1409  *            BSR     DRAW_ENEMY_7
00001994                          1410  *            BSR     DRAW_ENEMY_8
00001994                          1411  *            BSR     DRAW_ENEMY_9
00001994                          1412  *            BSR     DRAW_ENEMY_10
00001994  6100 F9F6               1413              BSR     DRAW_BOTTOM_LINE
00001998  6100 F9D6               1414              BSR     DRAW_TOP_LINE
0000199C                          1415  
0000199C  103C 005E               1416              MOVE.B  #94,        D0
000019A0  4E4F                    1417              TRAP    #15
000019A2                          1418              
000019A2  6100 0004               1419              BSR EXIT
000019A6                          1420      ENDI
000019A6  4E75                    1421      RTS                             ; Return to subroutine   
000019A8                          1422  *-----------------------------------------------------------
000019A8                          1423  * Subroutine    : EXIT
000019A8                          1424  * Description   : Exit message and End Game
000019A8                          1425  *-----------------------------------------------------------
000019A8                          1426  EXIT:
000019A8                          1427      ; Show if Exiting is Running
000019A8  103C 000B               1428      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000019AC  323C 4004               1429      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000019B0  4E4F                    1430      TRAP    #15                     ; Trap (Perform action)
000019B2  43F9 000019FC           1431      LEA     EXIT_MSG,   A1          ; Exit
000019B8  303C 000D               1432      MOVE    #13,        D0          ; No Line feed
000019BC  4E4F                    1433      TRAP    #15                     ; Trap (Perform action)
000019BE  103C 0009               1434      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000019C2  4E4F                    1435      TRAP    #15                     ; Trap (Perform action)
000019C4  FFFF FFFF               1436      SIMHALT
000019C8                          1437  
000019C8                          1438  *-----------------------------------------------------------
000019C8                          1439  * Section       : Messages
000019C8                          1440  * Description   : Messages to Print on Console, names should be
000019C8                          1441  * self documenting
000019C8                          1442  *-----------------------------------------------------------
000019C8= 53 63 6F 72 65 20 ...   1443  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
000019D1= 4B 65 79 43 6F 64 ...   1444  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
000019DC                          1445  ;---------------------------------------------------------
000019DC= 55 70 2E 2E 2E 2E 00    1446  UP_MSG          DC.B    'Up....', 0       ; Up Message
000019E3= 44 6F 77 6E 2E 2E ...   1447  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
000019EC                          1448  ;-----------------------------------------------------------
000019EC= 58 3A 00                1449  X_MSG           DC.B    'X:', 0             ; X Position Message
000019EF= 59 3A 00                1450  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
000019F2= 48 65 61 6C 74 68 ...   1451  HEALTH_MSG      DC.B    'Health : ',0       ; Health message
000019FC                          1452  
000019FC= 45 78 69 74 69 6E ...   1453  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001A08                          1454  *-----------------------------------------------------------
00001A08                          1455  * Section       : Graphic Colors
00001A08                          1456  * Description   : Screen Pixel Color
00001A08                          1457  *-----------------------------------------------------------
00001A08  =00FFFFFF               1458  WHITE           EQU     $00FFFFFF
00001A08  =000000FF               1459  RED             EQU     $000000FF
00001A08  =0000FF00               1460  LIME            EQU     $0000FF00 
00001A08                          1461  
00001A08                          1462  *-----------------------------------------------------------
00001A08                          1463  * Section       : Screen Size
00001A08                          1464  * Description   : Screen Width and Height
00001A08                          1465  *-----------------------------------------------------------
00001A08                          1466  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001A0A                          1467  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001A0C                          1468  
00001A0C                          1469  *-----------------------------------------------------------
00001A0C                          1470  * Section       : Keyboard Input
00001A0C                          1471  * Description   : Used for storing Keypresses
00001A0C                          1472  *-----------------------------------------------------------
00001A0C                          1473  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001A10                          1474  
00001A10                          1475  *-----------------------------------------------------------
00001A10                          1476  * Section       : Character Positions
00001A10                          1477  * Description   : Player and Enemy Position Memory Locations
00001A10                          1478  *-----------------------------------------------------------
00001A10                          1479  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001A14                          1480  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001A18                          1481  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001A1C                          1482  HEALTH_VALUE    DS.L    01  ; Reserve Space for Health Value
00001A20                          1483  
00001A20                          1484  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001A24                          1485  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001A28                          1486  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001A2C                          1487  
00001A2C                          1488  ENEMY_X_1       DS.L    01  ; Reserve Space for Enemy X Position
00001A30                          1489  ENEMY_Y_1       DS.L    01  ; Reserve Space for Enemy Y Position
00001A34                          1490  
00001A34                          1491  ENEMY_X_2       DS.L    01  ; Reserve Space for Enemy X Position
00001A38                          1492  ENEMY_Y_2       DS.L    01  ; Reserve Space for Enemy Y Position
00001A3C                          1493  
00001A3C                          1494  ENEMY_X_3       DS.L    01  ; Reserve Space for Enemy X Position
00001A40                          1495  ENEMY_Y_3       DS.L    01  ; Reserve Space for Enemy Y Position
00001A44                          1496  
00001A44                          1497  ENEMY_X_4       DS.L    01  ; Reserve Space for Enemy X Position
00001A48                          1498  ENEMY_Y_4       DS.L    01  ; Reserve Space for Enemy Y Position
00001A4C                          1499  
00001A4C                          1500  ENEMY_X_5       DS.L    01  ; Reserve Space for Enemy X Position
00001A50                          1501  ENEMY_Y_5       DS.L    01  ; Reserve Space for Enemy Y Position
00001A54                          1502  
00001A54                          1503  ENEMY_X_6       DS.L    01  ; Reserve Space for Enemy X Position
00001A58                          1504  ENEMY_Y_6       DS.L    01  ; Reserve Space for Enemy Y Position
00001A5C                          1505  
00001A5C                          1506  ENEMY_X_7       DS.L    01  ; Reserve Space for Enemy X Position
00001A60                          1507  ENEMY_Y_7       DS.L    01  ; Reserve Space for Enemy Y Position
00001A64                          1508  
00001A64                          1509  ENEMY_X_8       DS.L    01  ; Reserve Space for Enemy X Position
00001A68                          1510  ENEMY_Y_8       DS.L    01  ; Reserve Space for Enemy Y Position
00001A6C                          1511  
00001A6C                          1512  ENEMY_X_9       DS.L    01  ; Reserve Space for Enemy X Position
00001A70                          1513  ENEMY_Y_9       DS.L    01  ; Reserve Space for Enemy Y Position
00001A74                          1514  
00001A74                          1515  ENEMY_X10       DS.L    01  ; Reserve Space for Enemy X Position
00001A78                          1516  ENEMY_Y10       DS.L    01  ; Reserve Space for Enemy Y Position
00001A7C                          1517  *-----------------------------------------------------------
00001A7C                          1518  * Section       : Sounds
00001A7C                          1519  * Description   : Sound files, which are then loaded and given
00001A7C                          1520  * an address in memory, they take a longtime to process and play
00001A7C                          1521  * so keep the files small. Used https://voicemaker.in/ to 
00001A7C                          1522  * generate and Audacity to convert MP3 to WAV
00001A7C                          1523  *-----------------------------------------------------------
00001A7C= 6F 70 70 73 2E 77 ...   1524  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001A85                          1525  
00001A85                          1526      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BOTTOM_Y_LINE       174
CHECK_COLLISIONS_1  168A
CHECK_COLLISIONS_2  1700
CHECK_COLLISIONS_3  1776
CHECK_COLLISIONS_4  17EC
CHECK_COLLISIONS_5  1862
CHECK_COLLISIONS_6  18D8
COLLISION           194E
COLLISION_CHECK_DONE_1  16F0
COLLISION_CHECK_DONE_2  1766
COLLISION_CHECK_DONE_3  17DC
COLLISION_CHECK_DONE_4  1852
COLLISION_CHECK_DONE_5  18C8
COLLISION_CHECK_DONE_6  193E
CURRENT_KEY         1A0C
DOWN                1284
DOWNARROW           28
DOWN_MSG            19E3
DRAW                1336
DRAW_BOTTOM_LINE    138C
DRAW_ENEMY_1        153A
DRAW_ENEMY_2        1572
DRAW_ENEMY_3        15AA
DRAW_ENEMY_4        15E2
DRAW_ENEMY_5        161A
DRAW_ENEMY_6        1652
DRAW_PLAYER         1502
DRAW_PLYR_DATA      13B0
DRAW_TOP_LINE       1370
ENEMY_X10           1A74
ENEMY_X_1           1A2C
ENEMY_X_2           1A34
ENEMY_X_3           1A3C
ENEMY_X_4           1A44
ENEMY_X_5           1A4C
ENEMY_X_6           1A54
ENEMY_X_7           1A5C
ENEMY_X_8           1A64
ENEMY_X_9           1A6C
ENEMY_Y10           1A78
ENEMY_Y_1           1A30
ENEMY_Y_2           1A38
ENEMY_Y_3           1A40
ENEMY_Y_4           1A48
ENEMY_Y_5           1A50
ENEMY_Y_6           1A58
ENEMY_Y_7           1A60
ENEMY_Y_8           1A68
ENEMY_Y_9           1A70
ENMY_H_INIT         14
ENMY_W_INIT         14
ESCAPE              1B
EXIT                19A8
EXIT_MSG            19FC
GAME                112A
GAMELOOP            112A
GND_FALSE           0
GND_TRUE            1
HEALTH_MSG          19F2
HEALTH_VALUE        1A1C
INITIALISE          1000
INPUT               1178
IS_PLAYER_ON_GND    1490
JMP_INDEX           1
KEYCODE_MSG         19D1
LIME                FF00
MOVE_ENEMY_1        12A6
MOVE_ENEMY_2        12BE
MOVE_ENEMY_3        12AE
MOVE_ENEMY_4        12C6
MOVE_ENEMY_5        12B6
MOVE_ENEMY_6        12CE
OPPS_INDEX          2
OPPS_LOAD           14E4
OPPS_WAV            1A7C
OUT_OF_BOUNDS_DOWN  129A
OUT_OF_BOUNDS_UP    127A
PLAYER_SCORE        1A18
PLAYER_X            1A10
PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W  168E
PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W  1704
PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W  177A
PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W  17F0
PLAYER_X_LTE_TO_ENEMY_X_5_PLUS_W  1866
PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W  18DC
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  16A8
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  171E
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  1794
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  180A
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5  1880
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  18F6
PLAYER_Y            1A14
PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  16BC
PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  1732
PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  17A8
PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  181E
PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H  1894
PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  190A
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  16D6
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  174C
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  17C2
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  1838
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5  18AE
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  1924
PLAY_OPPS           14F6
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1A24
PLYR_H_INIT         14
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         1A28
PLYR_VELOCITY       1A20
PLYR_W_INIT         14
POINTS              1
PROCESS_INPUT       1196
RED                 FF
RESET_ENEMY_POSITION_1  12D6
RESET_ENEMY_POSITION_2  12E6
RESET_ENEMY_POSITION_3  12F6
RESET_ENEMY_POSITION_4  1306
RESET_ENEMY_POSITION_5  1316
RESET_ENEMY_POSITION_6  1326
RUN_INDEX           0
SCORE_MSG           19C8
SCREEN_H            1A0A
SCREEN_W            1A08
SET_OFF_GROUND      14D8
SET_ON_GROUND       14B0
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
TOP_Y_LINE          61
UP                  1264
UPARROW             26
UPDATE_1            11C8
UPDATE_2            11E2
UPDATE_3            11FC
UPDATE_4            1216
UPDATE_5            1230
UPDATE_6            124A
UP_MSG              19DC
WAIT                116A
WHITE               FFFFFF
X_MSG               19EC
Y_MSG               19EF
_00000000           19A6
