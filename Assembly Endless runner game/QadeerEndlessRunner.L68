00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 08/03/2023 00:59:16

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner 
00000000                             3  * Written by : Qadeer Hussain C00270632
00000000                             4  * Date       : 08/03/2023
00000000                             5  * Description: Endless Runner Project 
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  *-----------------------------------------------------------
00001000                            10  * Section       : Trap Codes
00001000                            11  * Description   : Trap Codes used throughout StarterKit 
00001000                            12  *-----------------------------------------------------------
00001000                            13  * Trap CODES
00001000  =00000021                 14  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 15  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            16                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 17  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 18  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 19  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            20      
00001000  =00000009                 21  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            22  
00001000                            23  *-----------------------------------------------------------
00001000                            24  * Section       : Charater Setup
00001000                            25  * Description   : Size of Player and Enemy and properties
00001000                            26  * of these characters e.g Starting Positions and Sizes
00001000                            27  *-----------------------------------------------------------
00001000  =00000014                 28  PLYR_W_INIT EQU         20          ; Players initial Width
00001000  =00000014                 29  PLYR_H_INIT EQU         20          ; Players initial Height
00001000                            30   
00001000  =00000002                 31  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            32  
00001000  =00000014                 33  ENMY_W_INIT EQU         20          ; Enemy initial Width
00001000  =00000014                 34  ENMY_H_INIT EQU         20          ; Enemy initial Height
00001000                            35  
00001000  =0000006C                 36  TOP_Y_LINE  EQU         108         ; Top Y line start point
00001000  =00000156                 37  BOTTOM_Y_LINE  EQU      342         ; Bottom Y line start point
00001000                            38  *-----------------------------------------------------------
00001000                            39  * Section       : Game Stats
00001000                            40  * Description   : Points, Health
00001000                            41  *-----------------------------------------------------------
00001000  =00000001                 42  POINTS      EQU         01          ; Points added
00001000  =00000000                 43  ENEMY_MOVEMENT  EQU  00
00001000                            44  *-----------------------------------------------------------
00001000                            45  * Section       : Keyboard Keys
00001000                            46  * Description   : Spacebar and Escape or two functioning keys
00001000                            47  * Spacebar to JUMP and Escape to Exit Game
00001000                            48  *-----------------------------------------------------------
00001000  =0000001B                 49  ESCAPE      EQU         $1B         ; Escape ASCII Keycode 
00001000  =00000026                 50  UPARROW     EQU         $26         ; UP key ASCII Keycode
00001000  =00000028                 51  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode   
00001000                            52  *-----------------------------------------------------------
00001000                            53  * Subroutine    : Initialise
00001000                            54  * Description   : Initialise game data into memory such as 
00001000                            55  * sounds and screen size
00001000                            56  *-----------------------------------------------------------
00001000                            57  INITIALISE:
00001000                            58      ; Initialise Sounds
00001000  6100 04F8                 59      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
00001004                            60  
00001004                            61      ; Screen Size
00001004  103C 0021                 62      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001008  7200                      63      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
0000100A  4E4F                      64      TRAP    #15                     ; interpret D0 and D1 for screen size
0000100C  33C1 00001A8C             65      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
00001012  4841                      66      SWAP    D1                      ; Swap top and bottom word to retrive screen size
00001014  33C1 00001A8A             67      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
0000101A                            68  
0000101A                            69      ; Place the Player at the center of the screen
0000101A  4281                      70      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000101C  23FC 00000000 00001A92    71      MOVE.L  #00,         PLAYER_X   ; Players X set to 0 Position
00001026                            72  
00001026  4281                      73      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001028  3239 00001A8C             74      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000102E  323C 00D7                 75      MOVE.W  #215,       D1          ; Set 225 the spawn for enemy and move to D1
00001032  23C1 00001A96             76      MOVE.L  D1,         PLAYER_Y    ; Move D1 to Players Y Position
00001038                            77  
00001038                            78      ; Initialise Player Score
00001038  4281                      79      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000103A  7200                      80      MOVE.L  #00,         D1         ; Init Score
0000103C  23C1 00001A9A             81      MOVE.L  D1,         PLAYER_SCORE
00001042                            82      
00001042                            83      ;Initialize Health
00001042  4281                      84      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001044  7264                      85      MOVE.L  #100,       D1          ; Set 100 as the health and move it to D1
00001046  23C1 00001A9E             86      MOVE.L  D1,         HEALTH_VALUE ; Move D1 to Health Value
0000104C                            87      
0000104C                            88      ; Initial Position for Enemy 1   
0000104C  4281                      89      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104E  3239 00001A8A             90      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001054  23C1 00001AA2             91      MOVE.L  D1,         ENEMY_X_1   ; Enemy X Position
0000105A                            92  
0000105A  4281                      93      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105C  3239 00001A8C             94      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001062  323C 006E                 95      MOVE.W  #110,       D1          ; Set 110 as the spawn and move it to D1
00001066  23C1 00001AA6             96      MOVE.L  D1,         ENEMY_Y_1   ; Move D1 to Enemy y 1
0000106C                            97  
0000106C                            98      ; Initial Position for Enemy 2   
0000106C  4281                      99      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  3239 00001A8A            100      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001074  23C1 00001AAA            101      MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
0000107A                           102  
0000107A  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000107C  3239 00001A8C            104      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001082  323C 0091                105      MOVE.W  #145,       D1          ; Set 145 as the spawn and move it to D1
00001086  23C1 00001AAE            106      MOVE.L  D1,         ENEMY_Y_2   ; Move D1 to Enemy Y 2
0000108C                           107      
0000108C                           108      ; Initial Position for Enemy 3
0000108C  4281                     109      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000108E  3239 00001A8A            110      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001094  23C1 00001AB2            111      MOVE.L  D1,         ENEMY_X_3     ; Enemy X Position
0000109A                           112      
0000109A  4281                     113      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000109C  3239 00001A8C            114      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010A2  323C 00B4                115      MOVE.W  #180,       D1          ; Set 180 as the spawn and move it to D1
000010A6  23C1 00001AB6            116      MOVE.L  D1,         ENEMY_Y_3   ; Move D1 to Enemy Y 3
000010AC                           117          
000010AC                           118      ; Initial Position for Enemy 4   
000010AC  4281                     119      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010AE  3239 00001A8A            120      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010B4  23C1 00001ABA            121      MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
000010BA                           122  
000010BA  4281                     123      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010BC  3239 00001A8C            124      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010C2  323C 00D7                125      MOVE.W  #215,       D1          ; Set 215 as the spawn and move it to D1
000010C6  23C1 00001ABE            126      MOVE.L  D1,         ENEMY_Y_4   ; Move D1 to Enemy Y 4
000010CC                           127  
000010CC                           128      ; Initial Position for Enemy 5   
000010CC  4281                     129      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010CE  3239 00001A8A            130      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010D4  23C1 00001AC2            131      MOVE.L  D1,         ENEMY_X_5   ; Enemy X Position
000010DA                           132  
000010DA  4281                     133      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010DC  3239 00001A8C            134      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010E2  323C 00FA                135      MOVE.W  #250,       D1          ; Set 250 as the spawn and move it to D1
000010E6  23C1 00001AC6            136      MOVE.L  D1,         ENEMY_Y_5   ; Move D1 to Enemy Y 5
000010EC                           137      
000010EC                           138      ; Initial Position for Enemy 6 
000010EC  4281                     139      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010EE  3239 00001A8A            140      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010F4  23C1 00001ACA            141      MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
000010FA                           142  
000010FA  4281                     143      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FC  3239 00001A8C            144      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001102  323C 011D                145      MOVE.W  #285,       D1          ; Set 285 as the spawn and move it to D1
00001106  23C1 00001ACE            146      MOVE.L  D1,         ENEMY_Y_6   ; Move D1 to Enemy Y 6
0000110C                           147      
0000110C                           148      ; Initial Position for Enemy 7 
0000110C  4281                     149      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000110E  3239 00001A8A            150      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001114  23C1 00001AD2            151      MOVE.L  D1,         ENEMY_X_7   ; Enemy X Position
0000111A                           152  
0000111A  4281                     153      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000111C  3239 00001A8C            154      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001122  323C 0140                155      MOVE.W  #320,       D1          ; Set 320 as the spawn and move it to D1
00001126  23C1 00001AD6            156      MOVE.L  D1,         ENEMY_Y_7   ; Move D1 to Enemy Y 7
0000112C                           157          
0000112C                           158      ; Enable the screen back buffer(see easy 68k help)
0000112C  103C 005C                159      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001130  123C 0011                160      MOVE.B  #17,        D1          ; Combine Tasks
00001134  4E4F                     161      TRAP    #15                     ; Trap (Perform action)
00001136                           162  
00001136                           163      ; Clear the screen (see easy 68k help)
00001136  103C 000B                164      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000113A  323C FF00                165      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
0000113E  4E4F                     166      TRAP    #15                     ; Trap (Perform action)
00001140                           167  
00001140                           168  *-----------------------------------------------------------
00001140                           169  * Subroutine    : Game
00001140                           170  * Description   : Game including main GameLoop. GameLoop is like
00001140                           171  * a while loop in that it runs forever until interupted
00001140                           172  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001140                           173  *-----------------------------------------------------------
00001140                           174  GAME:
00001140                           175  
00001140                           176  GAMELOOP:
00001140  7008                     177      MOVEQ   #08,D0                  ; Get time in 1/100 seconds
00001142  4E4F                     178      TRAP    #15
00001144                           179  
00001144  2F01                     180      MOVE.L  D1,-(SP)                ; Push time on the stack
00001146                           181      
00001146                           182      ; Main Gameloop
00001146  6100 004E                183      BSR     INPUT                   ; Check Keyboard Input
0000114A  6100 009A                184      BSR     UPDATE_1                ; Update positions 1
0000114E  6100 00B0                185      BSR     UPDATE_2                ; Update positions 2
00001152  6100 00C6                186      BSR     UPDATE_3                ; Update positions 3
00001156  6100 00DC                187      BSR     UPDATE_4                ; Update positions 4
0000115A  6100 00F2                188      BSR     UPDATE_5                ; Update positions 5
0000115E  6100 0108                189      BSR     UPDATE_6                ; Update positions 6
00001162  6100 011E                190      BSR     UPDATE_7                ; Update positions 7
00001166  6100 0570                191      BSR     CHECK_COLLISIONS_1      ; Check for Collisions 1
0000116A  6100 05D2                192      BSR     CHECK_COLLISIONS_2      ; Check for Collisions 2
0000116E  6100 0634                193      BSR     CHECK_COLLISIONS_3      ; Check for Collisions 3
00001172  6100 0696                194      BSR     CHECK_COLLISIONS_4      ; Check for Collisions 4
00001176  6100 06F8                195      BSR     CHECK_COLLISIONS_5      ; Check for Collisions 5
0000117A  6100 075A                196      BSR     CHECK_COLLISIONS_6      ; Check for Collisions 6
0000117E  6100 07BC                197      BSR     CHECK_COLLISIONS_7      ; Check for Collisions 7
00001182  6100 0202                198      BSR     DRAW                    ; Draw the Scene
00001186                           199      
00001186  2E1F                     200      MOVE.L  (SP)+,D7                ; Move stack to D7
00001188                           201  WAIT:
00001188  7008                     202      MOVEQ   #8,D0                   ; Mve this trap 8 to D0
0000118A  4E4F                     203      TRAP    #15
0000118C  9287                     204      SUB.L   D7,D1                   ; Subtract previous time from current time
0000118E  B23C 0002                205      CMP.B   #02,D1                  ; Compare the the subtracted time
00001192  6BF4                     206      BMI.S   WAIT                    ; Loop if time not up yet
00001194                           207  
00001194  60AA                     208      BRA     GAMELOOP                ; Loop back to Game loop
00001196                           209  *-----------------------------------------------------------
00001196                           210  * Subroutine    : Input
00001196                           211  * Description   : Process Keyboard Input
00001196                           212  *-----------------------------------------------------------
00001196                           213  INPUT:
00001196                           214      ; Process Input
00001196  4281                     215      CLR.L   D1                      ; Clear Data Register
00001198  103C 0013                216      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
0000119C  4E4F                     217      TRAP    #15                     ; Trap (Perform action)
0000119E  1401                     218      MOVE.B  D1,         D2          ; Move last key D1 to D2
000011A0  B43C 0000                219      CMP.B   #00,        D2          ; Key is pressed
000011A4  6700 000E                220      BEQ     PROCESS_INPUT           ; Process Key
000011A8  4E4F                     221      TRAP    #15                     ; Trap for Last Key
000011AA                           222      ; Check if key still pressed
000011AA  B23C 00FF                223      CMP.B   #$FF,       D1          ; Is it still pressed
000011AE  6700 0004                224      BEQ     PROCESS_INPUT           ; Process Last Key
000011B2  4E75                     225      RTS                             ; Return to subroutine
000011B4                           226  *-----------------------------------------------------------
000011B4                           227  * Subroutine    : Process Input
000011B4                           228  * Description   : Branch based on keys pressed
000011B4                           229  *-----------------------------------------------------------
000011B4                           230  PROCESS_INPUT:
000011B4  23C2 00001A8E            231      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000011BA  0CB9 0000001B 00001A8E   232      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000011C4  6700 084A                233      BEQ     EXIT                    ; Exit if Escape
000011C8  0CB9 00000026 00001A8E   234      CMP.L   #UPARROW,  CURRENT_KEY  ; Is Current Key UP
000011D2  6700 00C8                235      BEQ     UP                      ; Up
000011D6  0CB9 00000028 00001A8E   236      CMP.L   #DOWNARROW,CURRENT_KEY  ; Is Current Key Down
000011E0  6700 00DA                237      BEQ     DOWN                    ; Down
000011E4  4E75                     238      RTS                             ; Return to subroutine
000011E6                           239  *-----------------------------------------------------------
000011E6                           240  * Subroutine    : Update
000011E6                           241  * Description   : Main update loop update Player and Enemies
000011E6                           242  *-----------------------------------------------------------  
000011E6                           243  UPDATE_1:
000011E6                           244      ; Move the Enemy
000011E6  4281                     245      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011E8  4281                     246      CLR.L   D1                      ; Clear the contents of D0
000011EA  2239 00001AA2            247      MOVE.L  ENEMY_X_1,  D1          ; Move the Enemy X Position to D0
000011F0  B2BC 00000000            248      CMP.L   #00,        D1
000011F6  6F00 011E                249      BLE     RESET_ENEMY_POSITION_1  ; Reset Enemy if off Screen
000011FA  6000 00E2                250      BRA     MOVE_ENEMY_1
000011FE  4E75                     251      RTS        
00001200                           252  
00001200                           253  UPDATE_2:
00001200                           254      ; Move the Enemy
00001200  4281                     255      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001202  4281                     256      CLR.L   D1                      ; Clear the contents of D0
00001204  2239 00001AAA            257      MOVE.L  ENEMY_X_2,  D1          ; Move the Enemy X Position to D0
0000120A  B2BC 00000000            258      CMP.L   #00,        D1
00001210  6F00 0114                259      BLE     RESET_ENEMY_POSITION_2  ; Reset Enemy if off Screen
00001214  6000 00E8                260      BRA     MOVE_ENEMY_2
00001218  4E75                     261      RTS   
0000121A                           262      
0000121A                           263  UPDATE_3:
0000121A                           264      ; Move the Enemy
0000121A  4281                     265      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000121C  4281                     266      CLR.L   D1                      ; Clear the contents of D0
0000121E  2239 00001AB2            267      MOVE.L  ENEMY_X_3,  D1          ; Move the Enemy X Position to D0
00001224  B2BC 00000000            268      CMP.L   #00,        D1
0000122A  6F00 010A                269      BLE     RESET_ENEMY_POSITION_3  ; Reset Enemy if off Screen
0000122E  6000 00B6                270      BRA     MOVE_ENEMY_3
00001232  4E75                     271      RTS   
00001234                           272  
00001234                           273  UPDATE_4:
00001234                           274      ; Move the Enemy
00001234  4281                     275      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001236  4281                     276      CLR.L   D1                      ; Clear the contents of D0
00001238  2239 00001ABA            277      MOVE.L  ENEMY_X_4,  D1          ; Move the Enemy X Position to D0
0000123E  B2BC 00000000            278      CMP.L   #00,        D1
00001244  6F00 0100                279      BLE     RESET_ENEMY_POSITION_4  ; Reset Enemy if off Screen
00001248  6000 00BC                280      BRA     MOVE_ENEMY_4
0000124C  4E75                     281      RTS   
0000124E                           282  
0000124E                           283  UPDATE_5:
0000124E                           284      ; Move the Enemy
0000124E  4281                     285      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001250  4281                     286      CLR.L   D1                      ; Clear the contents of D0
00001252  2239 00001AC2            287      MOVE.L  ENEMY_X_5,  D1          ; Move the Enemy X Position to D0
00001258  B2BC 00000000            288      CMP.L   #00,        D1
0000125E  6F00 00F6                289      BLE     RESET_ENEMY_POSITION_5  ; Reset Enemy if off Screen
00001262  6000 008A                290      BRA     MOVE_ENEMY_5            ; Move the Enemy
00001266  4E75                     291      RTS                             ; Return to subroutine
00001268                           292      
00001268                           293  UPDATE_6:
00001268                           294      ; Move the Enemy
00001268  4281                     295      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000126A  4281                     296      CLR.L   D1                      ; Clear the contents of D0
0000126C  2239 00001ACA            297      MOVE.L  ENEMY_X_6,  D1          ; Move the Enemy X Position to D0
00001272  B2BC 00000000            298      CMP.L   #00,        D1
00001278  6F00 00EC                299      BLE     RESET_ENEMY_POSITION_6  ; Reset Enemy if off Screen
0000127C  6000 0090                300      BRA     MOVE_ENEMY_6
00001280  4E75                     301      RTS 
00001282                           302  
00001282                           303  UPDATE_7:
00001282                           304      ; Move the Enemy
00001282  4281                     305      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001284  4281                     306      CLR.L   D1                      ; Clear the contents of D0
00001286  2239 00001AD2            307      MOVE.L  ENEMY_X_7,  D1          ; Move the Enemy X Position to D0
0000128C  B2BC 00000000            308      CMP.L   #00,        D1
00001292  6F00 00E2                309      BLE     RESET_ENEMY_POSITION_7  ; Reset Enemy if off Screen
00001296  6000 005E                310      BRA     MOVE_ENEMY_7
0000129A  4E75                     311      RTS   
0000129C                           312  *-----------------------------------------------------------
0000129C                           313  * Subroutine    : UP
0000129C                           314  * Description   : Move the enemy up 2 frames
0000129C                           315  * By: Qadeer Hussain
0000129C                           316  *-----------------------------------------------------------
0000129C                           317  UP:  
0000129C  57B9 00001A96            318      SUB.L   #3, PLAYER_Y
000012A2                           319      ; Check if player is out of bounds
000012A2  0CB9 0000006E 00001A96   320     CMP.L   #110, PLAYER_Y ; Stop the player from moving up anymore when player Y valye goes to 110
000012AC  6D00 0004                321      BLT     OUT_OF_BOUNDS_UP
000012B0  4E75                     322      RTS
000012B2                           323      
000012B2                           324  OUT_OF_BOUNDS_UP:
000012B2                           325      ; Player is out of bounds, move back into screen
000012B2  7403                     326      MOVE.L  #3, D2   ; set D2 to the amount to move
000012B4  D5B9 00001A96            327      ADD.L   D2, PLAYER_Y  ; move player down
000012BA  4E75                     328      RTS
000012BC                           329  *-----------------------------------------------------------
000012BC                           330  * Subroutine    : DOWN
000012BC                           331  * Description   : Move the enemy down 2 frames
000012BC                           332  * By: Qadeer Hussain
000012BC                           333  *-----------------------------------------------------------
000012BC                           334  DOWN:
000012BC  56B9 00001A96            335      ADD.L   #3, PLAYER_Y 
000012C2                           336      ; Check if player is out of bounds
000012C2  0CB9 00000142 00001A96   337      CMP.L   #322, PLAYER_Y  ; Stop the player from moving down anymore when player Y valye goes to 322
000012CC  6C00 0004                338      BGE     OUT_OF_BOUNDS_DOWN
000012D0  4E75                     339      RTS 
000012D2                           340  
000012D2                           341  OUT_OF_BOUNDS_DOWN:
000012D2                           342      ; Player is out of bounds, move back into screen
000012D2  7403                     343      MOVE.L  #3, D2  ; set D2 to the amount to move
000012D4  4482                     344      NEG.L   D2      ; negate D2 to move upwards
000012D6  D5B9 00001A96            345      ADD.L   D2, PLAYER_Y  ; move player up
000012DC  4E75                     346      RTS
000012DE                           347  *-----------------------------------------------------------
000012DE                           348  * Subroutine    : Move Enemy
000012DE                           349  * Description   : Move Enemy Right to Left
000012DE                           350  *-----------------------------------------------------------
000012DE                           351  MOVE_ENEMY_1:
000012DE  5BB9 00001AA2            352      SUB.L   #05,    ENEMY_X_1   ; Move enemy by X Value
000012E4  4E75                     353      RTS
000012E6                           354       
000012E6                           355  MOVE_ENEMY_3:
000012E6  5BB9 00001AB2            356      SUB.L   #05,    ENEMY_X_3   ; Move enemy by X Value
000012EC  4E75                     357      RTS
000012EE                           358  
000012EE                           359  MOVE_ENEMY_5:
000012EE  5BB9 00001AC2            360      SUB.L    #05,   ENEMY_X_5   ; Move enemy by X Value
000012F4  4E75                     361      RTS
000012F6                           362      
000012F6                           363  MOVE_ENEMY_7:
000012F6  5BB9 00001AD2            364      SUB.L    #05,   ENEMY_X_7   ; Move enemy by X Value
000012FC  4E75                     365      RTS
000012FE                           366       
000012FE                           367  MOVE_ENEMY_2:
000012FE  57B9 00001AAA            368       SUB.L   #03,   ENEMY_X_2   ; Move enemy by X Value
00001304  4E75                     369       RTS
00001306                           370       
00001306                           371  MOVE_ENEMY_4:
00001306  57B9 00001ABA            372       SUB.L   #03,   ENEMY_X_4   ; Move enemy by X Value
0000130C  4E75                     373       RTS
0000130E                           374      
0000130E                           375  MOVE_ENEMY_6:
0000130E  57B9 00001ACA            376       SUB.L   #03,   ENEMY_X_6   ; Move enemy by X Value
00001314  4E75                     377       RTS  
00001316                           378  *-----------------------------------------------------------
00001316                           379  * Subroutine    : Reset Enemy
00001316                           380  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001316                           381  *----------------------------------------------------------- 
00001316                           382  RESET_ENEMY_POSITION_1:             ; Reset enemy 1
00001316  4281                     383      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001318  3239 00001A8A            384      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000131E  23C1 00001AA2            385      MOVE.L  D1,         ENEMY_X_1   ; Enemy X Position
00001324  4E75                     386      RTS
00001326                           387  
00001326                           388  RESET_ENEMY_POSITION_2:             ; Reset enemy 1
00001326  4281                     389      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001328  3239 00001A8A            390      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000132E  23C1 00001AAA            391      MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
00001334  4E75                     392      RTS
00001336                           393      
00001336                           394  RESET_ENEMY_POSITION_3:             ; Reset enemy 1
00001336  4281                     395      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001338  3239 00001A8A            396      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000133E  23C1 00001AB2            397      MOVE.L  D1,         ENEMY_X_3   ; Enemy X Position
00001344  4E75                     398      RTS
00001346                           399      
00001346                           400  RESET_ENEMY_POSITION_4:             ; Reset enemy 1
00001346  4281                     401      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001348  3239 00001A8A            402      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000134E  23C1 00001ABA            403      MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
00001354  4E75                     404      RTS
00001356                           405      
00001356                           406  RESET_ENEMY_POSITION_5:             ; Reset enemy 1
00001356  4281                     407      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001358  3239 00001A8A            408      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000135E  23C1 00001AC2            409      MOVE.L  D1,         ENEMY_X_5   ; Enemy X Position
00001364  4E75                     410      RTS
00001366                           411      
00001366                           412  RESET_ENEMY_POSITION_6:             ; Reset enemy 1
00001366  4281                     413      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001368  3239 00001A8A            414      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000136E  23C1 00001ACA            415      MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
00001374  4E75                     416      RTS
00001376                           417      
00001376                           418  RESET_ENEMY_POSITION_7:             ; Reset enemy 1
00001376  4281                     419      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001378  3239 00001A8A            420      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000137E  23C1 00001AD2            421      MOVE.L  D1,         ENEMY_X_7   ; Enemy X Position
00001384  4E75                     422      RTS
00001386                           423  *-----------------------------------------------------------
00001386                           424  * Subroutine    : Draw
00001386                           425  * Description   : Draw Screen
00001386                           426  *-----------------------------------------------------------
00001386                           427  DRAW: 
00001386                           428      ; Enable back buffer
00001386  103C 005E                429      MOVE.B  #94,        D0
0000138A  4E4F                     430      TRAP    #15
0000138C                           431  
0000138C                           432      ; Clear the screen
0000138C  103C 000B                433      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001390  323C FF00                434      MOVE.W  #$FF00,     D1          ; Clear contents
00001394  4E4F                     435      TRAP    #15                     ; Trap (Perform action)
00001396                           436  
00001396  6100 006C                437      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000139A  6100 017C                438      BSR     DRAW_PLAYER             ; Draw Player
0000139E  6100 02C8                439      BSR     DRAW_ENEMY_6            ; Draw Enemy No.6
000013A2  6100 02FC                440      BSR     DRAW_ENEMY_7            ; Draw Enemy No.7
000013A6  6100 01A8                441      BSR     DRAW_ENEMY_1            ; Draw Enemy No.1
000013AA  6100 01DC                442      BSR     DRAW_ENEMY_2            ; Draw Enemy No.2
000013AE  6100 0210                443      BSR     DRAW_ENEMY_3            ; Draw Enemy No.3
000013B2  6100 0244                444      BSR     DRAW_ENEMY_4            ; Draw Enemy No.4
000013B6  6100 0278                445      BSR     DRAW_ENEMY_5            ; Draw Enemy No.5
000013BA  6100 0024                446      BSR     DRAW_BOTTOM_LINE        ; Draw bottom line
000013BE  6100 0004                447      BSR     DRAW_TOP_LINE           ; Draw top line
000013C2                           448      
000013C2  4E75                     449      RTS                             ; Return to subroutine
000013C4                           450  DRAW_TOP_LINE:
000013C4                           451      
000013C4  223C 0000FF00            452      MOVE.L  #LIME,       D1         ; Set color
000013CA  7050                     453      MOVE.L  #80,         D0         ; Move the pen colour trap to D0   
000013CC  4E4F                     454      TRAP    #15
000013CE                           455      
000013CE  4281                     456      CLR.L   D1
000013D0  746C                     457      MOVE.L  #TOP_Y_LINE,D2          ; Move the Top Y to D2
000013D2  3639 00001A8A            458      MOVE.W  SCREEN_W,  D3           ; Move the screen_W which will be the length of the line to D3
000013D8  786C                     459      MOVE.L  #TOP_Y_LINE,D4          ; Move the Top Y to D4
000013DA                           460      
000013DA  7054                     461      MOVE.L  #84,       D0           ; Trap to draw the line
000013DC  4E4F                     462      TRAP    #15
000013DE                           463      
000013DE  4E75                     464      RTS             
000013E0                           465  DRAW_BOTTOM_LINE:
000013E0                           466      
000013E0  223C 0000FF00            467      MOVE.L  #LIME,       D1         ; Set color
000013E6  7050                     468      MOVE.L  #80,         D0         ; Move the pen colour trap to D0
000013E8  4E4F                     469      TRAP    #15
000013EA                           470      
000013EA  4281                     471      CLR.L   D1
000013EC  243C 00000156            472      MOVE.L  #BOTTOM_Y_LINE,D2       ; Move the Bottom Y value to D2
000013F2  3639 00001A8A            473      MOVE.W  SCREEN_W,  D3           ; Move the screen_W which will be the length of the line to D3
000013F8  283C 00000156            474      MOVE.L  #BOTTOM_Y_LINE,D4       ; Move the Bottom Y value to D4
000013FE                           475      
000013FE  7054                     476      MOVE.L  #84,       D0           ; Trap to draw the line
00001400  4E4F                     477      TRAP    #15 
00001402                           478      
00001402  4E75                     479      RTS    
00001404                           480  *-----------------------------------------------------------
00001404                           481  * Subroutine    : Draw Player Data
00001404                           482  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001404                           483  *-----------------------------------------------------------
00001404                           484  DRAW_PLYR_DATA:
00001404  4281                     485      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001406                           486  
00001406                           487      ; Player Score Message
00001406  103C 000B                488      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000140A  323C 0201                489      MOVE.W  #$0201,     D1          ; Col 02, Row 01
0000140E  4E4F                     490      TRAP    #15                     ; Trap (Perform action)
00001410  43F9 00001A30            491      LEA     SCORE_MSG,  A1          ; Score Message
00001416  303C 000D                492      MOVE    #13,        D0          ; No Line feed
0000141A  4E4F                     493      TRAP    #15                     ; Trap (Perform action)
0000141C                           494  
0000141C                           495      ; Player Score Value
0000141C  103C 000B                496      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001420  323C 0901                497      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00001424  4E4F                     498      TRAP    #15                     ; Trap (Perform action)
00001426  103C 0003                499      MOVE.B  #03,        D0          ; Display number at D1.L
0000142A  2239 00001A9A            500      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001430  4E4F                     501      TRAP    #15                     ; Trap (Perform action)
00001432                           502      
00001432                           503      ; Health Message
00001432  103C 000B                504      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001436  323C 0203                505      MOVE.W  #$0203,     D1          ; Col 02, Row 03
0000143A  4E4F                     506      TRAP    #15                     ; Trap (Perform action)
0000143C  43F9 00001A5A            507      LEA     HEALTH_MSG, A1          ; Health Message
00001442  303C 000D                508      MOVE    #13,        D0          ; No Line feed
00001446  4E4F                     509      TRAP    #15                     ; Trap (Perform action)
00001448                           510      
00001448                           511      ; Health Value
00001448  103C 000B                512      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000144C  323C 0903                513      MOVE.W  #$0903,     D1          ; Col 09, Row 03
00001450  4E4F                     514      TRAP    #15                     ; Trap (Perform action)
00001452  103C 0003                515      MOVE.B  #03,        D0          ; Display number at D1.L
00001456  2239 00001A9E            516      MOVE.L  HEALTH_VALUE,D1         ; Move Health to D1.L
0000145C  4E4F                     517      TRAP    #15                     ; Trap (Perform action)
0000145E                           518      
0000145E                           519      ; Player X Message
0000145E  103C 000B                520      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001462  323C 0202                521      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001466  4E4F                     522      TRAP    #15                     ; Trap (Perform action)
00001468  43F9 00001A54            523      LEA     X_MSG,      A1          ; X Message
0000146E  303C 000D                524      MOVE    #13,        D0          ; No Line feed
00001472  4E4F                     525      TRAP    #15                     ; Trap (Perform action)
00001474                           526      
00001474                           527      ; Player X
00001474  103C 000B                528      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001478  323C 0502                529      MOVE.W  #$0502,     D1          ; Col 05, Row 02
0000147C  4E4F                     530      TRAP    #15                     ; Trap (Perform action)
0000147E  103C 0003                531      MOVE.B  #03,        D0          ; Display number at D1.L
00001482  2239 00001A92            532      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001488  4E4F                     533      TRAP    #15                     ; Trap (Perform action)
0000148A                           534      
0000148A                           535      ; Player Y Message
0000148A  103C 000B                536      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000148E  323C 1002                537      MOVE.W  #$1002,     D1          ; Col 10, Row 02
00001492  4E4F                     538      TRAP    #15                     ; Trap (Perform action)
00001494  43F9 00001A57            539      LEA     Y_MSG,      A1          ; Y Message
0000149A  303C 000D                540      MOVE    #13,        D0          ; No Line feed
0000149E  4E4F                     541      TRAP    #15                     ; Trap (Perform action)
000014A0                           542      
000014A0                           543      ; Player Y
000014A0  103C 000B                544      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014A4  323C 1202                545      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000014A8  4E4F                     546      TRAP    #15                     ; Trap (Perform action)
000014AA  103C 0003                547      MOVE.B  #03,        D0          ; Display number at D1.L
000014AE  2239 00001A96            548      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000014B4  4E4F                     549      TRAP    #15                     ; Trap (Perform action) 
000014B6                           550      
000014B6                           551      ; Show Keys Pressed
000014B6  103C 000B                552      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014BA  323C 2001                553      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000014BE  4E4F                     554      TRAP    #15                     ; Trap (Perform action)
000014C0  43F9 00001A39            555      LEA     KEYCODE_MSG, A1         ; Keycode
000014C6  303C 000D                556      MOVE    #13,        D0          ; No Line feed
000014CA  4E4F                     557      TRAP    #15                     ; Trap (Perform action)
000014CC                           558  
000014CC                           559      ; Show KeyCode
000014CC  103C 000B                560      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014D0  323C 3001                561      MOVE.W  #$3001,     D1          ; Col 30, Row 1
000014D4  4E4F                     562      TRAP    #15                     ; Trap (Perform action)    
000014D6  2239 00001A8E            563      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000014DC  103C 0003                564      MOVE.B  #03,        D0          ; Display the contents of D1
000014E0  4E4F                     565      TRAP    #15                     ; Trap (Perform action)
000014E2                           566      
000014E2                           567      ; Show Contols
000014E2  103C 000B                568      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014E6  323C 2017                569      MOVE.W  #$2017,     D1          ; Col 20, Row 19
000014EA  4E4F                     570      TRAP    #15                     ; Trap (Perform action)
000014EC  43F9 00001A64            571      LEA     CONTROLS,   A1        ; Keycode
000014F2  303C 000D                572      MOVE    #13,        D0          ; No Line feed
000014F6  4E4F                     573      TRAP    #15                     ; Trap (Perform action)
000014F8                           574  
000014F8  4E75                     575      RTS  
000014FA                           576  *-----------------------------------------------------------
000014FA                           577  * Subroutines   : Sound Load and Play
000014FA                           578  * Description   : Initialise game sounds into memory 
000014FA                           579  * Current Sounds are RUN, JUMP and Opps for Collision
000014FA                           580  *-----------------------------------------------------------
000014FA                           581  OPPS_LOAD:
000014FA  43F9 00001ADA            582      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
00001500  323C 0002                583      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001504  303C 0047                584      MOVE    #71,        D0          ; Load into memory
00001508  4E4F                     585      TRAP    #15                     ; Trap (Perform action)
0000150A  4E75                     586      RTS                             ; Return to subroutine
0000150C                           587  
0000150C                           588  PLAY_OPPS:
0000150C  323C 0002                589      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
00001510  303C 0048                590      MOVE    #72,        D0          ; Play Sound
00001514  4E4F                     591      TRAP    #15                     ; Trap (Perform action)
00001516  4E75                     592      RTS                             ; Return to subroutine
00001518                           593  *-----------------------------------------------------------
00001518                           594  * Subroutine    : Draw Player
00001518                           595  * Description   : Draw Player Square
00001518                           596  *-----------------------------------------------------------
00001518                           597  DRAW_PLAYER:
00001518                           598      ; Set Pixel Colors
00001518  223C 00FFFFFF            599      MOVE.L  #WHITE,     D1          ; Set Background color
0000151E  103C 0050                600      MOVE.B  #80,        D0          ; Task for Background Color
00001522  4E4F                     601      TRAP    #15                     ; Trap (Perform action)
00001524                           602  
00001524                           603      ; Set X, Y, Width and Height
00001524  2239 00001A92            604      MOVE.L  PLAYER_X,   D1          ; X
0000152A  2439 00001A96            605      MOVE.L  PLAYER_Y,   D2          ; Y
00001530  2639 00001A92            606      MOVE.L  PLAYER_X,   D3
00001536  0683 00000014            607      ADD.L   #PLYR_W_INIT,   D3      ; Width
0000153C  2839 00001A96            608      MOVE.L  PLAYER_Y,   D4 
00001542  0684 00000014            609      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001548                           610      
00001548                           611      ; Draw Player
00001548  103C 0057                612      MOVE.B  #87,        D0          ; Draw Player
0000154C  4E4F                     613      TRAP    #15                     ; Trap (Perform action)
0000154E  4E75                     614      RTS                             ; Return to subroutine
00001550                           615  
00001550                           616  *-----------------------------------------------------------
00001550                           617  * Subroutine    : Draw Enemy
00001550                           618  * Description   : Draw Enemy Square
00001550                           619  *-----------------------------------------------------------    
00001550                           620  DRAW_ENEMY_1:                       ; Draw Enemy No.1
00001550                           621      ; Set Pixel Colors
00001550  223C 000000FF            622      MOVE.L  #RED,       D1          ; Set Background color
00001556  103C 0050                623      MOVE.B  #80,        D0          ; Task for Background Color
0000155A  4E4F                     624      TRAP    #15                     ; Trap (Perform action)
0000155C                           625  
0000155C                           626      ; Set X, Y, Width and Height
0000155C  2239 00001AA2            627      MOVE.L  ENEMY_X_1,    D1        ; X
00001562  2439 00001AA6            628      MOVE.L  ENEMY_Y_1,    D2        ; Y
00001568  2639 00001AA2            629      MOVE.L  ENEMY_X_1,    D3
0000156E  0683 00000014            630      ADD.L   #ENMY_W_INIT, D3        ; Width
00001574  2839 00001AA6            631      MOVE.L  ENEMY_Y_1,    D4 
0000157A  0684 00000014            632      ADD.L   #ENMY_H_INIT, D4        ; Height
00001580                           633      
00001580                           634      ; Draw Enemy    
00001580  103C 0057                635      MOVE.B  #87,        D0          ; Draw Enemy
00001584  4E4F                     636      TRAP    #15                     ; Trap (Perform action)
00001586  4E75                     637      RTS                             ; Return to subroutine
00001588                           638  
00001588                           639  DRAW_ENEMY_2:                       ; Draw Enemy No.2
00001588                           640      ; Set Pixel Colors
00001588  223C 000000FF            641      MOVE.L  #RED,       D1          ; Set Background color
0000158E  103C 0050                642      MOVE.B  #80,        D0          ; Task for Background Color
00001592  4E4F                     643      TRAP    #15                     ; Trap (Perform action)
00001594                           644  
00001594                           645      ; Set X, Y, Width and Height
00001594  2239 00001AAA            646      MOVE.L  ENEMY_X_2,    D1        ; X
0000159A  2439 00001AAE            647      MOVE.L  ENEMY_Y_2,    D2        ; Y
000015A0  2639 00001AAA            648      MOVE.L  ENEMY_X_2,    D3
000015A6  0683 00000014            649      ADD.L   #ENMY_W_INIT, D3        ; Width
000015AC  2839 00001AAE            650      MOVE.L  ENEMY_Y_2,    D4 
000015B2  0684 00000014            651      ADD.L   #ENMY_H_INIT, D4        ; Height
000015B8                           652      
000015B8                           653      ; Draw Enemy    
000015B8  103C 0057                654      MOVE.B  #87,        D0          ; Draw Enemy
000015BC  4E4F                     655      TRAP    #15                     ; Trap (Perform action)
000015BE  4E75                     656      RTS                             ; Return to subroutine
000015C0                           657              
000015C0                           658  DRAW_ENEMY_3:                       ; Draw Enemy No.3
000015C0                           659      ; Set Pixel Colors
000015C0  223C 000000FF            660      MOVE.L  #RED,       D1          ; Set Background color
000015C6  103C 0050                661      MOVE.B  #80,        D0          ; Task for Background Color
000015CA  4E4F                     662      TRAP    #15                     ; Trap (Perform action)
000015CC                           663  
000015CC                           664      ; Set X, Y, Width and Height
000015CC  2239 00001AB2            665      MOVE.L  ENEMY_X_3,    D1        ; X
000015D2  2439 00001AB6            666      MOVE.L  ENEMY_Y_3,    D2        ; Y
000015D8  2639 00001AB2            667      MOVE.L  ENEMY_X_3,    D3
000015DE  0683 00000014            668      ADD.L   #ENMY_W_INIT, D3        ; Width
000015E4  2839 00001AB6            669      MOVE.L  ENEMY_Y_3,    D4 
000015EA  0684 00000014            670      ADD.L   #ENMY_H_INIT, D4        ; Height
000015F0                           671      
000015F0                           672      ; Draw Enemy    
000015F0  103C 0057                673      MOVE.B  #87,        D0          ; Draw Enemy
000015F4  4E4F                     674      TRAP    #15                     ; Trap (Perform action)
000015F6  4E75                     675      RTS                             ; Return to subroutine
000015F8                           676  
000015F8                           677  DRAW_ENEMY_4:                       ; Draw Enemy No.4
000015F8                           678      ; Set Pixel Colors
000015F8  223C 000000FF            679      MOVE.L  #RED,       D1          ; Set Background color
000015FE  103C 0050                680      MOVE.B  #80,        D0          ; Task for Background Color
00001602  4E4F                     681      TRAP    #15                     ; Trap (Perform action)
00001604                           682  
00001604                           683      ; Set X, Y, Width and Height
00001604  2239 00001ABA            684      MOVE.L  ENEMY_X_4,    D1        ; X
0000160A  2439 00001ABE            685      MOVE.L  ENEMY_Y_4,    D2        ; Y
00001610  2639 00001ABA            686      MOVE.L  ENEMY_X_4,    D3
00001616  0683 00000014            687      ADD.L   #ENMY_W_INIT, D3        ; Width
0000161C  2839 00001ABE            688      MOVE.L  ENEMY_Y_4,    D4 
00001622  0684 00000014            689      ADD.L   #ENMY_H_INIT, D4        ; Height
00001628                           690      
00001628                           691      ; Draw Enemy    
00001628  103C 0057                692      MOVE.B  #87,        D0          ; Draw Enemy
0000162C  4E4F                     693      TRAP    #15                     ; Trap (Perform action)
0000162E  4E75                     694      RTS                             ; Return to subroutine 
00001630                           695      
00001630                           696  DRAW_ENEMY_5:                       ; Draw Enemy No.5
00001630                           697      ; Set Pixel Colors
00001630  223C 000000FF            698      MOVE.L  #RED,       D1          ; Set Background color
00001636  103C 0050                699      MOVE.B  #80,        D0          ; Task for Background Color
0000163A  4E4F                     700      TRAP    #15                     ; Trap (Perform action)
0000163C                           701  
0000163C                           702      ; Set X, Y, Width and Height
0000163C  2239 00001AC2            703      MOVE.L  ENEMY_X_5,    D1          ; X
00001642  2439 00001AC6            704      MOVE.L  ENEMY_Y_5,      D2          ; Y
00001648  2639 00001AC2            705      MOVE.L  ENEMY_X_5,    D3
0000164E  0683 00000014            706      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001654  2839 00001AC6            707      MOVE.L  ENEMY_Y_5,    D4 
0000165A  0684 00000014            708      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001660                           709      
00001660                           710      ; Draw Enemy    
00001660  103C 0057                711      MOVE.B  #87,        D0          ; Draw Enemy
00001664  4E4F                     712      TRAP    #15                     ; Trap (Perform action)
00001666  4E75                     713      RTS                             ; Return to subroutine
00001668                           714  
00001668                           715  DRAW_ENEMY_6:                       ; Draw Enemy No.6
00001668                           716      ; Set Pixel Colors
00001668  223C 000000FF            717      MOVE.L  #RED,       D1          ; Set Background color
0000166E  103C 0050                718      MOVE.B  #80,        D0          ; Task for Background Color
00001672  4E4F                     719      TRAP    #15                     ; Trap (Perform action)
00001674                           720  
00001674                           721      ; Set X, Y, Width and Height
00001674  2239 00001ACA            722      MOVE.L  ENEMY_X_6,    D1        ; X
0000167A  2439 00001ACE            723      MOVE.L  ENEMY_Y_6,    D2        ; Y
00001680  2639 00001ACA            724      MOVE.L  ENEMY_X_6,    D3
00001686  0683 00000014            725      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000168C  2839 00001ACE            726      MOVE.L  ENEMY_Y_6,    D4 
00001692  0684 00000014            727      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001698                           728      
00001698                           729      ; Draw Enemy    
00001698  103C 0057                730      MOVE.B  #87,        D0          ; Draw Enemy
0000169C  4E4F                     731      TRAP    #15                     ; Trap (Perform action)
0000169E  4E75                     732      RTS                             ; Return to subroutine  
000016A0                           733  
000016A0                           734  DRAW_ENEMY_7:                       ; Draw Enemy No.7
000016A0                           735      ; Set Pixel Colors
000016A0  223C 000000FF            736      MOVE.L  #RED,       D1          ; Set Background color
000016A6  103C 0050                737      MOVE.B  #80,        D0          ; Task for Background Color
000016AA  4E4F                     738      TRAP    #15                     ; Trap (Perform action)
000016AC                           739  
000016AC                           740      ; Set X, Y, Width and Height
000016AC  2239 00001AD2            741      MOVE.L  ENEMY_X_7,    D1        ; X
000016B2  2439 00001AD6            742      MOVE.L  ENEMY_Y_7,    D2        ; Y
000016B8  2639 00001AD2            743      MOVE.L  ENEMY_X_7,    D3
000016BE  0683 00000014            744      ADD.L   #ENMY_W_INIT, D3        ; Width
000016C4  2839 00001AD6            745      MOVE.L  ENEMY_Y_7,    D4 
000016CA  0684 00000014            746      ADD.L   #ENMY_H_INIT, D4        ; Height
000016D0                           747      
000016D0                           748      ; Draw Enemy    
000016D0  103C 0057                749      MOVE.B  #87,        D0          ; Draw Enemy
000016D4  4E4F                     750      TRAP    #15                     ; Trap (Perform action)
000016D6  4E75                     751      RTS                             ; Return to subroutine              
000016D8                           752  ;----------------------------------------------------------
000016D8                           753  * Subroutine    : Collision Check
000016D8                           754  * Description   : Axis-Aligned Bounding Box Collision Detection
000016D8                           755  * Algorithm checks for overlap on the 4 sides of the Player and 
000016D8                           756  * Enemy rectangles
000016D8                           757  * PLAYER_X <= ENEMY_X + ENEMY_W &&
000016D8                           758  * PLAYER_X + PLAYER_W >= ENEMY_X &&
000016D8                           759  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
000016D8                           760  * PLAYER_H + PLAYER_Y >= ENEMY_Y
000016D8                           761  *-----------------------------------------------------------
000016D8                           762  CHECK_COLLISIONS_1:
000016D8  4281                     763      CLR.L   D1                      ; Clear D1
000016DA  4282                     764      CLR.L   D2                      ; Clear D2
000016DC                           765  
000016DC                           766  PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W:
000016DC  2239 00001A92            767      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000016E2  2439 00001AA2            768      MOVE.L  ENEMY_X_1,  D2          ; Move Enemy X to D2
000016E8  D4B8 0014                769      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000016EC  B481                     770      CMP.L   D1,         D2          ; Do the Overlap ?
000016EE  6F00 0006                771      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  ; Less than or Equal ?
000016F2  6000 02AE                772      BRA     COLLISION_CHECK_DONE   ; If not no collision
000016F6                           773      
000016F6                           774  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1:     ; Check player is not  
000016F6  D2B8 0014                775      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000016FA  2439 00001AA2            776      MOVE.L  ENEMY_X_1,  D2          ; Move Enemy X to D2
00001700  B481                     777      CMP.L   D1,         D2          ; Do they OverLap ?
00001702  6C00 0006                778      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  ; Less than or Equal
00001706  6000 029A                779      BRA     COLLISION_CHECK_DONE   ; If not no collision
0000170A                           780     
0000170A                           781  PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H:     
0000170A  2239 00001A96            782      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001710  2439 00001AA6            783      MOVE.L  ENEMY_Y_1,  D2          ; Move Enemy Y to D2
00001716  D4B8 0014                784      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000171A  B481                     785      CMP.L   D1,         D2          ; Do they Overlap ?
0000171C  6F00 0006                786      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  ; Less than or Equal
00001720  6000 0280                787      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001724                           788      
00001724                           789  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1:     ; Less than or Equal 
00001724  2239 00001A96            790      MOVE.L  PLAYER_Y,   D1
0000172A  D2B8 0014                791      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000172E  2439 00001AA6            792      MOVE.L  ENEMY_Y_1,  D2          ; Move Enemy Height to D2  
00001734  B481                     793      CMP.L   D1,         D2          ; Do they OverLap ?
00001736  6C00 027A                794      BGE     COLLISION              ; Collision !
0000173A  6000 0266                795      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000173E                           796  *------------------------------------------------------------------------------ 
0000173E                           797  CHECK_COLLISIONS_2:
0000173E  4281                     798      CLR.L   D1                      ; Clear D1
00001740  4282                     799      CLR.L   D2                      ; Clear D2
00001742                           800  
00001742                           801  PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W:
00001742  2239 00001A92            802      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001748  2439 00001AAA            803      MOVE.L  ENEMY_X_2,  D2          ; Move Enemy X to D2
0000174E  D4B8 0014                804      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001752  B481                     805      CMP.L   D1,         D2          ; Do the Overlap ?
00001754  6F00 0006                806      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  ; Less than or Equal ?
00001758  6000 0248                807      BRA     COLLISION_CHECK_DONE   ; If not no collision
0000175C                           808      
0000175C                           809  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2:     ; Check player is not  
0000175C  D2B8 0014                810      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001760  2439 00001AAA            811      MOVE.L  ENEMY_X_2,  D2          ; Move Enemy X to D2
00001766  B481                     812      CMP.L   D1,         D2          ; Do they OverLap ?
00001768  6C00 0006                813      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  ; Less than or Equal
0000176C  6000 0234                814      BRA     COLLISION_CHECK_DONE   ; If not no collision
00001770                           815     
00001770                           816  PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H:     
00001770  2239 00001A96            817      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001776  2439 00001AAE            818      MOVE.L  ENEMY_Y_2,  D2          ; Move Enemy Y to D2
0000177C  D4B8 0014                819      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001780  B481                     820      CMP.L   D1,         D2          ; Do they Overlap ?
00001782  6F00 0006                821      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  ; Less than or Equal
00001786  6000 021A                822      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000178A                           823      
0000178A                           824  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2:     ; Less than or Equal ?
0000178A  2239 00001A96            825      MOVE.L  PLAYER_Y,   D1
00001790  D2B8 0014                826      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001794  2439 00001AAE            827      MOVE.L  ENEMY_Y_2,  D2          ; Move Enemy Height to D2  
0000179A  B481                     828      CMP.L   D1,         D2          ; Do they OverLap ?
0000179C  6C00 0214                829      BGE     COLLISION              ; Collision !
000017A0  6000 0200                830      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017A4                           831  *--------------------------------------------------------------------------------- 
000017A4                           832  CHECK_COLLISIONS_3:
000017A4  4281                     833      CLR.L   D1                      ; Clear D1
000017A6  4282                     834      CLR.L   D2                      ; Clear D2
000017A8                           835  
000017A8                           836  PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W:
000017A8  2239 00001A92            837      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000017AE  2439 00001AB2            838      MOVE.L  ENEMY_X_3,  D2          ; Move Enemy X to D2
000017B4  D4B8 0014                839      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000017B8  B481                     840      CMP.L   D1,         D2          ; Do the Overlap ?
000017BA  6F00 0006                841      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  ; Less than or Equal ?
000017BE  6000 01E2                842      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017C2                           843  
000017C2                           844  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3:     ; Check player is not  
000017C2  D2B8 0014                845      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000017C6  2439 00001AB2            846      MOVE.L  ENEMY_X_3,  D2          ; Move Enemy X to D2
000017CC  B481                     847      CMP.L   D1,         D2          ; Do they OverLap ?
000017CE  6C00 0006                848      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  ; Less than or Equal
000017D2  6000 01CE                849      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017D6                           850     
000017D6                           851  PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H:     
000017D6  2239 00001A96            852      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000017DC  2439 00001AB6            853      MOVE.L  ENEMY_Y_3,  D2          ; Move Enemy Y to D2
000017E2  D4B8 0014                854      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000017E6  B481                     855      CMP.L   D1,         D2          ; Do they Overlap ?
000017E8  6F00 0006                856      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  ; Less than or Equal
000017EC  6000 01B4                857      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017F0                           858      
000017F0                           859  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3:     ; Less than or Equal ?
000017F0  2239 00001A96            860      MOVE.L  PLAYER_Y,   D1
000017F6  D2B8 0014                861      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000017FA  2439 00001AB6            862      MOVE.L  ENEMY_Y_3,  D2          ; Move Enemy Height to D2  
00001800  B481                     863      CMP.L   D1,         D2          ; Do they OverLap ?
00001802  6C00 01AE                864      BGE     COLLISION              ; Collision !
00001806  6000 019A                865      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000180A                           866  *--------------------------------------------------------------------------------
0000180A                           867  CHECK_COLLISIONS_4:
0000180A  4281                     868      CLR.L   D1                      ; Clear D1
0000180C  4282                     869      CLR.L   D2                      ; Clear D2
0000180E                           870  
0000180E                           871  PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W:
0000180E  2239 00001A92            872      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001814  2439 00001ABA            873      MOVE.L  ENEMY_X_4,  D2          ; Move Enemy X to D2
0000181A  D4B8 0014                874      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000181E  B481                     875      CMP.L   D1,         D2          ; Do the Overlap ?
00001820  6F00 0006                876      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  ; Less than or Equal ?
00001824  6000 017C                877      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001828                           878  
00001828                           879  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4:     ; Check player is not  
00001828  D2B8 0014                880      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000182C  2439 00001ABA            881      MOVE.L  ENEMY_X_4,  D2          ; Move Enemy X to D2
00001832  B481                     882      CMP.L   D1,         D2          ; Do they OverLap ?
00001834  6C00 0006                883      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  ; Less than or Equal
00001838  6000 0168                884      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000183C                           885     
0000183C                           886  PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H:     
0000183C  2239 00001A96            887      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001842  2439 00001ABE            888      MOVE.L  ENEMY_Y_4,  D2          ; Move Enemy Y to D2
00001848  D4B8 0014                889      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000184C  B481                     890      CMP.L   D1,         D2          ; Do they Overlap ?
0000184E  6F00 0006                891      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  ; Less than or Equal
00001852  6000 014E                892      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001856                           893      
00001856                           894  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4:     ; Less than or Equal ?
00001856  2239 00001A96            895      MOVE.L  PLAYER_Y,   D1
0000185C  D2B8 0014                896      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001860  2439 00001ABE            897      MOVE.L  ENEMY_Y_4,  D2          ; Move Enemy Height to D2  
00001866  B481                     898      CMP.L   D1,         D2          ; Do they OverLap ?
00001868  6C00 0148                899      BGE     COLLISION               ; Collision !
0000186C  6000 0134                900      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001870                           901  *---------------------------------------------------------------------------------
00001870                           902  CHECK_COLLISIONS_5:
00001870  4281                     903      CLR.L   D1                      ; Clear D1
00001872  4282                     904      CLR.L   D2                      ; Clear D2
00001874                           905      
00001874                           906  PLAYER_X_LTE_TO_ENEMY_X_5_PLUS_W:
00001874  2239 00001A92            907      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
0000187A  2439 00001AC2            908      MOVE.L  ENEMY_X_5,  D2          ; Move Enemy X to D2
00001880  D4B8 0014                909      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001884  B481                     910      CMP.L   D1,         D2          ; Do the Overlap ?
00001886  6F00 0006                911      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5  ; Less than or Equal ?
0000188A  6000 0116                912      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000188E                           913      
0000188E                           914  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5:     ; Check player is not  
0000188E  D2B8 0014                915      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001892  2439 00001AC2            916      MOVE.L  ENEMY_X_5,  D2          ; Move Enemy X to D2
00001898  B481                     917      CMP.L   D1,         D2          ; Do they OverLap ?
0000189A  6C00 0006                918      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H  ; Less than or Equal
0000189E  6000 0102                919      BRA     COLLISION_CHECK_DONE    ; If not no collision
000018A2                           920     
000018A2                           921  PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H:     
000018A2  2239 00001A96            922      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000018A8  2439 00001AC6            923      MOVE.L  ENEMY_Y_5,  D2          ; Move Enemy Y to D2
000018AE  D4B8 0014                924      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000018B2  B481                     925      CMP.L   D1,         D2          ; Do they Overlap ?
000018B4  6F00 0006                926      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5  ; Less than or Equal
000018B8  6000 00E8                927      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000018BC                           928      
000018BC                           929  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5:     ; Less than or Equal ?
000018BC  2239 00001A96            930      MOVE.L  PLAYER_Y,   D1
000018C2  D2B8 0014                931      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000018C6  2439 00001AC6            932      MOVE.L  ENEMY_Y_5,  D2          ; Move Enemy Height to D2  
000018CC  B481                     933      CMP.L   D1,         D2          ; Do they OverLap ?
000018CE  6C00 00E2                934      BGE     COLLISION               ; Collision !
000018D2  6000 00CE                935      BRA     COLLISION_CHECK_DONE    ; If not no collision
000018D6                           936  *----------------------------------------------------------------------------------
000018D6                           937  CHECK_COLLISIONS_6:
000018D6  4281                     938      CLR.L   D1                      ; Clear D1
000018D8  4282                     939      CLR.L   D2                      ; Clear D2
000018DA                           940      
000018DA                           941  PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W:
000018DA  2239 00001A92            942      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000018E0  2439 00001ACA            943      MOVE.L  ENEMY_X_6,  D2          ; Move Enemy X to D2
000018E6  D4B8 0014                944      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000018EA  B481                     945      CMP.L   D1,         D2          ; Do the Overlap ?
000018EC  6F00 0006                946      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  ; Less than or Equal ?
000018F0  6000 00B0                947      BRA     COLLISION_CHECK_DONE    ; If not no collision
000018F4                           948      
000018F4                           949  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6:     ; Check player is not  
000018F4  D2B8 0014                950      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000018F8  2439 00001ACA            951      MOVE.L  ENEMY_X_6,  D2          ; Move Enemy X to D2
000018FE  B481                     952      CMP.L   D1,         D2          ; Do they OverLap ?
00001900  6C00 0006                953      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  ; Less than or Equal
00001904  6000 009C                954      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001908                           955     
00001908                           956  PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H:     
00001908  2239 00001A96            957      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000190E  2439 00001ACE            958      MOVE.L  ENEMY_Y_6,  D2          ; Move Enemy Y to D2
00001914  D4B8 0014                959      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001918  B481                     960      CMP.L   D1,         D2          ; Do they Overlap ?
0000191A  6F00 0006                961      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  ; Less than or Equal
0000191E  6000 0082                962      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001922                           963      
00001922                           964  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6:     ; Less than or Equal ?
00001922  2239 00001A96            965      MOVE.L  PLAYER_Y,   D1
00001928  D2B8 0014                966      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000192C  2439 00001ACE            967      MOVE.L  ENEMY_Y_6,  D2          ; Move Enemy Height to D2  
00001932  B481                     968      CMP.L   D1,         D2          ; Do they OverLap ?
00001934  6C00 007C                969      BGE     COLLISION               ; Collision !
00001938  6000 0068                970      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000193C                           971  *---------------------------------------------------------------------------------
0000193C                           972  CHECK_COLLISIONS_7:
0000193C  4281                     973      CLR.L   D1                      ; Clear D1
0000193E  4282                     974      CLR.L   D2                      ; Clear D2
00001940                           975      
00001940                           976  PLAYER_X_LTE_TO_ENEMY_X_7_PLUS_W:
00001940  2239 00001A92            977      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001946  2439 00001AD2            978      MOVE.L  ENEMY_X_7,  D2          ; Move Enemy X to D2
0000194C  D4B8 0014                979      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001950  B481                     980      CMP.L   D1,         D2          ; Do the Overlap ?
00001952  6F00 0006                981      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7  ; Less than or Equal ?
00001956  6000 004A                982      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000195A                           983      
0000195A                           984  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7:     ; Check player is not  
0000195A  D2B8 0014                985      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000195E  2439 00001AD2            986      MOVE.L  ENEMY_X_7,  D2          ; Move Enemy X to D2
00001964  B481                     987      CMP.L   D1,         D2          ; Do they OverLap ?
00001966  6C00 0006                988      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H  ; Less than or Equal
0000196A  6000 0036                989      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000196E                           990     
0000196E                           991  PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H:     
0000196E  2239 00001A96            992      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001974  2439 00001AD6            993      MOVE.L  ENEMY_Y_7,  D2          ; Move Enemy Y to D2
0000197A  D4B8 0014                994      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000197E  B481                     995      CMP.L   D1,         D2          ; Do they Overlap ?
00001980  6F00 0006                996      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7  ; Less than or Equal
00001984  6000 001C                997      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001988                           998      
00001988                           999  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7:     ; Less than or Equal ?
00001988  2239 00001A96           1000      MOVE.L  PLAYER_Y,   D1
0000198E  D2B8 0014               1001      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001992  2439 00001AD6           1002      MOVE.L  ENEMY_Y_7,  D2          ; Move Enemy Height to D2  
00001998  B481                    1003      CMP.L   D1,         D2          ; Do they OverLap ?
0000199A  6C00 0016               1004      BGE     COLLISION               ; Collision !
0000199E  6000 0002               1005      BRA     COLLISION_CHECK_DONE    ; If not no collision
000019A2                          1006  *---------------------------------------------------------------------------------
000019A2                          1007  COLLISION_CHECK_DONE:               ; No Collision Update points
000019A2  5281                    1008      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000019A4  D2B9 00001A9A           1009      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000019AA  23C1 00001A9A           1010      MOVE.L  D1,PLAYER_SCORE        ; Update player score in memory
000019B0  4E75                    1011      RTS                             ; Return to subroutine
000019B2                          1012  
000019B2                          1013      
000019B2                          1014  COLLISION:
000019B2  6100 FB58               1015      BSR     PLAY_OPPS               ; Play Opps Wav
000019B6  04B9 00000014 00001A9E  1016      SUB.L   #20, HEALTH_VALUE       ; Sub 20 from Health everytime there is a collison
000019C0                          1017      IF.L    (HEALTH_VALUE) <EQ> #0 THEN     ; If the = 0 then
000019CE                          1018      
000019CE  103C 000B               1019              MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000019D2  323C FF00               1020              MOVE.W  #$FF00,     D1          ; Clear contents
000019D6  4E4F                    1021              TRAP    #15                     ; Trap (Perform action)
000019D8                          1022              
000019D8  6100 FA2A               1023              BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000019DC  6100 FB3A               1024              BSR     DRAW_PLAYER             ; Draw Player
000019E0  6100 FB6E               1025              BSR     DRAW_ENEMY_1            ; Draw Enemey 1
000019E4  6100 FBA2               1026              BSR     DRAW_ENEMY_2            ; Draw Enemey 2
000019E8  6100 FBD6               1027              BSR     DRAW_ENEMY_3            ; Draw Enemey 3
000019EC  6100 FC0A               1028              BSR     DRAW_ENEMY_4            ; Draw Enemey 4
000019F0  6100 FC3E               1029              BSR     DRAW_ENEMY_5            ; Draw Enemey 5
000019F4  6100 FC72               1030              BSR     DRAW_ENEMY_6            ; Draw Enemey 6
000019F8  6100 FCA6               1031              BSR     DRAW_ENEMY_7            ; Draw Enemey 7
000019FC  6100 F9E2               1032              BSR     DRAW_BOTTOM_LINE        ; Draw bottom line
00001A00  6100 F9C2               1033              BSR     DRAW_TOP_LINE           ; Draw bottom line
00001A04                          1034  
00001A04  103C 005E               1035              MOVE.B  #94,        D0
00001A08  4E4F                    1036              TRAP    #15
00001A0A                          1037              
00001A0A  6100 0004               1038              BSR EXIT
00001A0E                          1039      ENDI
00001A0E  4E75                    1040      RTS                             ; Return to subroutine   
00001A10                          1041  *-----------------------------------------------------------
00001A10                          1042  * Subroutine    : EXIT
00001A10                          1043  * Description   : Exit message and End Game
00001A10                          1044  *-----------------------------------------------------------
00001A10                          1045  EXIT:
00001A10                          1046      ; Show if Exiting is Running
00001A10  103C 000B               1047      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001A14  323C 4004               1048      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001A18  4E4F                    1049      TRAP    #15                     ; Trap (Perform action)
00001A1A  43F9 00001A7D           1050      LEA     EXIT_MSG,   A1          ; Exit
00001A20  303C 000D               1051      MOVE    #13,        D0          ; No Line feed
00001A24  4E4F                    1052      TRAP    #15                     ; Trap (Perform action)
00001A26  103C 0009               1053      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001A2A  4E4F                    1054      TRAP    #15                     ; Trap (Perform action)
00001A2C  FFFF FFFF               1055      SIMHALT
00001A30                          1056  
00001A30                          1057  *-----------------------------------------------------------
00001A30                          1058  * Section       : Messages
00001A30                          1059  * Description   : Messages to Print on Console, names should be
00001A30                          1060  * self documenting
00001A30                          1061  *-----------------------------------------------------------
00001A30= 53 63 6F 72 65 20 ...   1062  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001A39= 4B 65 79 43 6F 64 ...   1063  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
00001A44                          1064  ;---------------------------------------------------------
00001A44= 55 70 2E 2E 2E 2E 00    1065  UP_MSG          DC.B    'Up....', 0       ; Up Message
00001A4B= 44 6F 77 6E 2E 2E ...   1066  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
00001A54                          1067  ;-----------------------------------------------------------
00001A54= 58 3A 00                1068  X_MSG           DC.B    'X:', 0             ; X Position Message
00001A57= 59 3A 00                1069  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001A5A= 48 65 61 6C 74 68 ...   1070  HEALTH_MSG      DC.B    'Health : ',0       ; Health message
00001A64= 43 6F 6E 74 72 6F ...   1071  CONTROLS        DC.B    'Controls Up and Down key',0
00001A7D= 45 78 69 74 69 6E ...   1072  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001A89                          1073  *-----------------------------------------------------------
00001A89                          1074  * Section       : Graphic Colors
00001A89                          1075  * Description   : Screen Pixel Color
00001A89                          1076  *-----------------------------------------------------------
00001A89  =00FFFFFF               1077  WHITE           EQU     $00FFFFFF
00001A89  =000000FF               1078  RED             EQU     $000000FF
00001A89  =0000FF00               1079  LIME            EQU     $0000FF00 
00001A89                          1080  *-----------------------------------------------------------
00001A89                          1081  * Section       : Screen Size
00001A89                          1082  * Description   : Screen Width and Height
00001A89                          1083  *-----------------------------------------------------------
00001A8A                          1084  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001A8C                          1085  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001A8E                          1086  
00001A8E                          1087  *-----------------------------------------------------------
00001A8E                          1088  * Section       : Keyboard Input
00001A8E                          1089  * Description   : Used for storing Keypresses
00001A8E                          1090  *-----------------------------------------------------------
00001A8E                          1091  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001A92                          1092  
00001A92                          1093  *-----------------------------------------------------------
00001A92                          1094  * Section       : Character Positions
00001A92                          1095  * Description   : Player and Enemy Position Memory Locations
00001A92                          1096  *-----------------------------------------------------------
00001A92                          1097  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001A96                          1098  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001A9A                          1099  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001A9E                          1100  HEALTH_VALUE    DS.L    01  ; Reserve Space for Health Value
00001AA2                          1101  
00001AA2                          1102  ENEMY_X_1       DS.L    01  ; Reserve Space for Enemy X Position
00001AA6                          1103  ENEMY_Y_1       DS.L    01  ; Reserve Space for Enemy Y Position
00001AAA                          1104  
00001AAA                          1105  ENEMY_X_2       DS.L    01  ; Reserve Space for Enemy X Position
00001AAE                          1106  ENEMY_Y_2       DS.L    01  ; Reserve Space for Enemy Y Position
00001AB2                          1107  
00001AB2                          1108  ENEMY_X_3       DS.L    01  ; Reserve Space for Enemy X Position
00001AB6                          1109  ENEMY_Y_3       DS.L    01  ; Reserve Space for Enemy Y Position
00001ABA                          1110  
00001ABA                          1111  ENEMY_X_4       DS.L    01  ; Reserve Space for Enemy X Position
00001ABE                          1112  ENEMY_Y_4       DS.L    01  ; Reserve Space for Enemy Y Position
00001AC2                          1113  
00001AC2                          1114  ENEMY_X_5       DS.L    01  ; Reserve Space for Enemy X Position
00001AC6                          1115  ENEMY_Y_5       DS.L    01  ; Reserve Space for Enemy Y Position
00001ACA                          1116  
00001ACA                          1117  ENEMY_X_6       DS.L    01  ; Reserve Space for Enemy X Position
00001ACE                          1118  ENEMY_Y_6       DS.L    01  ; Reserve Space for Enemy Y Position
00001AD2                          1119  
00001AD2                          1120  ENEMY_X_7       DS.L    01  ; Reserve Space for Enemy X Position
00001AD6                          1121  ENEMY_Y_7       DS.L    01  ; Reserve Space for Enemy Y Position
00001ADA                          1122  
00001ADA                          1123  *-----------------------------------------------------------
00001ADA                          1124  * Section       : Sounds
00001ADA                          1125  * Description   : Sound files, which are then loaded and given
00001ADA                          1126  * an address in memory, they take a longtime to process and play
00001ADA                          1127  * so keep the files small. Used https://voicemaker.in/ to 
00001ADA                          1128  * generate and Audacity to convert MP3 to WAV
00001ADA                          1129  *-----------------------------------------------------------
00001ADA= 6F 70 70 73 2E 77 ...   1130  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001AE3                          1131  
00001AE3                          1132      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BOTTOM_Y_LINE       156
CHECK_COLLISIONS_1  16D8
CHECK_COLLISIONS_2  173E
CHECK_COLLISIONS_3  17A4
CHECK_COLLISIONS_4  180A
CHECK_COLLISIONS_5  1870
CHECK_COLLISIONS_6  18D6
CHECK_COLLISIONS_7  193C
COLLISION           19B2
COLLISION_CHECK_DONE  19A2
CONTROLS            1A64
CURRENT_KEY         1A8E
DOWN                12BC
DOWNARROW           28
DOWN_MSG            1A4B
DRAW                1386
DRAW_BOTTOM_LINE    13E0
DRAW_ENEMY_1        1550
DRAW_ENEMY_2        1588
DRAW_ENEMY_3        15C0
DRAW_ENEMY_4        15F8
DRAW_ENEMY_5        1630
DRAW_ENEMY_6        1668
DRAW_ENEMY_7        16A0
DRAW_PLAYER         1518
DRAW_PLYR_DATA      1404
DRAW_TOP_LINE       13C4
ENEMY_MOVEMENT      0
ENEMY_X_1           1AA2
ENEMY_X_2           1AAA
ENEMY_X_3           1AB2
ENEMY_X_4           1ABA
ENEMY_X_5           1AC2
ENEMY_X_6           1ACA
ENEMY_X_7           1AD2
ENEMY_Y_1           1AA6
ENEMY_Y_2           1AAE
ENEMY_Y_3           1AB6
ENEMY_Y_4           1ABE
ENEMY_Y_5           1AC6
ENEMY_Y_6           1ACE
ENEMY_Y_7           1AD6
ENMY_H_INIT         14
ENMY_W_INIT         14
ESCAPE              1B
EXIT                1A10
EXIT_MSG            1A7D
GAME                1140
GAMELOOP            1140
HEALTH_MSG          1A5A
HEALTH_VALUE        1A9E
INITIALISE          1000
INPUT               1196
KEYCODE_MSG         1A39
LIME                FF00
MOVE_ENEMY_1        12DE
MOVE_ENEMY_2        12FE
MOVE_ENEMY_3        12E6
MOVE_ENEMY_4        1306
MOVE_ENEMY_5        12EE
MOVE_ENEMY_6        130E
MOVE_ENEMY_7        12F6
OPPS_INDEX          2
OPPS_LOAD           14FA
OPPS_WAV            1ADA
OUT_OF_BOUNDS_DOWN  12D2
OUT_OF_BOUNDS_UP    12B2
PLAYER_SCORE        1A9A
PLAYER_X            1A92
PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W  16DC
PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W  1742
PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W  17A8
PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W  180E
PLAYER_X_LTE_TO_ENEMY_X_5_PLUS_W  1874
PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W  18DA
PLAYER_X_LTE_TO_ENEMY_X_7_PLUS_W  1940
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  16F6
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  175C
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  17C2
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  1828
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_5  188E
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  18F4
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_7  195A
PLAYER_Y            1A96
PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  170A
PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  1770
PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  17D6
PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  183C
PLAYER_Y_LTE_TO_ENEMY_Y_5_PLUS_H  18A2
PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  1908
PLAYER_Y_LTE_TO_ENEMY_Y_7_PLUS_H  196E
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  1724
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  178A
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  17F0
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  1856
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_5  18BC
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  1922
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_7  1988
PLAY_OPPS           150C
PLYR_H_INIT         14
PLYR_W_INIT         14
POINTS              1
PROCESS_INPUT       11B4
RED                 FF
RESET_ENEMY_POSITION_1  1316
RESET_ENEMY_POSITION_2  1326
RESET_ENEMY_POSITION_3  1336
RESET_ENEMY_POSITION_4  1346
RESET_ENEMY_POSITION_5  1356
RESET_ENEMY_POSITION_6  1366
RESET_ENEMY_POSITION_7  1376
SCORE_MSG           1A30
SCREEN_H            1A8C
SCREEN_W            1A8A
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
TOP_Y_LINE          6C
UP                  129C
UPARROW             26
UPDATE_1            11E6
UPDATE_2            1200
UPDATE_3            121A
UPDATE_4            1234
UPDATE_5            124E
UPDATE_6            1268
UPDATE_7            1282
UP_MSG              1A44
WAIT                1188
WHITE               FFFFFF
X_MSG               1A54
Y_MSG               1A57
_00000000           1A0E
