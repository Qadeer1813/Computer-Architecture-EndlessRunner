00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/02/2023 23:44:25

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =00000008                 29  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 30  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000                            34  ;-----------------------------------------------------------
00001000                            35  ;PLYR_UP_V   EQU         -05          ; Player UP Velocity
00001000                            36  ;PLYR_DOWN_V EQU         02          ; Player DOWN Velocity
00001000                            37  ;-----------------------------------------------------------
00001000  =00000001                 38  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            39  
00001000  =00000001                 40  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 41  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            42  
00001000  =00000000                 43  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 44  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 45  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            46  
00001000  =00000008                 47  ENMY_W_INIT EQU         08          ; Enemy initial Width
00001000  =00000008                 48  ENMY_H_INIT EQU         08          ; Enemy initial Height
00001000                            49  
00001000                            50  *-----------------------------------------------------------
00001000                            51  * Section       : Game Stats
00001000                            52  * Description   : Points
00001000                            53  *-----------------------------------------------------------
00001000  =00000001                 54  POINTS      EQU         01          ; Points added
00001000                            55  
00001000                            56  *-----------------------------------------------------------
00001000                            57  * Section       : Keyboard Keys
00001000                            58  * Description   : Spacebar and Escape or two functioning keys
00001000                            59  * Spacebar to JUMP and Escape to Exit Game
00001000                            60  *-----------------------------------------------------------
00001000  =00000020                 61  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 62  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            63  ;------------------------------------------------------------
00001000  =00000025                 64  LEFTARROW   EQU         $25         ; Left key ASCII Keycode
00001000  =00000026                 65  UPARROW     EQU         $26         ; Up key ASCII Keycode   
00001000  =00000027                 66  RIGHTARROW  EQU         $27         ; Right key ASCII Keycode
00001000  =00000028                 67  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode 
00001000                            68  ;------------------------------------------------------------    
00001000                            69  *-----------------------------------------------------------
00001000                            70  * Subroutine    : Initialise
00001000                            71  * Description   : Initialise game data into memory such as 
00001000                            72  * sounds and screen size
00001000                            73  *-----------------------------------------------------------
00001000                            74  INITIALISE:
00001000                            75      ; Initialise Sounds
00001000  6100 028C                 76      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 02A6                 77      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 02C0                 78      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            79  
0000100C                            80      ; Screen Size
0000100C  103C 0021                 81      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      82      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      83      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 0000142A             84      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      85      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 00001428             86      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            87  
00001022                            88      ; Place the Player at the center of the screen
00001022  4281                      89      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  23FC 00000000 00001430    90      MOVE.L  #0,         PLAYER_X    ; Players X set to 0 Position
0000102E                            91  
0000102E  4281                      92      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001030  3239 0000142A             93      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036  82FC 0002                 94      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000103A  23C1 00001434             95      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001040                            96  
00001040                            97      ; Initialise Player Score
00001040  4281                      98      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                      99      MOVE.L  #0,         D1          ; Init Score
00001044  23C1 00001438            100      MOVE.L  D1,        PLAYER_SCORE
0000104A                           101  
0000104A                           102      ; Initialize Player on Ground
0000104A                           103      ;MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
0000104A                           104  
0000104A                           105      ; Initial Position for Enemy
0000104A  4281                     106      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  3239 00001428            107      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001052  23C1 00001448            108      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001058                           109  
00001058  4281                     110      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105A  3239 0000142A            111      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001060  82FC 0002                112      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001064  23C1 0000144C            113      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
0000106A                           114  
0000106A                           115      ; Enable the screen back buffer(see easy 68k help)
0000106A  103C 005C                116      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
0000106E  123C 0011                117      MOVE.B  #17,        D1          ; Combine Tasks
00001072  4E4F                     118      TRAP    #15                     ; Trap (Perform action)
00001074                           119  
00001074                           120      ; Clear the screen (see easy 68k help)
00001074  103C 000B                121      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001078  323C FF00                122      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
0000107C  4E4F                     123      TRAP    #15                     ; Trap (Perform action)
0000107E                           124  
0000107E                           125  *-----------------------------------------------------------
0000107E                           126  * Subroutine    : Game
0000107E                           127  * Description   : Game including main GameLoop. GameLoop is like
0000107E                           128  * a while loop in that it runs forever until interupted
0000107E                           129  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
0000107E                           130  *-----------------------------------------------------------
0000107E                           131  GAME:
0000107E  6100 0220                132      BSR     PLAY_RUN                ; Play Run Wav
00001082                           133  GAMELOOP:
00001082  7008                     134      MOVEQ   #8,D0                   ; Get time in 1/100 seconds
00001084  4E4F                     135      TRAP    #15
00001086                           136  
00001086  2F01                     137      MOVE.L  D1,-(SP)                ; Push time on the stack
00001088                           138      
00001088                           139      ; Main Gameloop
00001088  6100 001E                140      BSR     INPUT                   ; Check Keyboard Input
0000108C  6100 006E                141      BSR     UPDATE                  ; Update positions and points
00001090                           142      ;BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
00001090  6100 02B6                143      BSR     CHECK_COLLISIONS        ; Check for Collisions
00001094  6100 00A8                144      BSR     DRAW                    ; Draw the Scene
00001098                           145      ;BRA     GAMELOOP               ; Loop back to GameLoop
00001098                           146      
00001098  2E1F                     147      MOVE.L  (SP)+,D7
0000109A                           148  wait:
0000109A  7008                     149      MOVEQ   #8,D0                   ; Get time in 1/100 ths seconds
0000109C  4E4F                     150      TRAP    #15
0000109E                           151  
0000109E  9287                     152      SUB.L   D7,D1                   ; Subtract previous time from current time
000010A0  B23C 0002                153      CMP.B   #2,D1                   ; Compare with 9/100ths adding the wait allowed the character and enemy to slow down to the same pace 
000010A4                           154                                      ;but i also changed the speed of the enenemy  so the enemy is slightly faster than character
000010A4  6BF4                     155      BMI.S   WAIT                    ; Loop if time not up yet
000010A6                           156  
000010A6  60DA                     157      BRA     GAMELOOP                ; Loop back to Game loop
000010A8                           158      
000010A8                           159  
000010A8                           160  *-----------------------------------------------------------
000010A8                           161  * Subroutine    : Input
000010A8                           162  * Description   : Process Keyboard Input
000010A8                           163  *-----------------------------------------------------------
000010A8                           164  INPUT:
000010A8                           165      ; Process Input
000010A8  4281                     166      CLR.L   D1                      ; Clear Data Register
000010AA  103C 0013                167      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010AE  4E4F                     168      TRAP    #15                     ; Trap (Perform action)
000010B0  1401                     169      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010B2  B43C 0000                170      CMP.B   #00,        D2          ; Key is pressed
000010B6  6700 000E                171      BEQ     PROCESS_INPUT           ; Process Key
000010BA  4E4F                     172      TRAP    #15                     ; Trap for Last Key
000010BC                           173      ; Check if key still pressed
000010BC  B23C 00FF                174      CMP.B   #$FF,       D1          ; Is it still pressed
000010C0  6700 0004                175      BEQ     PROCESS_INPUT           ; Process Last Key
000010C4  4E75                     176      RTS                             ; Return to subroutine
000010C6                           177  
000010C6                           178  *-----------------------------------------------------------
000010C6                           179  * Subroutine    : Process Input
000010C6                           180  * Description   : Branch based on keys pressed
000010C6                           181  *-----------------------------------------------------------
000010C6                           182  PROCESS_INPUT:
000010C6  23C2 0000142C            183      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000010CC  0CB9 0000001B 0000142C   184      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000010D6  6700 02F0                185      BEQ     EXIT                    ; Exit if Escape
000010DA                           186      ;--------------------------------------------------
000010DA  0CB9 00000026 0000142C   187      CMP.L   #UPARROW,  CURRENT_KEY  ; Is Current Key UP
000010E4  6700 0030                188      BEQ     UP                      ; Up
000010E8  0CB9 00000028 0000142C   189      CMP.L   #DOWNARROW,CURRENT_KEY  ; Is Current Key Down
000010F2  6700 002A                190      BEQ     DOWN                    ; Down
000010F6                           191      ;--------------------------------------------------
000010F6  6000 0190                192      BRA     IDLE                    ; Or Idle
000010FA  4E75                     193      RTS                             ; Return to subroutine
000010FC                           194  
000010FC                           195  *-----------------------------------------------------------
000010FC                           196  * Subroutine    : Update
000010FC                           197  * Description   : Main update loop update Player and Enemies
000010FC                           198  *-----------------------------------------------------------
000010FC                           199  UPDATE:
000010FC                           200  
000010FC                           201      ; Move the Enemy
000010FC  4281                     202      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE  4281                     203      CLR.L   D1                      ; Clear the contents of D0
00001100  2239 00001448            204      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00001106  B2BC 00000000            205      CMP.L   #00,        D1
0000110C  6F00 0020                206      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
00001110  6000 0014                207      BRA     MOVE_ENEMY              ; Move the Enemy
00001114                           208  
00001114  4E75                     209      RTS                             ; Return to subroutine  
00001116                           210  *-----------------------------------------------------------
00001116                           211  * Subroutine    : UP
00001116                           212  * Description   : Move the enemy up 2 frames
00001116                           213  * By: Qadeer Hussain
00001116                           214  *-----------------------------------------------------------
00001116                           215  UP:
00001116  55B9 00001434            216      SUB.L   #2, PLAYER_Y
0000111C  4E75                     217      RTS
0000111E                           218  *-----------------------------------------------------------
0000111E                           219  * Subroutine    : DOWN
0000111E                           220  * Description   : Move the enemy down 2 frames
0000111E                           221  * By: Qadeer Hussain
0000111E                           222  *-----------------------------------------------------------
0000111E                           223  DOWN:
0000111E  54B9 00001434            224      ADD.L   #2, PLAYER_Y 
00001124  4E75                     225      RTS    
00001126                           226  *-----------------------------------------------------------
00001126                           227  * Subroutine    : Move Enemy
00001126                           228  * Description   : Move Enemy Right to Left
00001126                           229  *-----------------------------------------------------------
00001126                           230  MOVE_ENEMY:
00001126  51B9 00001448            231      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
0000112C  4E75                     232      RTS
0000112E                           233  
0000112E                           234  *-----------------------------------------------------------
0000112E                           235  * Subroutine    : Reset Enemy
0000112E                           236  * Description   : Reset Enemy if to passes 0 to Right of Screen
0000112E                           237  *-----------------------------------------------------------
0000112E                           238  RESET_ENEMY_POSITION:
0000112E  4281                     239      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001130  3239 00001428            240      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001136  23C1 00001448            241      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000113C  4E75                     242      RTS
0000113E                           243  
0000113E                           244  *-----------------------------------------------------------
0000113E                           245  * Subroutine    : Draw
0000113E                           246  * Description   : Draw Screen
0000113E                           247  *-----------------------------------------------------------
0000113E                           248  DRAW: 
0000113E                           249      ; Enable back buffer
0000113E  103C 005E                250      MOVE.B  #94,        D0
00001142  4E4F                     251      TRAP    #15
00001144                           252  
00001144                           253      ; Clear the screen
00001144  103C 000B                254      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001148  323C FF00                255      MOVE.W  #$FF00,     D1          ; Clear contents
0000114C  4E4F                     256      TRAP    #15                     ; Trap (Perform action)
0000114E                           257  
0000114E  6100 000C                258      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
00001152  6100 0194                259      BSR     DRAW_PLAYER             ; Draw Player
00001156  6100 01C0                260      BSR     DRAW_ENEMY              ; Draw Enemy
0000115A  4E75                     261      RTS                             ; Return to subroutine
0000115C                           262  
0000115C                           263  *-----------------------------------------------------------
0000115C                           264  * Subroutine    : Draw Player Data
0000115C                           265  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
0000115C                           266  *-----------------------------------------------------------
0000115C                           267  DRAW_PLYR_DATA:
0000115C  4281                     268      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000115E                           269  
0000115E                           270      ; Player Score Message
0000115E  103C 000B                271      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001162  323C 0201                272      MOVE.W  #$0201,     D1          ; Col 02, Row 01
00001166  4E4F                     273      TRAP    #15                     ; Trap (Perform action)
00001168  43F9 000013E8            274      LEA     SCORE_MSG,  A1          ; Score Message
0000116E  303C 000D                275      MOVE    #13,        D0          ; No Line feed
00001172  4E4F                     276      TRAP    #15                     ; Trap (Perform action)
00001174                           277  
00001174                           278      ; Player Score Value
00001174  103C 000B                279      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001178  323C 0901                280      MOVE.W  #$0901,     D1          ; Col 09, Row 01
0000117C  4E4F                     281      TRAP    #15                     ; Trap (Perform action)
0000117E  103C 0003                282      MOVE.B  #03,        D0          ; Display number at D1.L
00001182  2239 00001438            283      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001188  4E4F                     284      TRAP    #15                     ; Trap (Perform action)
0000118A                           285      
0000118A                           286      ; Player X Message
0000118A  103C 000B                287      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000118E  323C 0202                288      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001192  4E4F                     289      TRAP    #15                     ; Trap (Perform action)
00001194  43F9 00001415            290      LEA     X_MSG,      A1          ; X Message
0000119A  303C 000D                291      MOVE    #13,        D0          ; No Line feed
0000119E  4E4F                     292      TRAP    #15                     ; Trap (Perform action)
000011A0                           293      
000011A0                           294      ; Player X
000011A0  103C 000B                295      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
000011A4  323C 0502                296      MOVE.W  #$0502,     D1          ; Col 05, Row 02
000011A8  4E4F                     297      TRAP    #15                     ; Trap (Perform action)
000011AA  103C 0003                298      MOVE.B  #03,        D0          ; Display number at D1.L
000011AE  2239 00001430            299      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
000011B4  4E4F                     300      TRAP    #15                     ; Trap (Perform action)
000011B6                           301      
000011B6                           302      ; Player Y Message
000011B6  103C 000B                303      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011BA  323C 1002                304      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000011BE  4E4F                     305      TRAP    #15                     ; Trap (Perform action)
000011C0  43F9 00001418            306      LEA     Y_MSG,      A1          ; Y Message
000011C6  303C 000D                307      MOVE    #13,        D0          ; No Line feed
000011CA  4E4F                     308      TRAP    #15                     ; Trap (Perform action)
000011CC                           309      
000011CC                           310      ; Player Y
000011CC  103C 000B                311      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011D0  323C 1202                312      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000011D4  4E4F                     313      TRAP    #15                     ; Trap (Perform action)
000011D6  103C 0003                314      MOVE.B  #03,        D0          ; Display number at D1.L
000011DA  2239 00001434            315      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000011E0  4E4F                     316      TRAP    #15                     ; Trap (Perform action) 
000011E2                           317      
000011E2                           318      ; Show Keys Pressed
000011E2  103C 000B                319      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011E6  323C 2001                320      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000011EA  4E4F                     321      TRAP    #15                     ; Trap (Perform action)
000011EC  43F9 000013F1            322      LEA     KEYCODE_MSG, A1         ; Keycode
000011F2  303C 000D                323      MOVE    #13,        D0          ; No Line feed
000011F6  4E4F                     324      TRAP    #15                     ; Trap (Perform action)
000011F8                           325  
000011F8                           326      ; Show KeyCode
000011F8  103C 000B                327      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011FC  323C 3001                328      MOVE.W  #$3001,     D1          ; Col 30, Row 1
00001200  4E4F                     329      TRAP    #15                     ; Trap (Perform action)    
00001202  2239 0000142C            330      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00001208  103C 0003                331      MOVE.B  #03,        D0          ; Display the contents of D1
0000120C  4E4F                     332      TRAP    #15                     ; Trap (Perform action)
0000120E                           333  
0000120E  4E75                     334      RTS  
00001210                           335      
00001210                           336  *-----------------------------------------------------------
00001210                           337  * Subroutine    : Player is on Ground
00001210                           338  * Description   : Check if the Player is on or off Ground
00001210                           339  *-----------------------------------------------------------
00001210                           340  IS_PLAYER_ON_GND:
00001210                           341      ; Check if Player is on Ground
00001210  4281                     342      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001212  4282                     343      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001214  3239 0000142A            344      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000121A  82FC 0002                345      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000121E  2439 00001434            346      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001224  B441                     347      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001226  6C00 0008                348      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
0000122A  6D00 002C                349      BLT     SET_OFF_GROUND          ; The Player is off the Ground
0000122E  4E75                     350      RTS                             ; Return to subroutine
00001230                           351  
00001230                           352  
00001230                           353  *-----------------------------------------------------------
00001230                           354  * Subroutine    : On Ground
00001230                           355  * Description   : Set the Player On Ground
00001230                           356  *-----------------------------------------------------------
00001230                           357  SET_ON_GROUND:
00001230  4281                     358      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001232  3239 0000142A            359      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001238  82FC 0002                360      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000123C  23C1 00001434            361      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001242  4281                     362      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001244  7200                     363      MOVE.L  #00,        D1          ; Player Velocity
00001246  23C1 0000143C            364      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000124C  23FC 00000001 00001444   365      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001256  4E75                     366      RTS
00001258                           367  
00001258                           368  *-----------------------------------------------------------
00001258                           369  * Subroutine    : Off Ground
00001258                           370  * Description   : Set the Player Off Ground
00001258                           371  *-----------------------------------------------------------
00001258                           372  SET_OFF_GROUND:
00001258  23FC 00000000 00001444   373      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001262  4E75                     374      RTS                             ; Return to subroutine
00001264                           375  
00001264                           376  *-----------------------------------------------------------
00001264                           377  * Subroutine    : Jump
00001264                           378  * Description   : Perform a Jump
00001264                           379  *-----------------------------------------------------------
00001264                           380  JUMP:
00001264  0CB9 00000001 00001444   381      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000126E  6700 0006                382      BEQ     PERFORM_JUMP            ; Do Jump
00001272  6000 0012                383      BRA     JUMP_DONE               ;
00001276                           384  PERFORM_JUMP:
00001276  6100 0046                385      BSR     PLAY_JUMP               ; Play jump sound
0000127A  23FC FFFFFFEC 0000143C   386      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
00001284  4E75                     387      RTS                             ; Return to subroutine
00001286                           388  JUMP_DONE:
00001286  4E75                     389      RTS                             ; Return to subroutine
00001288                           390  IDLE:
00001288  6100 0016                391      BSR     PLAY_RUN                ; Play Run Wav
0000128C  4E75                     392      RTS                             ; Return to subroutine
0000128E                           393  
0000128E                           394  *-----------------------------------------------------------
0000128E                           395  * Subroutines   : Sound Load and Play
0000128E                           396  * Description   : Initialise game sounds into memory 
0000128E                           397  * Current Sounds are RUN, JUMP and Opps for Collision
0000128E                           398  *-----------------------------------------------------------
0000128E                           399  RUN_LOAD:
0000128E  43F9 00001459            400      LEA     RUN_WAV,    A1          ; Load Wav File into A1
00001294  323C 0000                401      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001298  303C 0047                402      MOVE    #71,        D0          ; Load into memory
0000129C  4E4F                     403      TRAP    #15                     ; Trap (Perform action)
0000129E  4E75                     404      RTS                             ; Return to subroutine
000012A0                           405  
000012A0                           406  PLAY_RUN:
000012A0  323C 0000                407      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
000012A4  303C 0048                408      MOVE    #72,        D0          ; Play Sound
000012A8  4E4F                     409      TRAP    #15                     ; Trap (Perform action)
000012AA  4E75                     410      RTS                             ; Return to subroutine
000012AC                           411  
000012AC                           412  JUMP_LOAD:
000012AC  43F9 00001450            413      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000012B2  323C 0001                414      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000012B6  303C 0047                415      MOVE    #71,        D0          ; Load into memory
000012BA  4E4F                     416      TRAP    #15                     ; Trap (Perform action)
000012BC  4E75                     417      RTS                             ; Return to subroutine
000012BE                           418  
000012BE                           419  PLAY_JUMP:
000012BE  323C 0001                420      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000012C2  303C 0048                421      MOVE    #72,        D0          ; Play Sound
000012C6  4E4F                     422      TRAP    #15                     ; Trap (Perform action)
000012C8  4E75                     423      RTS                             ; Return to subroutine
000012CA                           424  
000012CA                           425  OPPS_LOAD:
000012CA  43F9 00001461            426      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000012D0  323C 0002                427      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000012D4  303C 0047                428      MOVE    #71,        D0          ; Load into memory
000012D8  4E4F                     429      TRAP    #15                     ; Trap (Perform action)
000012DA  4E75                     430      RTS                             ; Return to subroutine
000012DC                           431  
000012DC                           432  PLAY_OPPS:
000012DC  323C 0002                433      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000012E0  303C 0048                434      MOVE    #72,        D0          ; Play Sound
000012E4  4E4F                     435      TRAP    #15                     ; Trap (Perform action)
000012E6  4E75                     436      RTS                             ; Return to subroutine
000012E8                           437  
000012E8                           438  *-----------------------------------------------------------
000012E8                           439  * Subroutine    : Draw Player
000012E8                           440  * Description   : Draw Player Square
000012E8                           441  *-----------------------------------------------------------
000012E8                           442  DRAW_PLAYER:
000012E8                           443      ; Set Pixel Colors
000012E8  223C 00FFFFFF            444      MOVE.L  #WHITE,     D1          ; Set Background color
000012EE  103C 0050                445      MOVE.B  #80,        D0          ; Task for Background Color
000012F2  4E4F                     446      TRAP    #15                     ; Trap (Perform action)
000012F4                           447  
000012F4                           448      ; Set X, Y, Width and Height
000012F4  2239 00001430            449      MOVE.L  PLAYER_X,   D1          ; X
000012FA  2439 00001434            450      MOVE.L  PLAYER_Y,   D2          ; Y
00001300  2639 00001430            451      MOVE.L  PLAYER_X,   D3
00001306  5083                     452      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001308  2839 00001434            453      MOVE.L  PLAYER_Y,   D4 
0000130E  5084                     454      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001310                           455      
00001310                           456      ; Draw Player
00001310  103C 0057                457      MOVE.B  #87,        D0          ; Draw Player
00001314  4E4F                     458      TRAP    #15                     ; Trap (Perform action)
00001316  4E75                     459      RTS                             ; Return to subroutine
00001318                           460  
00001318                           461  *-----------------------------------------------------------
00001318                           462  * Subroutine    : Draw Enemy
00001318                           463  * Description   : Draw Enemy Square
00001318                           464  *-----------------------------------------------------------
00001318                           465  DRAW_ENEMY:
00001318                           466      ; Set Pixel Colors
00001318  223C 000000FF            467      MOVE.L  #RED,       D1          ; Set Background color
0000131E  103C 0050                468      MOVE.B  #80,        D0          ; Task for Background Color
00001322  4E4F                     469      TRAP    #15                     ; Trap (Perform action)
00001324                           470  
00001324                           471      ; Set X, Y, Width and Height
00001324  2239 00001448            472      MOVE.L  ENEMY_X,    D1          ; X
0000132A  2439 0000144C            473      MOVE.L  ENEMY_Y,    D2          ; Y
00001330  2639 00001448            474      MOVE.L  ENEMY_X,    D3
00001336  5083                     475      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001338  2839 0000144C            476      MOVE.L  ENEMY_Y,    D4 
0000133E  5084                     477      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001340                           478      
00001340                           479      ; Draw Enemy    
00001340  103C 0057                480      MOVE.B  #87,        D0          ; Draw Enemy
00001344  4E4F                     481      TRAP    #15                     ; Trap (Perform action)
00001346  4E75                     482      RTS                             ; Return to subroutine
00001348                           483  
00001348                           484  *-----------------------------------------------------------
00001348                           485  * Subroutine    : Collision Check
00001348                           486  * Description   : Axis-Aligned Bounding Box Collision Detection
00001348                           487  * Algorithm checks for overlap on the 4 sides of the Player and 
00001348                           488  * Enemy rectangles
00001348                           489  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001348                           490  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001348                           491  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001348                           492  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001348                           493  *-----------------------------------------------------------
00001348                           494  CHECK_COLLISIONS:
00001348  4281                     495      CLR.L   D1                      ; Clear D1
0000134A  4282                     496      CLR.L   D2                      ; Clear D2
0000134C                           497  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000134C  2239 00001430            498      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001352  2439 00001448            499      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001358  D4B8 0008                500      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000135C  B481                     501      CMP.L   D1,         D2          ; Do the Overlap ?
0000135E  6F00 0006                502      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001362  6000 0044                503      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001366                           504  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001366  D2B8 0008                505      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000136A  2439 00001448            506      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001370  B481                     507      CMP.L   D1,         D2          ; Do they OverLap ?
00001372  6C00 0006                508      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00001376  6000 0030                509      BRA     COLLISION_CHECK_DONE    ; If not no collision   
0000137A                           510  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
0000137A  2239 00001434            511      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001380  2439 0000144C            512      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00001386  D4B8 0008                513      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000138A  B481                     514      CMP.L   D1,         D2          ; Do they Overlap ?
0000138C  6F00 0006                515      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00001390  6000 0016                516      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001394                           517  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001394  D2B8 0008                518      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001398  2439 0000144C            519      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
0000139E  B481                     520      CMP.L   D1,         D2          ; Do they OverLap ?
000013A0  6C00 0016                521      BGE     COLLISION               ; Collision !
000013A4  6000 0002                522      BRA     COLLISION_CHECK_DONE    ; If not no collision
000013A8                           523  COLLISION_CHECK_DONE:               ; No Collision Update points
000013A8  5281                     524      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000013AA  D2B9 00001438            525      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000013B0  23C1 00001438            526      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000013B6  4E75                     527      RTS                             ; Return to subroutine
000013B8                           528  
000013B8                           529  COLLISION:
000013B8  6100 FF22                530      BSR     PLAY_OPPS               ; Play Opps Wav
000013BC  23FC 00000000 00001438   531      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000013C6  4E75                     532      RTS                             ; Return to subroutine
000013C8                           533  
000013C8                           534  *-----------------------------------------------------------
000013C8                           535  * Subroutine    : EXIT
000013C8                           536  * Description   : Exit message and End Game
000013C8                           537  *-----------------------------------------------------------
000013C8                           538  EXIT:
000013C8                           539      ; Show if Exiting is Running
000013C8  103C 000B                540      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013CC  323C 4004                541      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000013D0  4E4F                     542      TRAP    #15                     ; Trap (Perform action)
000013D2  43F9 0000141B            543      LEA     EXIT_MSG,   A1          ; Exit
000013D8  303C 000D                544      MOVE    #13,        D0          ; No Line feed
000013DC  4E4F                     545      TRAP    #15                     ; Trap (Perform action)
000013DE  103C 0009                546      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000013E2  4E4F                     547      TRAP    #15                     ; Trap (Perform action)
000013E4  FFFF FFFF                548      SIMHALT
000013E8                           549  
000013E8                           550  *-----------------------------------------------------------
000013E8                           551  * Section       : Messages
000013E8                           552  * Description   : Messages to Print on Console, names should be
000013E8                           553  * self documenting
000013E8                           554  *-----------------------------------------------------------
000013E8= 53 63 6F 72 65 20 ...    555  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
000013F1= 4B 65 79 43 6F 64 ...    556  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
000013FC= 4A 75 6D 70 2E 2E ...    557  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001405                           558  ;---------------------------------------------------------
00001405= 55 70 2E 2E 2E 2E 00     559  UP_MSG          DC.B    'Up....', 0       ; Up Message
0000140C= 44 6F 77 6E 2E 2E ...    560  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
00001415                           561  ;-----------------------------------------------------------
00001415= 58 3A 00                 562  X_MSG           DC.B    'X:', 0             ; X Position Message
00001418= 59 3A 00                 563  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000141B                           564  
0000141B= 45 78 69 74 69 6E ...    565  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001427                           566  
00001427                           567  *-----------------------------------------------------------
00001427                           568  * Section       : Graphic Colors
00001427                           569  * Description   : Screen Pixel Color
00001427                           570  *-----------------------------------------------------------
00001427  =00FFFFFF                571  WHITE           EQU     $00FFFFFF
00001427  =000000FF                572  RED             EQU     $000000FF
00001427                           573  
00001427                           574  *-----------------------------------------------------------
00001427                           575  * Section       : Screen Size
00001427                           576  * Description   : Screen Width and Height
00001427                           577  *-----------------------------------------------------------
00001428                           578  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
0000142A                           579  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
0000142C                           580  
0000142C                           581  *-----------------------------------------------------------
0000142C                           582  * Section       : Keyboard Input
0000142C                           583  * Description   : Used for storing Keypresses
0000142C                           584  *-----------------------------------------------------------
0000142C                           585  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001430                           586  
00001430                           587  *-----------------------------------------------------------
00001430                           588  * Section       : Character Positions
00001430                           589  * Description   : Player and Enemy Position Memory Locations
00001430                           590  *-----------------------------------------------------------
00001430                           591  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001434                           592  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001438                           593  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
0000143C                           594  
0000143C                           595  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001440                           596  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
00001444                           597  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001448                           598  
00001448                           599  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
0000144C                           600  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001450                           601  
00001450                           602  *-----------------------------------------------------------
00001450                           603  * Section       : Sounds
00001450                           604  * Description   : Sound files, which are then loaded and given
00001450                           605  * an address in memory, they take a longtime to process and play
00001450                           606  * so keep the files small. Used https://voicemaker.in/ to 
00001450                           607  * generate and Audacity to convert MP3 to WAV
00001450                           608  *-----------------------------------------------------------
00001450= 6A 75 6D 70 2E 77 ...    609  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001459= 72 75 6E 2E 77 61 ...    610  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
00001461= 6F 70 70 73 2E 77 ...    611  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
0000146A                           612  
0000146A                           613      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    1348
COLLISION           13B8
COLLISION_CHECK_DONE  13A8
CURRENT_KEY         142C
DOWN                111E
DOWNARROW           28
DOWN_MSG            140C
DRAW                113E
DRAW_ENEMY          1318
DRAW_PLAYER         12E8
DRAW_PLYR_DATA      115C
ENEMY_X             1448
ENEMY_Y             144C
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                13C8
EXIT_MSG            141B
GAME                107E
GAMELOOP            1082
GND_FALSE           0
GND_TRUE            1
IDLE                1288
INITIALISE          1000
INPUT               10A8
IS_PLAYER_ON_GND    1210
JMP_INDEX           1
JUMP                1264
JUMP_DONE           1286
JUMP_LOAD           12AC
JUMP_MSG            13FC
JUMP_WAV            1450
KEYCODE_MSG         13F1
LEFTARROW           25
MOVE_ENEMY          1126
OPPS_INDEX          2
OPPS_LOAD           12CA
OPPS_WAV            1461
PERFORM_JUMP        1276
PLAYER_SCORE        1438
PLAYER_X            1430
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  134C
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1366
PLAYER_Y            1434
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  137A
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1394
PLAY_JUMP           12BE
PLAY_OPPS           12DC
PLAY_RUN            12A0
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1440
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         1444
PLYR_VELOCITY       143C
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       10C6
RED                 FF
RESET_ENEMY_POSITION  112E
RIGHTARROW          27
RUN_INDEX           0
RUN_LOAD            128E
RUN_WAV             1459
SCORE_MSG           13E8
SCREEN_H            142A
SCREEN_W            1428
SET_OFF_GROUND      1258
SET_ON_GROUND       1230
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UP                  1116
UPARROW             26
UPDATE              10FC
UP_MSG              1405
WAIT                109A
WHITE               FFFFFF
X_MSG               1415
Y_MSG               1418
