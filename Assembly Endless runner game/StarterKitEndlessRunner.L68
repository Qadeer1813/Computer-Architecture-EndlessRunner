00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 05/03/2023 01:54:59

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21      
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =00000014                 29  PLYR_W_INIT EQU         20          ; Players initial Width
00001000  =00000014                 30  PLYR_H_INIT EQU         20          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000                            34  ;-----------------------------------------------------------
00001000                            35  ;PLYR_UP_V   EQU         -05          ; Player UP Velocity
00001000                            36  ;PLYR_DOWN_V EQU         02          ; Player DOWN Velocity
00001000                            37  ;-----------------------------------------------------------
00001000  =00000001                 38  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            39  
00001000  =00000001                 40  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 41  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            42  
00001000  =00000000                 43  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 44  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 45  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            46  
00001000  =00000014                 47  ENMY_W_INIT EQU         20          ; Enemy initial Width
00001000  =00000014                 48  ENMY_H_INIT EQU         20          ; Enemy initial Height
00001000                            49  
00001000                            50  *-----------------------------------------------------------
00001000                            51  * Section       : Game Stats
00001000                            52  * Description   : Points, Health
00001000                            53  *-----------------------------------------------------------
00001000  =00000001                 54  POINTS      EQU         01          ; Points added
00001000  =00002000                 55  HEALTH      EQU         $2000       ; Health Sub
00001000                            56  *-----------------------------------------------------------
00001000                            57  * Section       : Keyboard Keys
00001000                            58  * Description   : Spacebar and Escape or two functioning keys
00001000                            59  * Spacebar to JUMP and Escape to Exit Game
00001000                            60  *-----------------------------------------------------------
00001000  =00000020                 61  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 62  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            63  ;------------------------------------------------------------  
00001000  =00000026                 64  UPARROW     EQU         $26         ; Right key ASCII Keycode
00001000  =00000028                 65  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode 
00001000                            66  ;------------------------------------------------------------    
00001000                            67  *-----------------------------------------------------------
00001000                            68  * Subroutine    : Initialise
00001000                            69  * Description   : Initialise game data into memory such as 
00001000                            70  * sounds and screen size
00001000                            71  *-----------------------------------------------------------
00001000                            72  INITIALISE:
00001000                            73      ; Initialise Sounds
00001000  6100 0448                 74      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 0462                 75      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 047C                 76      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            77  
0000100C                            78      ; Screen Size
0000100C  103C 0021                 79      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      80      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      81      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 000018FC             82      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      83      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 000018FA             84      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            85  
00001022                            86      ; Place the Player at the center of the screen
00001022  4281                      87      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024                            88      ;MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001024                            89      ;DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001024  23FC 00000000 00001902    90      MOVE.L  #00,         PLAYER_X    ; Players X set to 0 Position
0000102E                            91  
0000102E  4281                      92      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001030  3239 000018FC             93      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036  82FC 0002                 94      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000103A  23C1 00001906             95      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001040                            96  
00001040                            97      ; Initialise Player Score
00001040  4281                      98      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                      99      MOVE.L  #0,         D1          ; Init Score
00001044  23C1 0000190A            100      MOVE.L  D1,         PLAYER_SCORE
0000104A                           101      
0000104A                           102      ;Initialize Health
0000104A  4281                     103      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  7264                     104      MOVE.L  #100,       D1          ; Init Score
0000104E  23C1 0000190E            105      MOVE.L  D1,         HEALTH_VALUE
00001054                           106  
00001054                           107      ; Initialize Player on Ground
00001054  23FC 00000001 0000191A   108      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
0000105E                           109  
0000105E                           110      ; Initial Position for Enemy 1   
0000105E  4281                     111      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001060  3239 000018FA            112      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001066  23C1 00001926            113      MOVE.L  D1,         ENEMY_X_1   ; Enemy X Position
0000106C                           114  
0000106C  4281                     115      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  3239 000018FC            116      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001074  323C 0055                117      MOVE.W  #85,        D1          ; divide by 2 for center on Y Axis
00001078  23C1 0000192A            118      MOVE.L  D1,         ENEMY_Y_1   ; Enemy Y Position
0000107E                           119  
0000107E                           120      ; Initial Position for Enemy 2   
0000107E  4281                     121      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001080  3239 000018FA            122      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001086  23C1 0000192E            123      MOVE.L  D1,         ENEMY_X_2   ; Enemy X Position
0000108C                           124  
0000108C  4281                     125      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000108E  3239 000018FC            126      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001094  323C 0078                127      MOVE.W  #120,        D1          ; divide by 2 for center on Y Axis
00001098  23C1 00001932            128      MOVE.L  D1,         ENEMY_Y_2   ; Enemy Y Position
0000109E                           129  
0000109E                           130      ; Initial Position for Enemy 3   
0000109E  4281                     131      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010A0  3239 000018FA            132      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010A6  23C1 00001936            133      MOVE.L  D1,         ENEMY_X_3   ; Enemy X Position
000010AC                           134  
000010AC  4281                     135      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010AE  3239 000018FC            136      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010B4  323C 009B                137      MOVE.W  #155,        D1          ; divide by 2 for center on Y Axis
000010B8  23C1 0000193A            138      MOVE.L  D1,         ENEMY_Y_3   ; Enemy Y Position
000010BE                           139      
000010BE                           140      ; Initial Position for Enemy 4   
000010BE  4281                     141      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010C0  3239 000018FA            142      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010C6  23C1 0000193E            143      MOVE.L  D1,         ENEMY_X_4   ; Enemy X Position
000010CC                           144  
000010CC  4281                     145      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010CE  3239 000018FC            146      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010D4  323C 00BE                147      MOVE.W  #190,        D1          ; divide by 2 for center on Y Axis
000010D8  23C1 00001942            148      MOVE.L  D1,         ENEMY_Y_4   ; Enemy Y Position
000010DE                           149  
000010DE                           150      ; Initial Position for Enemy Center(5)
000010DE  4281                     151      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010E0  3239 000018FA            152      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010E6  23C1 0000191E            153      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000010EC                           154      
000010EC  4281                     155      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010EE  3239 000018FC            156      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010F4  82FC 0002                157      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000010F8  23C1 00001922            158      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
000010FE                           159      
000010FE                           160      ; Initial Position for Enemy 6   
000010FE                           161  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           162  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010FE                           163  *    MOVE.L  D1,         ENEMY_X_6   ; Enemy X Position
000010FE                           164  *
000010FE                           165  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           166  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010FE                           167  *    MOVE.W  #290,        D1          ; divide by 2 for center on Y Axis
000010FE                           168  *    MOVE.L  D1,         ENEMY_Y_6   ; Enemy Y Position
000010FE                           169      
000010FE                           170      ; Initial Position for Enemy 7   
000010FE                           171  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           172  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010FE                           173  *    MOVE.L  D1,         ENEMY_X_7   ; Enemy X Position
000010FE                           174  *
000010FE                           175  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           176  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010FE                           177  *    MOVE.W  #255,        D1          ; divide by 2 for center on Y Axis
000010FE                           178  *    MOVE.L  D1,         ENEMY_Y_7   ; Enemy Y Position
000010FE                           179  
000010FE                           180      ; Initial Position for Enemy 8   
000010FE                           181  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           182  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010FE                           183  *    MOVE.L  D1,         ENEMY_X_8   ; Enemy X Position
000010FE                           184  *
000010FE                           185  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           186  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010FE                           187  *    MOVE.W  #255,        D1          ; divide by 2 for center on Y Axis
000010FE                           188  *    MOVE.L  D1,         ENEMY_Y_8   ; Enemy Y Position
000010FE                           189  
000010FE                           190      ; Initial Position for Enemy 9   
000010FE                           191  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           192  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000010FE                           193  *    MOVE.L  D1,         ENEMY_X_9   ; Enemy X Position
000010FE                           194  *
000010FE                           195  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000010FE                           196  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000010FE                           197  *    MOVE.W  #255,        D1          ; divide by 2 for center on Y Axis
000010FE                           198  *    MOVE.L  D1,         ENEMY_Y_9   ; Enemy Y Position
000010FE                           199  
000010FE                           200          
000010FE                           201      ; Enable the screen back buffer(see easy 68k help)
000010FE  103C 005C                202      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001102  123C 0011                203      MOVE.B  #17,        D1          ; Combine Tasks
00001106  4E4F                     204      TRAP    #15                     ; Trap (Perform action)
00001108                           205  
00001108                           206      ; Clear the screen (see easy 68k help)
00001108  103C 000B                207      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000110C  323C FF00                208      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001110  4E4F                     209      TRAP    #15                     ; Trap (Perform action)
00001112                           210  
00001112                           211  *-----------------------------------------------------------
00001112                           212  * Subroutine    : Game
00001112                           213  * Description   : Game including main GameLoop. GameLoop is like
00001112                           214  * a while loop in that it runs forever until interupted
00001112                           215  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001112                           216  *-----------------------------------------------------------
00001112                           217  GAME:
00001112  6100 0348                218      BSR     PLAY_RUN                ; Play Run Wav
00001116                           219  GAMELOOP:
00001116  7008                     220      MOVEQ   #08,D0                   ; Get time in 1/100 seconds
00001118  4E4F                     221      TRAP    #15
0000111A                           222  
0000111A  2F01                     223      MOVE.L  D1,-(SP)                ; Push time on the stack
0000111C                           224      
0000111C                           225      ; Main Gameloop
0000111C  6100 003E                226      BSR     INPUT                   ; Check Keyboard Input
00001120  6100 00A4                227      BSR     UPDATE_1
00001124  6100 00BA                228      BSR     UPDATE_2
00001128  6100 00D0                229      BSR     UPDATE_3
0000112C  6100 00E6                230      BSR     UPDATE_4
00001130  6100 007A                231      BSR     UPDATE                  ; Update positions and points(5)
00001134                           232  *    BSR     UPDATE_6
00001134  6100 04BE                233      BSR     CHECK_COLLISIONS_1
00001138  6100 0530                234      BSR     CHECK_COLLISIONS_2
0000113C  6100 05A2                235      BSR     CHECK_COLLISIONS_3
00001140  6100 0614                236      BSR     CHECK_COLLISIONS_4
00001144  6100 0686                237      BSR     CHECK_COLLISIONS        ; Check for Collisions(5)
00001148                           238  *    BSR     CHECK_COLLISIONS_6
00001148  6100 019E                239      BSR     DRAW                    ; Draw the Scene
0000114C                           240      
0000114C  2E1F                     241      MOVE.L  (SP)+,D7
0000114E                           242  WAIT:
0000114E  7008                     243      MOVEQ   #8,D0                   ; Get time in 1/100 ths seconds
00001150  4E4F                     244      TRAP    #15
00001152  9287                     245      SUB.L   D7,D1                   ; Subtract previous time from current time
00001154  B23C 0002                246      CMP.B   #02,D1                  ; Compare with 9/100ths adding the wait allowed the character and enemy to slow down to the same pace 
00001158                           247                                      ;but i also changed the speed of the enenemy  so the enemy is slightly faster than character
00001158  6BF4                     248      BMI.S   WAIT                    ; Loop if time not up yet
0000115A                           249  
0000115A  60BA                     250      BRA     GAMELOOP                ; Loop back to Game loop
0000115C                           251      
0000115C                           252  
0000115C                           253  *-----------------------------------------------------------
0000115C                           254  * Subroutine    : Input
0000115C                           255  * Description   : Process Keyboard Input
0000115C                           256  *-----------------------------------------------------------
0000115C                           257  INPUT:
0000115C                           258      ; Process Input
0000115C  4281                     259      CLR.L   D1                      ; Clear Data Register
0000115E  103C 0013                260      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
00001162  4E4F                     261      TRAP    #15                     ; Trap (Perform action)
00001164  1401                     262      MOVE.B  D1,         D2          ; Move last key D1 to D2
00001166  B43C 0000                263      CMP.B   #00,        D2          ; Key is pressed
0000116A  6700 000E                264      BEQ     PROCESS_INPUT           ; Process Key
0000116E  4E4F                     265      TRAP    #15                     ; Trap for Last Key
00001170                           266      ; Check if key still pressed
00001170  B23C 00FF                267      CMP.B   #$FF,       D1          ; Is it still pressed
00001174  6700 0004                268      BEQ     PROCESS_INPUT           ; Process Last Key
00001178  4E75                     269      RTS                             ; Return to subroutine
0000117A                           270  
0000117A                           271  *-----------------------------------------------------------
0000117A                           272  * Subroutine    : Process Input
0000117A                           273  * Description   : Branch based on keys pressed
0000117A                           274  *-----------------------------------------------------------
0000117A                           275  PROCESS_INPUT:
0000117A  23C2 000018FE            276      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
00001180  0CB9 0000001B 000018FE   277      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
0000118A  6700 0704                278      BEQ     EXIT                    ; Exit if Escape
0000118E                           279      ;--------------------------------------------------
0000118E  0CB9 00000026 000018FE   280      CMP.L   #UPARROW,  CURRENT_KEY  ; Is Current Key UP
00001198  6700 0094                281      BEQ     UP                      ; Up
0000119C  0CB9 00000028 000018FE   282      CMP.L   #DOWNARROW,CURRENT_KEY  ; Is Current Key Down
000011A6  6700 00A6                283      BEQ     DOWN                    ; Down
000011AA                           284      ;--------------------------------------------------
000011AA                           285      ;BRA     IDLE                    ; Or Idle
000011AA  4E75                     286      RTS                             ; Return to subroutine
000011AC                           287  
000011AC                           288  *-----------------------------------------------------------
000011AC                           289  * Subroutine    : Update
000011AC                           290  * Description   : Main update loop update Player and Enemies
000011AC                           291  *-----------------------------------------------------------
000011AC                           292  UPDATE:
000011AC                           293      ; Move the Enemy
000011AC  4281                     294      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011AE  4281                     295      CLR.L   D1                      ; Clear the contents of D0
000011B0  2239 0000191E            296      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
000011B6  B2BC 00000000            297      CMP.L   #00,        D1
000011BC  6F00 00DA                298      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
000011C0  6000 00B6                299      BRA     MOVE_ENEMY              ; Move the Enemy
000011C4  4E75                     300      RTS                             ; Return to subroutine
000011C6                           301    
000011C6                           302  UPDATE_1:
000011C6                           303      ; Move the Enemy
000011C6  4281                     304      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011C8  4281                     305      CLR.L   D1                      ; Clear the contents of D0
000011CA  2239 00001926            306      MOVE.L  ENEMY_X_1,  D1          ; Move the Enemy X Position to D0
000011D0  B2BC 00000000            307      CMP.L   #00,        D1
000011D6  6F00 00D0                308      BLE     RESET_ENEMY_POSITION_1  ; Reset Enemy if off Screen
000011DA  6000 0094                309      BRA     MOVE_ENEMY_1
000011DE  4E75                     310      RTS        
000011E0                           311  
000011E0                           312  UPDATE_2:
000011E0                           313      ; Move the Enemy
000011E0  4281                     314      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011E2  4281                     315      CLR.L   D1                      ; Clear the contents of D0
000011E4  2239 0000192E            316      MOVE.L  ENEMY_X_2,  D1          ; Move the Enemy X Position to D0
000011EA  B2BC 00000000            317      CMP.L   #00,        D1
000011F0  6F00 00C6                318      BLE     RESET_ENEMY_POSITION_2  ; Reset Enemy if off Screen
000011F4  6000 0092                319      BRA     MOVE_ENEMY_2
000011F8  4E75                     320      RTS   
000011FA                           321      
000011FA                           322  UPDATE_3:
000011FA                           323      ; Move the Enemy
000011FA  4281                     324      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011FC  4281                     325      CLR.L   D1                      ; Clear the contents of D0
000011FE  2239 00001936            326      MOVE.L  ENEMY_X_3,  D1          ; Move the Enemy X Position to D0
00001204  B2BC 00000000            327      CMP.L   #00,        D1
0000120A  6F00 00BC                328      BLE     RESET_ENEMY_POSITION_3  ; Reset Enemy if off Screen
0000120E  6000 0070                329      BRA     MOVE_ENEMY_3
00001212  4E75                     330      RTS   
00001214                           331  
00001214                           332  UPDATE_4:
00001214                           333      ; Move the Enemy
00001214  4281                     334      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001216  4281                     335      CLR.L   D1                      ; Clear the contents of D0
00001218  2239 0000193E            336      MOVE.L  ENEMY_X_4,  D1          ; Move the Enemy X Position to D0
0000121E  B2BC 00000000            337      CMP.L   #00,        D1
00001224  6F00 00B2                338      BLE     RESET_ENEMY_POSITION_4  ; Reset Enemy if off Screen
00001228  6000 0066                339      BRA     MOVE_ENEMY_4
0000122C  4E75                     340      RTS   
0000122E                           341      
0000122E                           342  *UPDATE_6:
0000122E                           343  *    ; Move the Enemy
0000122E                           344  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000122E                           345  *    CLR.L   D1                      ; Clear the contents of D0
0000122E                           346  *    MOVE.L  ENEMY_X_6,  D1          ; Move the Enemy X Position to D0
0000122E                           347  *    CMP.L   #00,        D1
0000122E                           348  *    BLE     RESET_ENEMY_POSITION_6  ; Reset Enemy if off Screen
0000122E                           349  *    BRA     MOVE_ENEMY_6
0000122E                           350  *    RTS  
0000122E                           351  *-----------------------------------------------------------
0000122E                           352  * Subroutine    : UP
0000122E                           353  * Description   : Move the enemy up 2 frames
0000122E                           354  * By: Qadeer Hussain
0000122E                           355  *-----------------------------------------------------------
0000122E                           356  UP:  
0000122E  55B9 00001906            357      SUB.L   #2, PLAYER_Y
00001234                           358      ; Check if player is out of bounds
00001234  0CB9 00000055 00001906   359      CMP.L   #85, PLAYER_Y     ; check if player is above top of screen
0000123E  6D00 0004                360      BLT     OUT_OF_BOUNDS_UP
00001242  4E75                     361      RTS
00001244                           362      
00001244                           363  OUT_OF_BOUNDS_UP:
00001244                           364      ; Player is out of bounds, move back into screen
00001244  7402                     365      MOVE.L  #2, D2   ; set D2 to the amount to move
00001246  D5B9 00001906            366      ADD.L   D2, PLAYER_Y  ; move player down
0000124C  4E75                     367      RTS
0000124E                           368  *-----------------------------------------------------------
0000124E                           369  * Subroutine    : DOWN
0000124E                           370  * Description   : Move the enemy down 2 frames
0000124E                           371  * By: Qadeer Hussain
0000124E                           372  *-----------------------------------------------------------
0000124E                           373  DOWN:
0000124E  54B9 00001906            374      ADD.L   #2, PLAYER_Y 
00001254                           375      ; Check if player is out of bounds
00001254  0CB9 00000177 00001906   376      CMP.L   #375, PLAYER_Y  ; check if player is below bottom of screen
0000125E  6C00 0004                377      BGE     OUT_OF_BOUNDS_DOWN
00001262  4E75                     378      RTS    
00001264                           379  
00001264                           380  OUT_OF_BOUNDS_DOWN:
00001264                           381      ; Player is out of bounds, move back into screen
00001264  7402                     382      MOVE.L  #2, D2   ; set D2 to the amount to move
00001266  4482                     383      NEG.L   D2      ; negate D2 to move upwards
00001268  D5B9 00001906            384      ADD.L   D2, PLAYER_Y  ; move player up
0000126E  4E75                     385      RTS
00001270                           386  *-----------------------------------------------------------
00001270                           387  * Subroutine    : Move Enemy
00001270                           388  * Description   : Move Enemy Right to Left
00001270                           389  *-----------------------------------------------------------
00001270                           390  MOVE_ENEMY_1:
00001270  5BB9 00001926            391       SUB.L   #05,   ENEMY_X_1   ; Move enemy by X Value
00001276  4E75                     392       RTS
00001278                           393       
00001278                           394  MOVE_ENEMY:
00001278  5BB9 0000191E            395      SUB.L   #05,   ENEMY_X     ; Move enemy(5) by X Value
0000127E  4E75                     396      RTS
00001280                           397  
00001280                           398  MOVE_ENEMY_3:
00001280  5BB9 00001936            399       SUB.L   #05,   ENEMY_X_3   ; Move enemy by X Value
00001286  4E75                     400       RTS
00001288                           401       
00001288                           402  MOVE_ENEMY_2:
00001288  59B9 0000192E            403       SUB.L   #04,   ENEMY_X_2   ; Move enemy by X Value
0000128E  4E75                     404       RTS
00001290                           405       
00001290                           406  MOVE_ENEMY_4:
00001290  59B9 0000193E            407       SUB.L   #04,   ENEMY_X_4   ; Move enemy by X Value
00001296  4E75                     408       RTS
00001298                           409       
00001298                           410  *MOVE_ENEMY_6:
00001298                           411  *     SUB.L   #04,   ENEMY_X_6   ; Move enemy by X Value
00001298                           412  *     RTS
00001298                           413       
00001298                           414  
00001298                           415      
00001298                           416  *-----------------------------------------------------------
00001298                           417  * Subroutine    : Reset Enemy
00001298                           418  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001298                           419  *-----------------------------------------------------------
00001298                           420  RESET_ENEMY_POSITION:
00001298  4281                     421      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000129A  3239 000018FA            422      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012A0  23C1 0000191E            423      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000012A6  4E75                     424      RTS
000012A8                           425      
000012A8                           426  RESET_ENEMY_POSITION_1:
000012A8  4281                     427      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012AA  3239 000018FA            428      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012B0  23C1 00001926            429      MOVE.L  D1,         ENEMY_X_1     ; Enemy X Position
000012B6  4E75                     430      RTS
000012B8                           431  RESET_ENEMY_POSITION_2:
000012B8  4281                     432      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012BA  3239 000018FA            433      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012C0  23C1 0000192E            434      MOVE.L  D1,         ENEMY_X_2     ; Enemy X Position
000012C6  4E75                     435      RTS
000012C8                           436      
000012C8                           437  RESET_ENEMY_POSITION_3:
000012C8  4281                     438      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012CA  3239 000018FA            439      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012D0  23C1 00001936            440      MOVE.L  D1,         ENEMY_X_3     ; Enemy X Position
000012D6  4E75                     441      RTS
000012D8                           442      
000012D8                           443  RESET_ENEMY_POSITION_4:
000012D8  4281                     444      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012DA  3239 000018FA            445      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012E0  23C1 0000193E            446      MOVE.L  D1,         ENEMY_X_4     ; Enemy X Position
000012E6  4E75                     447      RTS
000012E8                           448      
000012E8                           449  *RESET_ENEMY_POSITION_6:
000012E8                           450  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012E8                           451  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000012E8                           452  *    MOVE.L  D1,         ENEMY_X_6     ; Enemy X Position
000012E8                           453  *    RTS
000012E8                           454  *-----------------------------------------------------------
000012E8                           455  * Subroutine    : Draw
000012E8                           456  * Description   : Draw Screen
000012E8                           457  *-----------------------------------------------------------
000012E8                           458  DRAW: 
000012E8                           459      ; Enable back buffer
000012E8  103C 005E                460      MOVE.B  #94,        D0
000012EC  4E4F                     461      TRAP    #15
000012EE                           462  
000012EE                           463      ; Clear the screen
000012EE  103C 000B                464      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012F2  323C FF00                465      MOVE.W  #$FF00,     D1          ; Clear contents
000012F6  4E4F                     466      TRAP    #15                     ; Trap (Perform action)
000012F8                           467  
000012F8  6100 001C                468      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000012FC  6100 01A6                469      BSR     DRAW_PLAYER             ; Draw Player
00001300  6100 01DA                470      BSR     DRAW_ENEMY_1            ; Draw Enemey No.1
00001304  6100 020E                471      BSR     DRAW_ENEMY_2
00001308  6100 0242                472      BSR     DRAW_ENEMY_3
0000130C  6100 0276                473      BSR     DRAW_ENEMY_4
00001310  6100 02AA                474      BSR     DRAW_ENEMY              ; Draw Enemy No.5
00001314                           475  *    BSR     DRAW_ENEMY_6
00001314  4E75                     476      RTS                             ; Return to subroutine
00001316                           477  
00001316                           478  *-----------------------------------------------------------
00001316                           479  * Subroutine    : Draw Player Data
00001316                           480  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001316                           481  *-----------------------------------------------------------
00001316                           482  DRAW_PLYR_DATA:
00001316  4281                     483      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001318                           484  
00001318                           485      ; Player Score Message
00001318  103C 000B                486      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000131C  323C 0201                487      MOVE.W  #$0201,     D1          ; Col 02, Row 01
00001320  4E4F                     488      TRAP    #15                     ; Trap (Perform action)
00001322  43F9 000018B0            489      LEA     SCORE_MSG,  A1          ; Score Message
00001328  303C 000D                490      MOVE    #13,        D0          ; No Line feed
0000132C  4E4F                     491      TRAP    #15                     ; Trap (Perform action)
0000132E                           492  
0000132E                           493      ; Player Score Value
0000132E  103C 000B                494      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001332  323C 0901                495      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00001336  4E4F                     496      TRAP    #15                     ; Trap (Perform action)
00001338  103C 0003                497      MOVE.B  #03,        D0          ; Display number at D1.L
0000133C  2239 0000190A            498      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
00001342  4E4F                     499      TRAP    #15                     ; Trap (Perform action)
00001344                           500      
00001344                           501      ; Health Message
00001344  103C 000B                502      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001348  323C 0203                503      MOVE.W  #$0203,     D1          ; Col 02, Row 03
0000134C  4E4F                     504      TRAP    #15                     ; Trap (Perform action)
0000134E  43F9 000018E3            505      LEA     HEALTH_MSG,   A1          ; Health Message
00001354  303C 000D                506      MOVE    #13,        D0          ; No Line feed
00001358  4E4F                     507      TRAP    #15                     ; Trap (Perform action)
0000135A                           508      
0000135A                           509      ; Health Value
0000135A  103C 000B                510      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000135E  323C 0903                511      MOVE.W  #$0903,     D1          ; Col 09, Row 03
00001362  4E4F                     512      TRAP    #15                     ; Trap (Perform action)
00001364  103C 0003                513      MOVE.B  #03,        D0          ; Display number at D1.L
00001368  2239 0000190E            514      MOVE.L  HEALTH_VALUE,  D1          ; Move Score to D1.L
0000136E  4E4F                     515      TRAP    #15                     ; Trap (Perform action)
00001370                           516      
00001370                           517      ; Player X Message
00001370  103C 000B                518      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001374  323C 0202                519      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001378  4E4F                     520      TRAP    #15                     ; Trap (Perform action)
0000137A  43F9 000018DD            521      LEA     X_MSG,      A1          ; X Message
00001380  303C 000D                522      MOVE    #13,        D0          ; No Line feed
00001384  4E4F                     523      TRAP    #15                     ; Trap (Perform action)
00001386                           524      
00001386                           525      ; Player X
00001386  103C 000B                526      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
0000138A  323C 0502                527      MOVE.W  #$0502,     D1          ; Col 05, Row 02
0000138E  4E4F                     528      TRAP    #15                     ; Trap (Perform action)
00001390  103C 0003                529      MOVE.B  #03,        D0          ; Display number at D1.L
00001394  2239 00001902            530      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
0000139A  4E4F                     531      TRAP    #15                     ; Trap (Perform action)
0000139C                           532      
0000139C                           533      ; Player Y Message
0000139C  103C 000B                534      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013A0  323C 1002                535      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000013A4  4E4F                     536      TRAP    #15                     ; Trap (Perform action)
000013A6  43F9 000018E0            537      LEA     Y_MSG,      A1          ; Y Message
000013AC  303C 000D                538      MOVE    #13,        D0          ; No Line feed
000013B0  4E4F                     539      TRAP    #15                     ; Trap (Perform action)
000013B2                           540      
000013B2                           541      ; Player Y
000013B2  103C 000B                542      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013B6  323C 1202                543      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000013BA  4E4F                     544      TRAP    #15                     ; Trap (Perform action)
000013BC  103C 0003                545      MOVE.B  #03,        D0          ; Display number at D1.L
000013C0  2239 00001906            546      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000013C6  4E4F                     547      TRAP    #15                     ; Trap (Perform action) 
000013C8                           548      
000013C8                           549      ; Show Keys Pressed
000013C8  103C 000B                550      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013CC  323C 2001                551      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000013D0  4E4F                     552      TRAP    #15                     ; Trap (Perform action)
000013D2  43F9 000018B9            553      LEA     KEYCODE_MSG, A1         ; Keycode
000013D8  303C 000D                554      MOVE    #13,        D0          ; No Line feed
000013DC  4E4F                     555      TRAP    #15                     ; Trap (Perform action)
000013DE                           556  
000013DE                           557      ; Show KeyCode
000013DE  103C 000B                558      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000013E2  323C 3001                559      MOVE.W  #$3001,     D1          ; Col 30, Row 1
000013E6  4E4F                     560      TRAP    #15                     ; Trap (Perform action)    
000013E8  2239 000018FE            561      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000013EE  103C 0003                562      MOVE.B  #03,        D0          ; Display the contents of D1
000013F2  4E4F                     563      TRAP    #15                     ; Trap (Perform action)
000013F4                           564  
000013F4  4E75                     565      RTS  
000013F6                           566      
000013F6                           567  *-----------------------------------------------------------
000013F6                           568  * Subroutine    : Player is on Ground
000013F6                           569  * Description   : Check if the Player is on or off Ground
000013F6                           570  *-----------------------------------------------------------
000013F6                           571  IS_PLAYER_ON_GND:
000013F6                           572      ; Check if Player is on Ground
000013F6  4281                     573      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000013F8  4282                     574      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000013FA  3239 000018FC            575      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001400  82FC 0002                576      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001404  2439 00001906            577      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
0000140A  B441                     578      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
0000140C  6C00 0008                579      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
00001410  6D00 002C                580      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001414  4E75                     581      RTS                             ; Return to subroutine
00001416                           582      
00001416                           583  *-----------------------------------------------------------
00001416                           584  * Subroutine    : On Ground
00001416                           585  * Description   : Set the Player On Ground
00001416                           586  *-----------------------------------------------------------
00001416                           587  SET_ON_GROUND:
00001416  4281                     588      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001418  3239 000018FC            589      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000141E  82FC 0002                590      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001422  23C1 00001906            591      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001428  4281                     592      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000142A  7200                     593      MOVE.L  #00,        D1          ; Player Velocity
0000142C  23C1 00001912            594      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
00001432  23FC 00000001 0000191A   595      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
0000143C  4E75                     596      RTS
0000143E                           597  
0000143E                           598  *-----------------------------------------------------------
0000143E                           599  * Subroutine    : Off Ground
0000143E                           600  * Description   : Set the Player Off Ground
0000143E                           601  *-----------------------------------------------------------
0000143E                           602  SET_OFF_GROUND:
0000143E  23FC 00000000 0000191A   603      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001448  4E75                     604      RTS                             ; Return to subroutine
0000144A                           605  
0000144A                           606  *-----------------------------------------------------------
0000144A                           607  * Subroutine    : Jump
0000144A                           608  * Description   : Perform a Jump
0000144A                           609  *-----------------------------------------------------------
0000144A                           610  *JUMP:
0000144A                           611  *    CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000144A                           612  *    BEQ     PERFORM_JUMP            ; Do Jump
0000144A                           613  *    BRA     JUMP_DONE               ;
0000144A                           614  *PERFORM_JUMP:
0000144A                           615  *    BSR     PLAY_JUMP               ; Play jump sound
0000144A                           616  *    MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
0000144A                           617  *    RTS                             ; Return to subroutine
0000144A                           618  *JUMP_DONE:
0000144A                           619  *    RTS                             ; Return to subroutine
0000144A                           620  *IDLE:
0000144A                           621  *    BSR     PLAY_RUN                ; Play Run Wav
0000144A                           622  *    RTS                             ; Return to subroutine
0000144A                           623  
0000144A                           624  *-----------------------------------------------------------
0000144A                           625  * Subroutines   : Sound Load and Play
0000144A                           626  * Description   : Initialise game sounds into memory 
0000144A                           627  * Current Sounds are RUN, JUMP and Opps for Collision
0000144A                           628  *-----------------------------------------------------------
0000144A                           629  RUN_LOAD:
0000144A  43F9 0000196F            630      LEA     RUN_WAV,    A1          ; Load Wav File into A1
00001450  323C 0000                631      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001454  303C 0047                632      MOVE    #71,        D0          ; Load into memory
00001458  4E4F                     633      TRAP    #15                     ; Trap (Perform action)
0000145A  4E75                     634      RTS                             ; Return to subroutine
0000145C                           635  
0000145C                           636  PLAY_RUN:
0000145C  323C 0000                637      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
00001460  303C 0048                638      MOVE    #72,        D0          ; Play Sound
00001464  4E4F                     639      TRAP    #15                     ; Trap (Perform action)
00001466  4E75                     640      RTS                             ; Return to subroutine
00001468                           641  
00001468                           642  JUMP_LOAD:
00001468  43F9 00001966            643      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
0000146E  323C 0001                644      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
00001472  303C 0047                645      MOVE    #71,        D0          ; Load into memory
00001476  4E4F                     646      TRAP    #15                     ; Trap (Perform action)
00001478  4E75                     647      RTS                             ; Return to subroutine
0000147A                           648  
0000147A                           649  PLAY_JUMP:
0000147A  323C 0001                650      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
0000147E  303C 0048                651      MOVE    #72,        D0          ; Play Sound
00001482  4E4F                     652      TRAP    #15                     ; Trap (Perform action)
00001484  4E75                     653      RTS                             ; Return to subroutine
00001486                           654  
00001486                           655  OPPS_LOAD:
00001486  43F9 00001977            656      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
0000148C  323C 0002                657      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001490  303C 0047                658      MOVE    #71,        D0          ; Load into memory
00001494  4E4F                     659      TRAP    #15                     ; Trap (Perform action)
00001496  4E75                     660      RTS                             ; Return to subroutine
00001498                           661  
00001498                           662  PLAY_OPPS:
00001498  323C 0002                663      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
0000149C  303C 0048                664      MOVE    #72,        D0          ; Play Sound
000014A0  4E4F                     665      TRAP    #15                     ; Trap (Perform action)
000014A2  4E75                     666      RTS                             ; Return to subroutine
000014A4                           667  
000014A4                           668  *-----------------------------------------------------------
000014A4                           669  * Subroutine    : Draw Player
000014A4                           670  * Description   : Draw Player Square
000014A4                           671  *-----------------------------------------------------------
000014A4                           672  DRAW_PLAYER:
000014A4                           673      ; Set Pixel Colors
000014A4  223C 00FFFFFF            674      MOVE.L  #WHITE,     D1          ; Set Background color
000014AA  103C 0050                675      MOVE.B  #80,        D0          ; Task for Background Color
000014AE  4E4F                     676      TRAP    #15                     ; Trap (Perform action)
000014B0                           677  
000014B0                           678      ; Set X, Y, Width and Height
000014B0  2239 00001902            679      MOVE.L  PLAYER_X,   D1          ; X
000014B6  2439 00001906            680      MOVE.L  PLAYER_Y,   D2          ; Y
000014BC  2639 00001902            681      MOVE.L  PLAYER_X,   D3
000014C2  0683 00000014            682      ADD.L   #PLYR_W_INIT,   D3      ; Width
000014C8  2839 00001906            683      MOVE.L  PLAYER_Y,   D4 
000014CE  0684 00000014            684      ADD.L   #PLYR_H_INIT,   D4      ; Height
000014D4                           685      
000014D4                           686      ; Draw Player
000014D4  103C 0057                687      MOVE.B  #87,        D0          ; Draw Player
000014D8  4E4F                     688      TRAP    #15                     ; Trap (Perform action)
000014DA  4E75                     689      RTS                             ; Return to subroutine
000014DC                           690  
000014DC                           691  *-----------------------------------------------------------
000014DC                           692  * Subroutine    : Draw Enemy
000014DC                           693  * Description   : Draw Enemy Square
000014DC                           694  *-----------------------------------------------------------    
000014DC                           695  DRAW_ENEMY_1:
000014DC                           696      ; Set Pixel Colors
000014DC  223C 000000FF            697      MOVE.L  #RED,       D1          ; Set Background color
000014E2  103C 0050                698      MOVE.B  #80,        D0          ; Task for Background Color
000014E6  4E4F                     699      TRAP    #15                     ; Trap (Perform action)
000014E8                           700  
000014E8                           701      ; Set X, Y, Width and Height
000014E8  2239 00001926            702      MOVE.L  ENEMY_X_1,    D1          ; X
000014EE  2439 0000192A            703      MOVE.L  ENEMY_Y_1,    D2          ; Y
000014F4  2639 00001926            704      MOVE.L  ENEMY_X_1,    D3
000014FA  0683 00000014            705      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001500  2839 0000192A            706      MOVE.L  ENEMY_Y_1,    D4 
00001506  0684 00000014            707      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000150C                           708      
0000150C                           709      ; Draw Enemy    
0000150C  103C 0057                710      MOVE.B  #87,        D0          ; Draw Enemy
00001510  4E4F                     711      TRAP    #15                     ; Trap (Perform action)
00001512  4E75                     712      RTS                             ; Return to subroutine
00001514                           713  
00001514                           714  DRAW_ENEMY_2:
00001514                           715      ; Set Pixel Colors
00001514  223C 000000FF            716      MOVE.L  #RED,       D1          ; Set Background color
0000151A  103C 0050                717      MOVE.B  #80,        D0          ; Task for Background Color
0000151E  4E4F                     718      TRAP    #15                     ; Trap (Perform action)
00001520                           719  
00001520                           720      ; Set X, Y, Width and Height
00001520  2239 0000192E            721      MOVE.L  ENEMY_X_2,    D1          ; X
00001526  2439 00001932            722      MOVE.L  ENEMY_Y_2,    D2          ; Y
0000152C  2639 0000192E            723      MOVE.L  ENEMY_X_2,    D3
00001532  0683 00000014            724      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001538  2839 00001932            725      MOVE.L  ENEMY_Y_2,    D4 
0000153E  0684 00000014            726      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001544                           727      
00001544                           728      ; Draw Enemy    
00001544  103C 0057                729      MOVE.B  #87,        D0          ; Draw Enemy
00001548  4E4F                     730      TRAP    #15                     ; Trap (Perform action)
0000154A  4E75                     731      RTS                             ; Return to subroutine
0000154C                           732  
0000154C                           733  DRAW_ENEMY_3:
0000154C                           734      ; Set Pixel Colors
0000154C  223C 000000FF            735      MOVE.L  #RED,       D1          ; Set Background color
00001552  103C 0050                736      MOVE.B  #80,        D0          ; Task for Background Color
00001556  4E4F                     737      TRAP    #15                     ; Trap (Perform action)
00001558                           738  
00001558                           739      ; Set X, Y, Width and Height
00001558  2239 00001936            740      MOVE.L  ENEMY_X_3,    D1          ; X
0000155E  2439 0000193A            741      MOVE.L  ENEMY_Y_3,    D2          ; Y
00001564  2639 00001936            742      MOVE.L  ENEMY_X_3,    D3
0000156A  0683 00000014            743      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001570  2839 0000193A            744      MOVE.L  ENEMY_Y_3,    D4 
00001576  0684 00000014            745      ADD.L   #ENMY_H_INIT,   D4      ; Height
0000157C                           746      
0000157C                           747      ; Draw Enemy    
0000157C  103C 0057                748      MOVE.B  #87,        D0          ; Draw Enemy
00001580  4E4F                     749      TRAP    #15                     ; Trap (Perform action)
00001582  4E75                     750      RTS                             ; Return to subroutine
00001584                           751  
00001584                           752  DRAW_ENEMY_4:
00001584                           753      ; Set Pixel Colors
00001584  223C 000000FF            754      MOVE.L  #RED,       D1          ; Set Background color
0000158A  103C 0050                755      MOVE.B  #80,        D0          ; Task for Background Color
0000158E  4E4F                     756      TRAP    #15                     ; Trap (Perform action)
00001590                           757  
00001590                           758      ; Set X, Y, Width and Height
00001590  2239 0000193E            759      MOVE.L  ENEMY_X_4,    D1          ; X
00001596  2439 00001942            760      MOVE.L  ENEMY_Y_4,    D2          ; Y
0000159C  2639 0000193E            761      MOVE.L  ENEMY_X_4,    D3
000015A2  0683 00000014            762      ADD.L   #ENMY_W_INIT,   D3      ; Width
000015A8  2839 00001942            763      MOVE.L  ENEMY_Y_4,    D4 
000015AE  0684 00000014            764      ADD.L   #ENMY_H_INIT,   D4      ; Height
000015B4                           765      
000015B4                           766      ; Draw Enemy    
000015B4  103C 0057                767      MOVE.B  #87,        D0          ; Draw Enemy
000015B8  4E4F                     768      TRAP    #15                     ; Trap (Perform action)
000015BA  4E75                     769      RTS                             ; Return to subroutine 
000015BC                           770      
000015BC                           771  DRAW_ENEMY:                         ; Draw Enemy No.5
000015BC                           772      ; Set Pixel Colors
000015BC  223C 000000FF            773      MOVE.L  #RED,       D1          ; Set Background color
000015C2  103C 0050                774      MOVE.B  #80,        D0          ; Task for Background Color
000015C6  4E4F                     775      TRAP    #15                     ; Trap (Perform action)
000015C8                           776  
000015C8                           777      ; Set X, Y, Width and Height
000015C8  2239 0000191E            778      MOVE.L  ENEMY_X,    D1          ; X
000015CE  2439 00001922            779      MOVE.L  ENEMY_Y,    D2          ; Y
000015D4  2639 0000191E            780      MOVE.L  ENEMY_X,    D3
000015DA  0683 00000014            781      ADD.L   #ENMY_W_INIT,   D3      ; Width
000015E0  2839 00001922            782      MOVE.L  ENEMY_Y,    D4 
000015E6  0684 00000014            783      ADD.L   #ENMY_H_INIT,   D4      ; Height
000015EC                           784      
000015EC                           785      ; Draw Enemy    
000015EC  103C 0057                786      MOVE.B  #87,        D0          ; Draw Enemy
000015F0  4E4F                     787      TRAP    #15                     ; Trap (Perform action)
000015F2  4E75                     788      RTS                             ; Return to subroutine
000015F4                           789  
000015F4                           790  *DRAW_ENEMY_6:
000015F4                           791  *    ; Set Pixel Colors
000015F4                           792  *    MOVE.L  #RED,       D1          ; Set Background color
000015F4                           793  *    MOVE.B  #80,        D0          ; Task for Background Color
000015F4                           794  *    TRAP    #15                     ; Trap (Perform action)
000015F4                           795  *
000015F4                           796  *    ; Set X, Y, Width and Height
000015F4                           797  *    MOVE.L  ENEMY_X_6,    D1          ; X
000015F4                           798  *    MOVE.L  ENEMY_Y_6,    D2          ; Y
000015F4                           799  *    MOVE.L  ENEMY_X_6,    D3
000015F4                           800  *    ADD.L   #ENMY_W_INIT,   D3      ; Width
000015F4                           801  *    MOVE.L  ENEMY_Y_6,    D4 
000015F4                           802  *    ADD.L   #ENMY_H_INIT,   D4      ; Height
000015F4                           803  *    
000015F4                           804  *    ; Draw Enemy    
000015F4                           805  *    MOVE.B  #87,        D0          ; Draw Enemy
000015F4                           806  *    TRAP    #15                     ; Trap (Perform action)
000015F4                           807  *    RTS                             ; Return to subroutine               
000015F4                           808  ;----------------------------------------------------------
000015F4                           809  * Subroutine    : Collision Check
000015F4                           810  * Description   : Axis-Aligned Bounding Box Collision Detection
000015F4                           811  * Algorithm checks for overlap on the 4 sides of the Player and 
000015F4                           812  * Enemy rectangles
000015F4                           813  * PLAYER_X <= ENEMY_X + ENEMY_W &&
000015F4                           814  * PLAYER_X + PLAYER_W >= ENEMY_X &&
000015F4                           815  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
000015F4                           816  * PLAYER_H + PLAYER_Y >= ENEMY_Y
000015F4                           817  *-----------------------------------------------------------
000015F4                           818  CHECK_COLLISIONS_1:
000015F4  4281                     819      CLR.L   D1                      ; Clear D1
000015F6  4282                     820      CLR.L   D2                      ; Clear D2
000015F8                           821  
000015F8                           822  PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W:
000015F8  2239 00001902            823      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000015FE  2439 00001926            824      MOVE.L  ENEMY_X_1,    D2          ; Move Enemy X to D2
00001604  D4B8 0014                825      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001608  B481                     826      CMP.L   D1,         D2          ; Do the Overlap ?
0000160A  6F00 0006                827      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  ; Less than or Equal ?
0000160E  6000 004A                828      BRA     COLLISION_CHECK_DONE_1    ; If not no collision
00001612                           829      
00001612                           830  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1:     ; Check player is not  
00001612  D2B8 0014                831      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001616  2439 00001926            832      MOVE.L  ENEMY_X_1,    D2          ; Move Enemy X to D2
0000161C  B481                     833      CMP.L   D1,         D2          ; Do they OverLap ?
0000161E  6C00 0006                834      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  ; Less than or Equal
00001622  6000 0036                835      BRA     COLLISION_CHECK_DONE_1    ; If not no collision
00001626                           836     
00001626                           837  PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H:     
00001626  2239 00001906            838      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000162C  2439 0000192A            839      MOVE.L  ENEMY_Y_1,    D2          ; Move Enemy Y to D2
00001632  D4B8 0014                840      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001636  B481                     841      CMP.L   D1,         D2          ; Do they Overlap ?
00001638  6F00 0006                842      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  ; Less than or Equal
0000163C  6000 001C                843      BRA     COLLISION_CHECK_DONE_1    ; If not no collision 
00001640                           844      
00001640                           845  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1:     ; Less than or Equal ?
00001640  2239 00001906            846      MOVE.L  PLAYER_Y,   D1
00001646  D2B8 0014                847      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000164A  2439 0000192A            848      MOVE.L  ENEMY_Y_1,    D2          ; Move Enemy Height to D2  
00001650  B481                     849      CMP.L   D1,         D2          ; Do they OverLap ?
00001652  6C00 01EE                850      BGE     COLLISION              ; Collision !
00001656  6000 0002                851      BRA     COLLISION_CHECK_DONE_1    ; If not no collision
0000165A                           852      
0000165A                           853  COLLISION_CHECK_DONE_1:               ; No Collision Update points
0000165A  5281                     854      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
0000165C  D2B9 0000190A            855      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001662  23C1 0000190A            856      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001668  4E75                     857      RTS                             ; Return to subroutine
0000166A                           858  
0000166A                           859  *--------------------------------------------------------------------------------- 
0000166A                           860  
0000166A                           861  CHECK_COLLISIONS_2:
0000166A  4281                     862      CLR.L   D1                      ; Clear D1
0000166C  4282                     863      CLR.L   D2                      ; Clear D2
0000166E                           864  
0000166E                           865  PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W:
0000166E  2239 00001902            866      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001674  2439 0000192E            867      MOVE.L  ENEMY_X_2,    D2          ; Move Enemy X to D2
0000167A  D4B8 0014                868      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000167E  B481                     869      CMP.L   D1,         D2          ; Do the Overlap ?
00001680  6F00 0006                870      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  ; Less than or Equal ?
00001684  6000 004A                871      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
00001688                           872      
00001688                           873  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2:     ; Check player is not  
00001688  D2B8 0014                874      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000168C  2439 0000192E            875      MOVE.L  ENEMY_X_2,    D2          ; Move Enemy X to D2
00001692  B481                     876      CMP.L   D1,         D2          ; Do they OverLap ?
00001694  6C00 0006                877      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  ; Less than or Equal
00001698  6000 0036                878      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
0000169C                           879     
0000169C                           880  PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H:     
0000169C  2239 00001906            881      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000016A2  2439 00001932            882      MOVE.L  ENEMY_Y_2,    D2          ; Move Enemy Y to D2
000016A8  D4B8 0014                883      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000016AC  B481                     884      CMP.L   D1,         D2          ; Do they Overlap ?
000016AE  6F00 0006                885      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  ; Less than or Equal
000016B2  6000 001C                886      BRA     COLLISION_CHECK_DONE_2    ; If not no collision 
000016B6                           887      
000016B6                           888  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2:     ; Less than or Equal ?
000016B6  2239 00001906            889      MOVE.L  PLAYER_Y,   D1
000016BC  D2B8 0014                890      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000016C0  2439 00001932            891      MOVE.L  ENEMY_Y_2,    D2          ; Move Enemy Height to D2  
000016C6  B481                     892      CMP.L   D1,         D2          ; Do they OverLap ?
000016C8  6C00 0178                893      BGE     COLLISION              ; Collision !
000016CC  6000 0002                894      BRA     COLLISION_CHECK_DONE_2    ; If not no collision
000016D0                           895      
000016D0                           896  COLLISION_CHECK_DONE_2:               ; No Collision Update points
000016D0  5281                     897      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000016D2  D2B9 0000190A            898      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000016D8  23C1 0000190A            899      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000016DE  4E75                     900      RTS                             ; Return to subroutine
000016E0                           901  
000016E0                           902  *--------------------------------------------------------------------------------- 
000016E0                           903  
000016E0                           904  CHECK_COLLISIONS_3:
000016E0  4281                     905      CLR.L   D1                      ; Clear D1
000016E2  4282                     906      CLR.L   D2                      ; Clear D2
000016E4                           907  
000016E4                           908  PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W:
000016E4  2239 00001902            909      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000016EA  2439 00001936            910      MOVE.L  ENEMY_X_3,    D2          ; Move Enemy X to D2
000016F0  D4B8 0014                911      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000016F4  B481                     912      CMP.L   D1,         D2          ; Do the Overlap ?
000016F6  6F00 0006                913      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  ; Less than or Equal ?
000016FA  6000 004A                914      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
000016FE                           915      
000016FE                           916  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3:     ; Check player is not  
000016FE  D2B8 0014                917      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001702  2439 00001936            918      MOVE.L  ENEMY_X_3,    D2          ; Move Enemy X to D2
00001708  B481                     919      CMP.L   D1,         D2          ; Do they OverLap ?
0000170A  6C00 0006                920      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  ; Less than or Equal
0000170E  6000 0036                921      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
00001712                           922     
00001712                           923  PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H:     
00001712  2239 00001906            924      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001718  2439 0000193A            925      MOVE.L  ENEMY_Y_3,    D2          ; Move Enemy Y to D2
0000171E  D4B8 0014                926      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001722  B481                     927      CMP.L   D1,         D2          ; Do they Overlap ?
00001724  6F00 0006                928      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  ; Less than or Equal
00001728  6000 001C                929      BRA     COLLISION_CHECK_DONE_3    ; If not no collision 
0000172C                           930      
0000172C                           931  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3:     ; Less than or Equal ?
0000172C  2239 00001906            932      MOVE.L  PLAYER_Y,   D1
00001732  D2B8 0014                933      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001736  2439 0000193A            934      MOVE.L  ENEMY_Y_3,    D2          ; Move Enemy Height to D2  
0000173C  B481                     935      CMP.L   D1,         D2          ; Do they OverLap ?
0000173E  6C00 0102                936      BGE     COLLISION              ; Collision !
00001742  6000 0002                937      BRA     COLLISION_CHECK_DONE_3    ; If not no collision
00001746                           938      
00001746                           939  COLLISION_CHECK_DONE_3:               ; No Collision Update points
00001746  5281                     940      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001748  D2B9 0000190A            941      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000174E  23C1 0000190A            942      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001754  4E75                     943      RTS                             ; Return to subroutine
00001756                           944  
00001756                           945  *---------------------------------------------------------------------------------
00001756                           946  
00001756                           947  CHECK_COLLISIONS_4:
00001756  4281                     948      CLR.L   D1                      ; Clear D1
00001758  4282                     949      CLR.L   D2                      ; Clear D2
0000175A                           950  
0000175A                           951  PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W:
0000175A  2239 00001902            952      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001760  2439 0000193E            953      MOVE.L  ENEMY_X_4,    D2          ; Move Enemy X to D2
00001766  D4B8 0014                954      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000176A  B481                     955      CMP.L   D1,         D2          ; Do the Overlap ?
0000176C  6F00 0006                956      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  ; Less than or Equal ?
00001770  6000 004A                957      BRA     COLLISION_CHECK_DONE_4    ; If not no collision
00001774                           958      
00001774                           959  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4:     ; Check player is not  
00001774  D2B8 0014                960      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001778  2439 0000193E            961      MOVE.L  ENEMY_X_4,    D2          ; Move Enemy X to D2
0000177E  B481                     962      CMP.L   D1,         D2          ; Do they OverLap ?
00001780  6C00 0006                963      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  ; Less than or Equal
00001784  6000 0036                964      BRA     COLLISION_CHECK_DONE_4    ; If not no collision
00001788                           965     
00001788                           966  PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H:     
00001788  2239 00001906            967      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
0000178E  2439 00001942            968      MOVE.L  ENEMY_Y_4,    D2          ; Move Enemy Y to D2
00001794  D4B8 0014                969      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001798  B481                     970      CMP.L   D1,         D2          ; Do they Overlap ?
0000179A  6F00 0006                971      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  ; Less than or Equal
0000179E  6000 001C                972      BRA     COLLISION_CHECK_DONE_4    ; If not no collision 
000017A2                           973      
000017A2                           974  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4:     ; Less than or Equal ?
000017A2  2239 00001906            975      MOVE.L  PLAYER_Y,   D1
000017A8  D2B8 0014                976      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000017AC  2439 00001942            977      MOVE.L  ENEMY_Y_4,    D2          ; Move Enemy Height to D2  
000017B2  B481                     978      CMP.L   D1,         D2          ; Do they OverLap ?
000017B4  6C00 008C                979      BGE     COLLISION              ; Collision !
000017B8  6000 0002                980      BRA     COLLISION_CHECK_DONE_4    ; If not no collision
000017BC                           981      
000017BC                           982  COLLISION_CHECK_DONE_4:               ; No Collision Update points
000017BC  5281                     983      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000017BE  D2B9 0000190A            984      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000017C4  23C1 0000190A            985      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000017CA  4E75                     986      RTS                             ; Return to subroutine
000017CC                           987  
000017CC                           988  *---------------------------------------------------------------------------------
000017CC                           989  CHECK_COLLISIONS:
000017CC  4281                     990      CLR.L   D1                      ; Clear D1
000017CE  4282                     991      CLR.L   D2                      ; Clear D2
000017D0                           992      
000017D0                           993  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
000017D0  2239 00001902            994      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000017D6  2439 0000191E            995      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
000017DC  D4B8 0014                996      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000017E0  B481                     997      CMP.L   D1,         D2          ; Do the Overlap ?
000017E2  6F00 0006                998      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
000017E6  6000 004A                999      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017EA                          1000      
000017EA                          1001  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
000017EA  D2B8 0014               1002      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000017EE  2439 0000191E           1003      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
000017F4  B481                    1004      CMP.L   D1,         D2          ; Do they OverLap ?
000017F6  6C00 0006               1005      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
000017FA  6000 0036               1006      BRA     COLLISION_CHECK_DONE    ; If not no collision
000017FE                          1007     
000017FE                          1008  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000017FE  2239 00001906           1009      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001804  2439 00001922           1010      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
0000180A  D4B8 0014               1011      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000180E  B481                    1012      CMP.L   D1,         D2          ; Do they Overlap ?
00001810  6F00 0006               1013      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00001814  6000 001C               1014      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001818                          1015      
00001818                          1016  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001818  2239 00001906           1017      MOVE.L  PLAYER_Y,   D1
0000181E  D2B8 0014               1018      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001822  2439 00001922           1019      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00001828  B481                    1020      CMP.L   D1,         D2          ; Do they OverLap ?
0000182A  6C00 0016               1021      BGE     COLLISION               ; Collision !
0000182E  6000 0002               1022      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001832                          1023  
00001832                          1024  COLLISION_CHECK_DONE:               ; No Collision Update points
00001832  5281                    1025      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001834  D2B9 0000190A           1026      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
0000183A  23C1 0000190A           1027      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001840  4E75                    1028      RTS                             ; Return to subroutine
00001842                          1029  *----------------------------------------------------------------------------------
00001842                          1030  
00001842                          1031  *CHECK_COLLISIONS_6:
00001842                          1032  *    CLR.L   D1                      ; Clear D1
00001842                          1033  *    CLR.L   D2                      ; Clear D2
00001842                          1034  *
00001842                          1035  *PLAYER_X_LTE_TO_ENEMY_X_6_PLUS_W:
00001842                          1036  *    MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001842                          1037  *    MOVE.L  ENEMY_X_6,    D2          ; Move Enemy X to D2
00001842                          1038  *    ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
00001842                          1039  *    CMP.L   D1,         D2          ; Do the Overlap ?
00001842                          1040  *    BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6  ; Less than or Equal ?
00001842                          1041  *    BRA     COLLISION_CHECK_DONE_6    ; If not no collision
00001842                          1042  *    
00001842                          1043  *PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_6:     ; Check player is not  
00001842                          1044  *    ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
00001842                          1045  *    MOVE.L  ENEMY_X_6,    D2          ; Move Enemy X to D2
00001842                          1046  *    CMP.L   D1,         D2          ; Do they OverLap ?
00001842                          1047  *    BGE     PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H  ; Less than or Equal
00001842                          1048  *    BRA     COLLISION_CHECK_DONE_6    ; If not no collision
00001842                          1049  *   
00001842                          1050  *PLAYER_Y_LTE_TO_ENEMY_Y_6_PLUS_H:     
00001842                          1051  *    MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001842                          1052  *    MOVE.L  ENEMY_Y_6,    D2          ; Move Enemy Y to D2
00001842                          1053  *    ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
00001842                          1054  *    CMP.L   D1,         D2          ; Do they Overlap ?
00001842                          1055  *    BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6  ; Less than or Equal
00001842                          1056  *    BRA     COLLISION_CHECK_DONE_6    ; If not no collision 
00001842                          1057  *    
00001842                          1058  *PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_6:     ; Less than or Equal ?
00001842                          1059  *    MOVE.L  PLAYER_Y,   D1
00001842                          1060  *    ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001842                          1061  *    MOVE.L  ENEMY_Y_6,    D2          ; Move Enemy Height to D2  
00001842                          1062  *    CMP.L   D1,         D2          ; Do they OverLap ?
00001842                          1063  *    BGE     COLLISION              ; Collision !
00001842                          1064  *    BRA     COLLISION_CHECK_DONE_6    ; If not no collision
00001842                          1065  *    
00001842                          1066  *COLLISION_CHECK_DONE_6:               ; No Collision Update points
00001842                          1067  *    ADD.L   #POINTS,    D1          ; Move points upgrade to D1
00001842                          1068  *    ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001842                          1069  *    MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001842                          1070  *    RTS                             ; Return to subroutine
00001842                          1071  
00001842                          1072  *---------------------------------------------------------------------------------
00001842                          1073     
00001842                          1074  COLLISION:
00001842  6100 FC54               1075      BSR     PLAY_OPPS               ; Play Opps Wav
00001846  04B9 00000014 0000190E  1076      SUB.L   #20, HEALTH_VALUE
00001850                          1077      IF.L    (HEALTH_VALUE) <EQ> #0 THEN
0000185E                          1078      
0000185E  103C 000B               1079              MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001862  323C FF00               1080              MOVE.W  #$FF00,     D1          ; Clear contents
00001866  4E4F                    1081              TRAP    #15                     ; Trap (Perform action)
00001868                          1082              
00001868  6100 FAAC               1083              BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000186C  6100 FC36               1084              BSR     DRAW_PLAYER             ; Draw Player
00001870  6100 FD4A               1085              BSR     DRAW_ENEMY              ; Draw Enemy
00001874  6100 FC66               1086              BSR     DRAW_ENEMY_1
00001878  6100 FC9A               1087              BSR     DRAW_ENEMY_2
0000187C  6100 FCCE               1088              BSR     DRAW_ENEMY_3
00001880  6100 FD02               1089              BSR     DRAW_ENEMY_4
00001884                          1090  *            BSR     DRAW_ENEMY_6
00001884                          1091  
00001884  103C 005E               1092              MOVE.B  #94,        D0
00001888  4E4F                    1093              TRAP    #15
0000188A                          1094              
0000188A  6100 0004               1095              BSR EXIT
0000188E                          1096      ENDI
0000188E  4E75                    1097      RTS                             ; Return to subroutine    
00001890                          1098  *-----------------------------------------------------------
00001890                          1099  * Subroutine    : EXIT
00001890                          1100  * Description   : Exit message and End Game
00001890                          1101  *-----------------------------------------------------------
00001890                          1102  EXIT:
00001890                          1103      ; Show if Exiting is Running
00001890  103C 000B               1104      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001894  323C 4004               1105      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001898  4E4F                    1106      TRAP    #15                     ; Trap (Perform action)
0000189A  43F9 000018ED           1107      LEA     EXIT_MSG,   A1          ; Exit
000018A0  303C 000D               1108      MOVE    #13,        D0          ; No Line feed
000018A4  4E4F                    1109      TRAP    #15                     ; Trap (Perform action)
000018A6  103C 0009               1110      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000018AA  4E4F                    1111      TRAP    #15                     ; Trap (Perform action)
000018AC  FFFF FFFF               1112      SIMHALT
000018B0                          1113  
000018B0                          1114  *-----------------------------------------------------------
000018B0                          1115  * Section       : Messages
000018B0                          1116  * Description   : Messages to Print on Console, names should be
000018B0                          1117  * self documenting
000018B0                          1118  *-----------------------------------------------------------
000018B0= 53 63 6F 72 65 20 ...   1119  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
000018B9= 4B 65 79 43 6F 64 ...   1120  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
000018C4= 4A 75 6D 70 2E 2E ...   1121  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
000018CD                          1122  ;---------------------------------------------------------
000018CD= 55 70 2E 2E 2E 2E 00    1123  UP_MSG          DC.B    'Up....', 0       ; Up Message
000018D4= 44 6F 77 6E 2E 2E ...   1124  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
000018DD                          1125  ;-----------------------------------------------------------
000018DD= 58 3A 00                1126  X_MSG           DC.B    'X:', 0             ; X Position Message
000018E0= 59 3A 00                1127  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
000018E3= 48 65 61 6C 74 68 ...   1128  HEALTH_MSG      DC.B    'Health : ',0       ; Health message
000018ED                          1129  
000018ED                          1130  
000018ED= 45 78 69 74 69 6E ...   1131  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000018F9                          1132  
000018F9                          1133  *-----------------------------------------------------------
000018F9                          1134  * Section       : Graphic Colors
000018F9                          1135  * Description   : Screen Pixel Color
000018F9                          1136  *-----------------------------------------------------------
000018F9  =00FFFFFF               1137  WHITE           EQU     $00FFFFFF
000018F9  =000000FF               1138  RED             EQU     $000000FF
000018F9                          1139  
000018F9                          1140  *-----------------------------------------------------------
000018F9                          1141  * Section       : Screen Size
000018F9                          1142  * Description   : Screen Width and Height
000018F9                          1143  *-----------------------------------------------------------
000018FA                          1144  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000018FC                          1145  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000018FE                          1146  
000018FE                          1147  *-----------------------------------------------------------
000018FE                          1148  * Section       : Keyboard Input
000018FE                          1149  * Description   : Used for storing Keypresses
000018FE                          1150  *-----------------------------------------------------------
000018FE                          1151  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001902                          1152  
00001902                          1153  *-----------------------------------------------------------
00001902                          1154  * Section       : Character Positions
00001902                          1155  * Description   : Player and Enemy Position Memory Locations
00001902                          1156  *-----------------------------------------------------------
00001902                          1157  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
00001906                          1158  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
0000190A                          1159  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
0000190E                          1160  HEALTH_VALUE    DS.L    01  ; Reserve Space for Health Value
00001912                          1161  
00001912                          1162  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001916                          1163  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
0000191A                          1164  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
0000191E                          1165  
0000191E                          1166  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001922                          1167  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001926                          1168  
00001926                          1169  ENEMY_X_1       DS.L    01  ; Reserve Space for Enemy X Position
0000192A                          1170  ENEMY_Y_1       DS.L    01  ; Reserve Space for Enemy Y Position
0000192E                          1171  
0000192E                          1172  ENEMY_X_2       DS.L    01  ; Reserve Space for Enemy X Position
00001932                          1173  ENEMY_Y_2       DS.L    01  ; Reserve Space for Enemy Y Position
00001936                          1174  
00001936                          1175  ENEMY_X_3       DS.L    01  ; Reserve Space for Enemy X Position
0000193A                          1176  ENEMY_Y_3       DS.L    01  ; Reserve Space for Enemy Y Position
0000193E                          1177  
0000193E                          1178  ENEMY_X_4       DS.L    01  ; Reserve Space for Enemy X Position
00001942                          1179  ENEMY_Y_4       DS.L    01  ; Reserve Space for Enemy Y Position
00001946                          1180  
00001946                          1181  ENEMY_X_6       DS.L    01  ; Reserve Space for Enemy X Position
0000194A                          1182  ENEMY_Y_6       DS.L    01  ; Reserve Space for Enemy Y Position
0000194E                          1183  
0000194E                          1184  ENEMY_X_7       DS.L    01  ; Reserve Space for Enemy X Position
00001952                          1185  ENEMY_Y_7       DS.L    01  ; Reserve Space for Enemy Y Position
00001956                          1186  
00001956                          1187  ENEMY_X_8       DS.L    01  ; Reserve Space for Enemy X Position
0000195A                          1188  ENEMY_Y_8       DS.L    01  ; Reserve Space for Enemy Y Position
0000195E                          1189  
0000195E                          1190  ENEMY_X_9       DS.L    01  ; Reserve Space for Enemy X Position
00001962                          1191  ENEMY_Y_9       DS.L    01  ; Reserve Space for Enemy Y Position
00001966                          1192  *-----------------------------------------------------------
00001966                          1193  * Section       : Sounds
00001966                          1194  * Description   : Sound files, which are then loaded and given
00001966                          1195  * an address in memory, they take a longtime to process and play
00001966                          1196  * so keep the files small. Used https://voicemaker.in/ to 
00001966                          1197  * generate and Audacity to convert MP3 to WAV
00001966                          1198  *-----------------------------------------------------------
00001966= 6A 75 6D 70 2E 77 ...   1199  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
0000196F= 72 75 6E 2E 77 61 ...   1200  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
00001977= 6F 70 70 73 2E 77 ...   1201  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001980                          1202  
00001980                          1203      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    17CC
CHECK_COLLISIONS_1  15F4
CHECK_COLLISIONS_2  166A
CHECK_COLLISIONS_3  16E0
CHECK_COLLISIONS_4  1756
COLLISION           1842
COLLISION_CHECK_DONE  1832
COLLISION_CHECK_DONE_1  165A
COLLISION_CHECK_DONE_2  16D0
COLLISION_CHECK_DONE_3  1746
COLLISION_CHECK_DONE_4  17BC
CURRENT_KEY         18FE
DOWN                124E
DOWNARROW           28
DOWN_MSG            18D4
DRAW                12E8
DRAW_ENEMY          15BC
DRAW_ENEMY_1        14DC
DRAW_ENEMY_2        1514
DRAW_ENEMY_3        154C
DRAW_ENEMY_4        1584
DRAW_PLAYER         14A4
DRAW_PLYR_DATA      1316
ENEMY_X             191E
ENEMY_X_1           1926
ENEMY_X_2           192E
ENEMY_X_3           1936
ENEMY_X_4           193E
ENEMY_X_6           1946
ENEMY_X_7           194E
ENEMY_X_8           1956
ENEMY_X_9           195E
ENEMY_Y             1922
ENEMY_Y_1           192A
ENEMY_Y_2           1932
ENEMY_Y_3           193A
ENEMY_Y_4           1942
ENEMY_Y_6           194A
ENEMY_Y_7           1952
ENEMY_Y_8           195A
ENEMY_Y_9           1962
ENMY_H_INIT         14
ENMY_W_INIT         14
ESCAPE              1B
EXIT                1890
EXIT_MSG            18ED
GAME                1112
GAMELOOP            1116
GND_FALSE           0
GND_TRUE            1
HEALTH              2000
HEALTH_MSG          18E3
HEALTH_VALUE        190E
INITIALISE          1000
INPUT               115C
IS_PLAYER_ON_GND    13F6
JMP_INDEX           1
JUMP_LOAD           1468
JUMP_MSG            18C4
JUMP_WAV            1966
KEYCODE_MSG         18B9
MOVE_ENEMY          1278
MOVE_ENEMY_1        1270
MOVE_ENEMY_2        1288
MOVE_ENEMY_3        1280
MOVE_ENEMY_4        1290
OPPS_INDEX          2
OPPS_LOAD           1486
OPPS_WAV            1977
OUT_OF_BOUNDS_DOWN  1264
OUT_OF_BOUNDS_UP    1244
PLAYER_SCORE        190A
PLAYER_X            1902
PLAYER_X_LTE_TO_ENEMY_X_1_PLUS_W  15F8
PLAYER_X_LTE_TO_ENEMY_X_2_PLUS_W  166E
PLAYER_X_LTE_TO_ENEMY_X_3_PLUS_W  16E4
PLAYER_X_LTE_TO_ENEMY_X_4_PLUS_W  175A
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  17D0
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  17EA
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_1  1612
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_2  1688
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_3  16FE
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X_4  1774
PLAYER_Y            1906
PLAYER_Y_LTE_TO_ENEMY_Y_1_PLUS_H  1626
PLAYER_Y_LTE_TO_ENEMY_Y_2_PLUS_H  169C
PLAYER_Y_LTE_TO_ENEMY_Y_3_PLUS_H  1712
PLAYER_Y_LTE_TO_ENEMY_Y_4_PLUS_H  1788
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  17FE
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1818
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_1  1640
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_2  16B6
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_3  172C
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y_4  17A2
PLAY_JUMP           147A
PLAY_OPPS           1498
PLAY_RUN            145C
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1916
PLYR_H_INIT         14
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         191A
PLYR_VELOCITY       1912
PLYR_W_INIT         14
POINTS              1
PROCESS_INPUT       117A
RED                 FF
RESET_ENEMY_POSITION  1298
RESET_ENEMY_POSITION_1  12A8
RESET_ENEMY_POSITION_2  12B8
RESET_ENEMY_POSITION_3  12C8
RESET_ENEMY_POSITION_4  12D8
RUN_INDEX           0
RUN_LOAD            144A
RUN_WAV             196F
SCORE_MSG           18B0
SCREEN_H            18FC
SCREEN_W            18FA
SET_OFF_GROUND      143E
SET_ON_GROUND       1416
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UP                  122E
UPARROW             26
UPDATE              11AC
UPDATE_1            11C6
UPDATE_2            11E0
UPDATE_3            11FA
UPDATE_4            1214
UP_MSG              18CD
WAIT                114E
WHITE               FFFFFF
X_MSG               18DD
Y_MSG               18E0
_00000000           188E
