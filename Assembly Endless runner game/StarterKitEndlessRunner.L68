00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 25/02/2023 00:58:30

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =00000008                 29  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 30  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000                            34  ;-----------------------------------------------------------
00001000  =FFFFFFFB                 35  PLYR_UP_V   EQU         -05          ; Player UP Velocity
00001000  =00000002                 36  PLYR_DOWN_V EQU         02          ; Player DOWN Velocity
00001000                            37  ;-----------------------------------------------------------
00001000  =00000001                 38  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            39  
00001000  =00000001                 40  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 41  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            42  
00001000  =00000000                 43  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 44  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 45  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            46  
00001000  =00000008                 47  ENMY_W_INIT EQU         08          ; Enemy initial Width
00001000  =00000008                 48  ENMY_H_INIT EQU         08          ; Enemy initial Height
00001000                            49  
00001000                            50  *-----------------------------------------------------------
00001000                            51  * Section       : Game Stats
00001000                            52  * Description   : Points
00001000                            53  *-----------------------------------------------------------
00001000  =00000001                 54  POINTS      EQU         01          ; Points added
00001000                            55  
00001000                            56  *-----------------------------------------------------------
00001000                            57  * Section       : Keyboard Keys
00001000                            58  * Description   : Spacebar and Escape or two functioning keys
00001000                            59  * Spacebar to JUMP and Escape to Exit Game
00001000                            60  *-----------------------------------------------------------
00001000  =00000020                 61  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 62  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            63  ;------------------------------------------------------------
00001000  =00000025                 64  LEFTARROW   EQU         $25         ; Left key ASCII Keycode
00001000  =00000026                 65  UPARROW     EQU         $26         ; Up key ASCII Keycode   
00001000  =00000027                 66  RIGHTARROW  EQU         $27         ; Right key ASCII Keycode
00001000  =00000028                 67  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode 
00001000                            68  ;------------------------------------------------------------    
00001000                            69  *-----------------------------------------------------------
00001000                            70  * Subroutine    : Initialise
00001000                            71  * Description   : Initialise game data into memory such as 
00001000                            72  * sounds and screen size
00001000                            73  *-----------------------------------------------------------
00001000                            74  INITIALISE:
00001000                            75      ; Initialise Sounds
00001000  6100 03BE                 76      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 03D8                 77      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008                            78      ;------------------------------------------------------------
00001008                            79      ;BSR     UP_LOAD                 ; Load Jump Sound into Memory
00001008                            80      ;BSR     DOWN_LOAD               ; Load Jump Sound into Memory
00001008                            81      ;-------------------------------------------------------------
00001008  6100 03F2                 82      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            83  
0000100C                            84      ; Screen Size
0000100C  103C 0021                 85      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      86      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      87      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 00001584             88      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      89      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 00001582             90      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            91  
00001022                            92      ; Place the Player at the center of the screen
00001022  4281                      93      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 00001582             94      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 95      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 0000158A             96      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                            97  
00001034  4281                      98      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036  3239 00001584             99      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000103C  82FC 0002                100      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001040  23C1 0000158E            101      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001046                           102  
00001046                           103      ; Initialise Player Score
00001046  4281                     104      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001048  7200                     105      MOVE.L  #00,        D1          ; Init Score
0000104A  23C1 00001592            106      MOVE.L  D1,         PLAYER_SCORE
00001050                           107  
00001050                           108      ; Initialise Player Velocity
00001050  4281                     109      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001052  123C 0000                110      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001056  23C1 00001596            111      MOVE.L  D1,         PLYR_VELOCITY
0000105C                           112  
0000105C                           113      ; Initialise Player Gravity
0000105C  4281                     114      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105E  7201                     115      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001060  23C1 0000159A            116      MOVE.L  D1,         PLYR_GRAVITY
00001066                           117  
00001066                           118      ; Initialize Player on Ground
00001066  23FC 00000001 0000159E   119      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001070                           120  
00001070                           121      ; Initial Position for Enemy
00001070  4281                     122      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001072  3239 00001582            123      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001078  23C1 000015A2            124      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000107E                           125  
0000107E  4281                     126      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001080  3239 00001584            127      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001086  82FC 0002                128      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000108A  23C1 000015A6            129      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001090                           130  
00001090                           131      ; Enable the screen back buffer(see easy 68k help)
00001090  103C 005C                132      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001094  123C 0011                133      MOVE.B  #17,        D1          ; Combine Tasks
00001098  4E4F                     134      TRAP    #15                     ; Trap (Perform action)
0000109A                           135  
0000109A                           136      ; Clear the screen (see easy 68k help)
0000109A  103C 000B                137      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109E  323C FF00                138      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A2  4E4F                     139      TRAP    #15                     ; Trap (Perform action)
000010A4                           140  
000010A4                           141  *-----------------------------------------------------------
000010A4                           142  * Subroutine    : Game
000010A4                           143  * Description   : Game including main GameLoop. GameLoop is like
000010A4                           144  * a while loop in that it runs forever until interupted
000010A4                           145  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010A4                           146  *-----------------------------------------------------------
000010A4                           147  GAME:
000010A4  6100 032C                148      BSR     PLAY_RUN                ; Play Run Wav
000010A8                           149  GAMELOOP:
000010A8  7008                     150      MOVEQ   #8,D0                   ; Get time in 1/100 seconds
000010AA  4E4F                     151      TRAP    #15
000010AC                           152  
000010AC  2F01                     153      MOVE.L  D1,-(SP)                ; Push time on the stack
000010AE                           154      ; Main Gameloop
000010AE  6100 0022                155      BSR     INPUT                   ; Check Keyboard Input
000010B2  6100 0080                156      BSR     UPDATE                  ; Update positions and points
000010B6                           157      ;BSR     UPMOVEMENT
000010B6  6100 028A                158      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010BA  6100 03BE                159      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010BE  6100 00EA                160      BSR     DRAW                    ; Draw the Scene
000010C2                           161      ;BRA     GAMELOOP               ; Loop back to GameLoop
000010C2                           162      
000010C2  2E1F                     163      MOVE.L  (SP)+,D7
000010C4                           164  wait:
000010C4  7008                     165      MOVEQ   #8,D0                   ; Get time in 1/100 ths seconds
000010C6  4E4F                     166      TRAP    #15
000010C8                           167  
000010C8  9287                     168      SUB.L   D7,D1                   ; Subtract previous time from current time
000010CA  B23C 0002                169      CMP.B   #2,D1                   ; Compare with 9/100ths adding the wait allowed the character and enemy to slow down to the same pace 
000010CE                           170                                      ;but i also changed the speed of the enenemy  so the enemy is slightly faster than character
000010CE  6BF4                     171      BMI.S   WAIT                    ; Loop if time not up yet
000010D0                           172  
000010D0  60D6                     173      BRA     GAMELOOP                ; Loop back to Game loop
000010D2                           174      
000010D2                           175  
000010D2                           176  *-----------------------------------------------------------
000010D2                           177  * Subroutine    : Input
000010D2                           178  * Description   : Process Keyboard Input
000010D2                           179  *-----------------------------------------------------------
000010D2                           180  INPUT:
000010D2                           181      ; Process Input
000010D2  4281                     182      CLR.L   D1                      ; Clear Data Register
000010D4  103C 0013                183      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010D8  4E4F                     184      TRAP    #15                     ; Trap (Perform action)
000010DA  1401                     185      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010DC  B43C 0000                186      CMP.B   #00,        D2          ; Key is pressed
000010E0  6700 000E                187      BEQ     PROCESS_INPUT           ; Process Key
000010E4  4E4F                     188      TRAP    #15                     ; Trap for Last Key
000010E6                           189      ; Check if key still pressed
000010E6  B23C 00FF                190      CMP.B   #$FF,       D1          ; Is it still pressed
000010EA  6700 0004                191      BEQ     PROCESS_INPUT           ; Process Last Key
000010EE  4E75                     192      RTS                             ; Return to subroutine
000010F0                           193  
000010F0                           194  *-----------------------------------------------------------
000010F0                           195  * Subroutine    : Process Input
000010F0                           196  * Description   : Branch based on keys pressed
000010F0                           197  *-----------------------------------------------------------
000010F0                           198  PROCESS_INPUT:
000010F0  23C2 00001586            199      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000010F6  0CB9 0000001B 00001586   200      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
00001100  6700 03F8                201      BEQ     EXIT                    ; Exit if Escape
00001104  0CB9 00000020 00001586   202      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
0000110E  6700 0286                203      BEQ     JUMP                    ; Jump
00001112                           204      ;--------------------------------------------------
00001112  0CB9 00000026 00001586   205      CMP.L   #UPARROW,  CURRENT_KEY ; Is Current Key UP
0000111C  6700 0052                206      BEQ     UP                     ; Up
00001120  0CB9 00000028 00001586   207      CMP.L   #DOWNARROW,CURRENT_KEY ; Is Current Key Down
0000112A  6700 0056                208      BEQ     DOWN                   ; Down
0000112E                           209      ;--------------------------------------------------
0000112E  6000 028A                210      BRA     IDLE                    ; Or Idle
00001132  4E75                     211      RTS                             ; Return to subroutine
00001134                           212  
00001134                           213  *-----------------------------------------------------------
00001134                           214  * Subroutine    : Update
00001134                           215  * Description   : Main update loop update Player and Enemies
00001134                           216  *-----------------------------------------------------------
00001134                           217  UPDATE:
00001134                           218      ; Update the Players Positon based on Velocity and Gravity
00001134  4281                     219      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001136  2239 00001596            220      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000113C  2439 0000159A            221      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001142  D282                     222      ADD.L   D2,         D1          ; Add Gravity to Velocity
00001144  23C1 00001596            223      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
0000114A  D2B9 0000158E            224      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001150  23C1 0000158E            225      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
00001156                           226      
00001156                           227      ; Move the Enemy
00001156  4281                     228      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001158  4281                     229      CLR.L   D1                      ; Clear the contents of D0
0000115A  2239 000015A2            230      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00001160  B2BC 00000000            231      CMP.L   #00,        D1
00001166  6F00 0032                232      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
0000116A  6000 0026                233      BRA     MOVE_ENEMY              ; Move the Enemy
0000116E                           234  
0000116E  4E75                     235      RTS                             ; Return to subroutine  
00001170                           236  *-----------------------------------------------------------
00001170                           237  * Subroutine    : Update
00001170                           238  * Description   : Main update loop update Player and Enemies
00001170                           239  * By: Qadeer Hussain
00001170                           240  *-----------------------------------------------------------
00001170                           241  UP:
00001170  4281                     242      CLR.L   D1 
00001172                           243      ;MOVE.L PLYR_UP_V,D1
00001172                           244      
00001172  23C1 0000158E            245      MOVE.L D1, PLAYER_Y     ; Load the current y position of the player into D1
00001178  5B41                     246      SUB #5, D1             ; Subtract 1 from the y position to move the player up
0000117A  23C1 0000158E            247      MOVE.L D1, PLAYER_Y
00001180                           248          
00001180  4E75                     249      RTS
00001182                           250  *-----------------------------------------------------------
00001182                           251  * Subroutine    : Update
00001182                           252  * Description   : Main update loop update Player and Enemies
00001182                           253  * By: Qadeer Hussain
00001182                           254  *-----------------------------------------------------------
00001182                           255  DOWN:
00001182  4281                     256      CLR.L   D1 
00001184  2239 0000158E            257      MOVE.L PLAYER_Y, D1    ; Load the current y position of the player into D1
0000118A  5A41                     258      ADD #5, D1             ; Subtract 1 from the y position to move the player up
0000118C  23C1 0000158E            259      MOVE.L D1, PLAYER_Y
00001192                           260          
00001192                           261      ;RTS
00001192                           262      
00001192                           263      
00001192                           264      ;MOVE.W player_y, D1    ; Load the current y position of the player into D1
00001192                           265      ;ADD #1, D1             ; Add 1 to the y position to move the player down
00001192                           266      ;MOVE.W D1, player_y    ; Store the updated y position of the player
00001192                           267  
00001192                           268      ;RTS
00001192                           269      
00001192                           270  *-----------------------------------------------------------
00001192                           271  * Subroutine    : Move Enemy
00001192                           272  * Description   : Move Enemy Right to Left
00001192                           273  *-----------------------------------------------------------
00001192                           274  MOVE_ENEMY:
00001192  51B9 000015A2            275      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
00001198  4E75                     276      RTS
0000119A                           277  
0000119A                           278  *-----------------------------------------------------------
0000119A                           279  * Subroutine    : Reset Enemy
0000119A                           280  * Description   : Reset Enemy if to passes 0 to Right of Screen
0000119A                           281  *-----------------------------------------------------------
0000119A                           282  RESET_ENEMY_POSITION:
0000119A  4281                     283      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000119C  3239 00001582            284      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
000011A2  23C1 000015A2            285      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
000011A8  4E75                     286      RTS
000011AA                           287  
000011AA                           288  *-----------------------------------------------------------
000011AA                           289  * Subroutine    : Draw
000011AA                           290  * Description   : Draw Screen
000011AA                           291  *-----------------------------------------------------------
000011AA                           292  DRAW: 
000011AA                           293      ; Enable back buffer
000011AA  103C 005E                294      MOVE.B  #94,        D0
000011AE  4E4F                     295      TRAP    #15
000011B0                           296  
000011B0                           297      ; Clear the screen
000011B0  103C 000B                298      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011B4  323C FF00                299      MOVE.W  #$FF00,     D1          ; Clear contents
000011B8  4E4F                     300      TRAP    #15                     ; Trap (Perform action)
000011BA                           301  
000011BA  6100 000C                302      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000011BE  6100 025A                303      BSR     DRAW_PLAYER             ; Draw Player
000011C2  6100 0286                304      BSR     DRAW_ENEMY              ; Draw Enemy
000011C6  4E75                     305      RTS                             ; Return to subroutine
000011C8                           306  
000011C8                           307  *-----------------------------------------------------------
000011C8                           308  * Subroutine    : Draw Player Data
000011C8                           309  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011C8                           310  *-----------------------------------------------------------
000011C8                           311  DRAW_PLYR_DATA:
000011C8  4281                     312      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011CA                           313  
000011CA                           314      ; Player Score Message
000011CA  103C 000B                315      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011CE  323C 0201                316      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000011D2  4E4F                     317      TRAP    #15                     ; Trap (Perform action)
000011D4  43F9 0000151A            318      LEA     SCORE_MSG,  A1          ; Score Message
000011DA  303C 000D                319      MOVE    #13,        D0          ; No Line feed
000011DE  4E4F                     320      TRAP    #15                     ; Trap (Perform action)
000011E0                           321  
000011E0                           322      ; Player Score Value
000011E0  103C 000B                323      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011E4  323C 0901                324      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000011E8  4E4F                     325      TRAP    #15                     ; Trap (Perform action)
000011EA  103C 0003                326      MOVE.B  #03,        D0          ; Display number at D1.L
000011EE  2239 00001592            327      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000011F4  4E4F                     328      TRAP    #15                     ; Trap (Perform action)
000011F6                           329      
000011F6                           330      ; Player X Message
000011F6  103C 000B                331      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011FA  323C 0202                332      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000011FE  4E4F                     333      TRAP    #15                     ; Trap (Perform action)
00001200  43F9 00001564            334      LEA     X_MSG,      A1          ; X Message
00001206  303C 000D                335      MOVE    #13,        D0          ; No Line feed
0000120A  4E4F                     336      TRAP    #15                     ; Trap (Perform action)
0000120C                           337      
0000120C                           338      ; Player X
0000120C  103C 000B                339      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001210  323C 0502                340      MOVE.W  #$0502,     D1          ; Col 05, Row 02
00001214  4E4F                     341      TRAP    #15                     ; Trap (Perform action)
00001216  103C 0003                342      MOVE.B  #03,        D0          ; Display number at D1.L
0000121A  2239 0000158A            343      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001220  4E4F                     344      TRAP    #15                     ; Trap (Perform action)
00001222                           345      
00001222                           346      ; Player Y Message
00001222  103C 000B                347      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001226  323C 1002                348      MOVE.W  #$1002,     D1          ; Col 10, Row 02
0000122A  4E4F                     349      TRAP    #15                     ; Trap (Perform action)
0000122C  43F9 00001567            350      LEA     Y_MSG,      A1          ; Y Message
00001232  303C 000D                351      MOVE    #13,        D0          ; No Line feed
00001236  4E4F                     352      TRAP    #15                     ; Trap (Perform action)
00001238                           353      
00001238                           354      ; Player Y
00001238  103C 000B                355      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000123C  323C 1202                356      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00001240  4E4F                     357      TRAP    #15                     ; Trap (Perform action)
00001242  103C 0003                358      MOVE.B  #03,        D0          ; Display number at D1.L
00001246  2239 0000158E            359      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
0000124C  4E4F                     360      TRAP    #15                     ; Trap (Perform action) 
0000124E                           361  
0000124E                           362      ; Player Velocity Message
0000124E  103C 000B                363      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001252  323C 0203                364      MOVE.W  #$0203,     D1          ; Col 02, Row 03
00001256  4E4F                     365      TRAP    #15                     ; Trap (Perform action)
00001258  43F9 0000156A            366      LEA     V_MSG,      A1          ; Velocity Message
0000125E  303C 000D                367      MOVE    #13,        D0          ; No Line feed
00001262  4E4F                     368      TRAP    #15                     ; Trap (Perform action)
00001264                           369      
00001264                           370      ; Player Velocity
00001264  103C 000B                371      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001268  323C 0503                372      MOVE.W  #$0503,     D1          ; Col 05, Row 03
0000126C  4E4F                     373      TRAP    #15                     ; Trap (Perform action)
0000126E  103C 0003                374      MOVE.B  #03,        D0          ; Display number at D1.L
00001272  2239 00001596            375      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00001278  4E4F                     376      TRAP    #15                     ; Trap (Perform action)
0000127A                           377      
0000127A                           378      ; Player Gravity Message
0000127A  103C 000B                379      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000127E  323C 1003                380      MOVE.W  #$1003,     D1          ; Col 10, Row 03
00001282  4E4F                     381      TRAP    #15                     ; Trap (Perform action)
00001284  43F9 0000156D            382      LEA     G_MSG,      A1          ; G Message
0000128A  303C 000D                383      MOVE    #13,        D0          ; No Line feed
0000128E  4E4F                     384      TRAP    #15                     ; Trap (Perform action)
00001290                           385      
00001290                           386      ; Player Gravity
00001290  103C 000B                387      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001294  323C 1203                388      MOVE.W  #$1203,     D1          ; Col 12, Row 03
00001298  4E4F                     389      TRAP    #15                     ; Trap (Perform action)
0000129A  103C 0003                390      MOVE.B  #03,        D0          ; Display number at D1.L
0000129E  2239 0000159A            391      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
000012A4  4E4F                     392      TRAP    #15                     ; Trap (Perform action)
000012A6                           393  
000012A6                           394      ; Player On Ground Message
000012A6  103C 000B                395      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012AA  323C 0204                396      MOVE.W  #$0204,     D1          ; Col 10, Row 03
000012AE  4E4F                     397      TRAP    #15                     ; Trap (Perform action)
000012B0  43F9 00001570            398      LEA     GND_MSG,    A1          ; On Ground Message
000012B6  303C 000D                399      MOVE    #13,        D0          ; No Line feed
000012BA  4E4F                     400      TRAP    #15                     ; Trap (Perform action)
000012BC                           401      
000012BC                           402      ; Player On Ground
000012BC  103C 000B                403      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012C0  323C 0604                404      MOVE.W  #$0604,     D1          ; Col 06, Row 04
000012C4  4E4F                     405      TRAP    #15                     ; Trap (Perform action)
000012C6  103C 0003                406      MOVE.B  #03,        D0          ; Display number at D1.L
000012CA  2239 0000159E            407      MOVE.L  PLYR_ON_GND,D1          ; Move Play on Ground ? to D1.L
000012D0  4E4F                     408      TRAP    #15                     ; Trap (Perform action)
000012D2                           409  
000012D2                           410      ; Show Keys Pressed
000012D2  103C 000B                411      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012D6  323C 2001                412      MOVE.W  #$2001,     D1          ; Col 20, Row 1
000012DA  4E4F                     413      TRAP    #15                     ; Trap (Perform action)
000012DC  43F9 00001523            414      LEA     KEYCODE_MSG, A1         ; Keycode
000012E2  303C 000D                415      MOVE    #13,        D0          ; No Line feed
000012E6  4E4F                     416      TRAP    #15                     ; Trap (Perform action)
000012E8                           417  
000012E8                           418      ; Show KeyCode
000012E8  103C 000B                419      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012EC  323C 3001                420      MOVE.W  #$3001,     D1          ; Col 30, Row 1
000012F0  4E4F                     421      TRAP    #15                     ; Trap (Perform action)    
000012F2  2239 00001586            422      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000012F8  103C 0003                423      MOVE.B  #03,        D0          ; Display the contents of D1
000012FC  4E4F                     424      TRAP    #15                     ; Trap (Perform action)
000012FE                           425  
000012FE                           426      ; Show if Update is Running
000012FE  103C 000B                427      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001302  323C 0205                428      MOVE.W  #$0205,     D1          ; Col 02, Row 05
00001306  4E4F                     429      TRAP    #15                     ; Trap (Perform action)
00001308  43F9 00001550            430      LEA     UPDATE_MSG, A1          ; Update
0000130E  303C 000D                431      MOVE    #13,        D0          ; No Line feed
00001312  4E4F                     432      TRAP    #15                     ; Trap (Perform action)
00001314                           433  
00001314                           434      ; Show if Draw is Running
00001314  103C 000B                435      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001318  323C 0206                436      MOVE.W  #$0206,     D1          ; Col 02, Row 06
0000131C  4E4F                     437      TRAP    #15                     ; Trap (Perform action)
0000131E  43F9 0000155B            438      LEA     DRAW_MSG,   A1          ; Draw
00001324  303C 000D                439      MOVE    #13,        D0          ; No Line feed
00001328  4E4F                     440      TRAP    #15                     ; Trap (Perform action)
0000132A                           441  
0000132A                           442      ; Show if Idle is Running
0000132A  103C 000B                443      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000132E  323C 0207                444      MOVE.W  #$0207,     D1          ; Col 02, Row 07
00001332  4E4F                     445      TRAP    #15                     ; Trap (Perform action)
00001334  43F9 00001547            446      LEA     IDLE_MSG,   A1          ; Move Idle Message to A1
0000133A  303C 000D                447      MOVE    #13,        D0          ; No Line feed
0000133E  4E4F                     448      TRAP    #15                     ; Trap (Perform action)
00001340                           449  
00001340  4E75                     450      RTS  
00001342                           451      
00001342                           452  *-----------------------------------------------------------
00001342                           453  * Subroutine    : Player is on Ground
00001342                           454  * Description   : Check if the Player is on or off Ground
00001342                           455  *-----------------------------------------------------------
00001342                           456  IS_PLAYER_ON_GND:
00001342                           457      ; Check if Player is on Ground
00001342  4281                     458      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001344  4282                     459      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
00001346  3239 00001584            460      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000134C  82FC 0002                461      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001350  2439 0000158E            462      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001356  B441                     463      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001358  6C00 0008                464      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
0000135C  6D00 002C                465      BLT     SET_OFF_GROUND          ; The Player is off the Ground
00001360  4E75                     466      RTS                             ; Return to subroutine
00001362                           467  
00001362                           468  
00001362                           469  *-----------------------------------------------------------
00001362                           470  * Subroutine    : On Ground
00001362                           471  * Description   : Set the Player On Ground
00001362                           472  *-----------------------------------------------------------
00001362                           473  SET_ON_GROUND:
00001362  4281                     474      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001364  3239 00001584            475      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000136A  82FC 0002                476      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000136E  23C1 0000158E            477      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001374  4281                     478      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001376  7200                     479      MOVE.L  #00,        D1          ; Player Velocity
00001378  23C1 00001596            480      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000137E  23FC 00000001 0000159E   481      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001388  4E75                     482      RTS
0000138A                           483  
0000138A                           484  *-----------------------------------------------------------
0000138A                           485  * Subroutine    : Off Ground
0000138A                           486  * Description   : Set the Player Off Ground
0000138A                           487  *-----------------------------------------------------------
0000138A                           488  SET_OFF_GROUND:
0000138A  23FC 00000000 0000159E   489      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001394  4E75                     490      RTS                             ; Return to subroutine
00001396                           491  *-----------------------------------------------------------
00001396                           492  * Subroutine    : Jump
00001396                           493  * Description   : Perform a Jump
00001396                           494  *-----------------------------------------------------------
00001396                           495  JUMP:
00001396  0CB9 00000001 0000159E   496      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000013A0  6700 0006                497      BEQ     PERFORM_JUMP            ; Do Jump
000013A4  6000 0012                498      BRA     JUMP_DONE               ;
000013A8                           499  PERFORM_JUMP:
000013A8  6100 0046                500      BSR     PLAY_JUMP               ; Play jump sound
000013AC  23FC FFFFFFEC 00001596   501      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000013B6  4E75                     502      RTS                             ; Return to subroutine
000013B8                           503  JUMP_DONE:
000013B8  4E75                     504      RTS                             ; Return to subroutine
000013BA                           505  *-----------------------------------------------------------
000013BA                           506  * Subroutine    : Up
000013BA                           507  * Description   : Move Up
000013BA                           508  * By: Qadeer Hussain
000013BA                           509  *-----------------------------------------------------------
000013BA                           510  ;UP:
000013BA                           511      ;CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000013BA                           512      ;BEQ     PERFORM_UP              ; Do Jump
000013BA                           513      ;BRA     UP_DONE                 
000013BA                           514  ;PERFORM_UP:
000013BA                           515      ;BSR     PLAY_UP                 ; Play jump sound
000013BA                           516      ;MOVE.L  #PLYR_UP_V,PLAYER_Y ; Set the players velocity to true
000013BA                           517      ;RTS                             ; Return to subroutine
000013BA                           518  ;UP_DONE:
000013BA                           519      ;RTS                             ; Return to subroutine
000013BA                           520  *-----------------------------------------------------------
000013BA                           521  * Subroutine    : Down
000013BA                           522  * Description   : Move Down
000013BA                           523  * By: Qadeer Hussain
000013BA                           524  *-----------------------------------------------------------
000013BA                           525  *DOWN:
000013BA                           526      ;CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000013BA                           527      ;BEQ     PERFORM_DOWN            ; Do Jump
000013BA                           528      ;BRA     DOWN_DONE                 
000013BA                           529  ;PERFORM_DOWN:
000013BA                           530      ;BSR     PLAY_DOWN               ; Play jump sound
000013BA                           531      ;MOVE.L  #PLYR_DOWN_V,PLAYER_Y ; Set the players velocity to true
000013BA                           532      ;RTS                             ; Return to subroutine
000013BA                           533  ;DOWN_DONE:
000013BA                           534      ;RTS                             ; Return to subroutine
000013BA                           535  *-----------------------------------------------------------
000013BA                           536  * Subroutine    : Idle
000013BA                           537  * Description   : Perform a Idle
000013BA                           538  *----------------------------------------------------------- 
000013BA                           539  IDLE:
000013BA  6100 0016                540      BSR     PLAY_RUN                ; Play Run Wav
000013BE  4E75                     541      RTS                             ; Return to subroutine
000013C0                           542  
000013C0                           543  *-----------------------------------------------------------
000013C0                           544  * Subroutines   : Sound Load and Play
000013C0                           545  * Description   : Initialise game sounds into memory 
000013C0                           546  * Current Sounds are RUN, JUMP and Opps for Collision
000013C0                           547  *-----------------------------------------------------------
000013C0                           548  RUN_LOAD:
000013C0  43F9 000015B3            549      LEA     RUN_WAV,    A1          ; Load Wav File into A1
000013C6  323C 0000                550      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
000013CA  303C 0047                551      MOVE    #71,        D0          ; Load into memory
000013CE  4E4F                     552      TRAP    #15                     ; Trap (Perform action)
000013D0  4E75                     553      RTS                             ; Return to subroutine
000013D2                           554  
000013D2                           555  PLAY_RUN:
000013D2  323C 0000                556      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
000013D6  303C 0048                557      MOVE    #72,        D0          ; Play Sound
000013DA  4E4F                     558      TRAP    #15                     ; Trap (Perform action)
000013DC  4E75                     559      RTS                             ; Return to subroutine
000013DE                           560  
000013DE                           561  JUMP_LOAD:
000013DE  43F9 000015AA            562      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
000013E4  323C 0001                563      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
000013E8  303C 0047                564      MOVE    #71,        D0          ; Load into memory
000013EC  4E4F                     565      TRAP    #15                     ; Trap (Perform action)
000013EE  4E75                     566      RTS                             ; Return to subroutine
000013F0                           567  
000013F0                           568  PLAY_JUMP:
000013F0  323C 0001                569      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000013F4  303C 0048                570      MOVE    #72,        D0          ; Play Sound
000013F8  4E4F                     571      TRAP    #15                     ; Trap (Perform action)
000013FA  4E75                     572      RTS                             ; Return to subroutine
000013FC                           573  
000013FC                           574  OPPS_LOAD:
000013FC  43F9 000015BB            575      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
00001402  323C 0002                576      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001406  303C 0047                577      MOVE    #71,        D0          ; Load into memory
0000140A  4E4F                     578      TRAP    #15                     ; Trap (Perform action)
0000140C  4E75                     579      RTS                             ; Return to subroutine
0000140E                           580  
0000140E                           581  PLAY_OPPS:
0000140E  323C 0002                582      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
00001412  303C 0048                583      MOVE    #72,        D0          ; Play Sound
00001416  4E4F                     584      TRAP    #15                     ; Trap (Perform action)
00001418  4E75                     585      RTS                             ; Return to subroutine
0000141A                           586  
0000141A                           587  *-----------------------------------------------------------
0000141A                           588  * Subroutine    : Draw Player
0000141A                           589  * Description   : Draw Player Square
0000141A                           590  *-----------------------------------------------------------
0000141A                           591  DRAW_PLAYER:
0000141A                           592      ; Set Pixel Colors
0000141A  223C 00FFFFFF            593      MOVE.L  #WHITE,     D1          ; Set Background color
00001420  103C 0050                594      MOVE.B  #80,        D0          ; Task for Background Color
00001424  4E4F                     595      TRAP    #15                     ; Trap (Perform action)
00001426                           596  
00001426                           597      ; Set X, Y, Width and Height
00001426  2239 0000158A            598      MOVE.L  PLAYER_X,   D1          ; X
0000142C  2439 0000158E            599      MOVE.L  PLAYER_Y,   D2          ; Y
00001432  2639 0000158A            600      MOVE.L  PLAYER_X,   D3
00001438  5083                     601      ADD.L   #PLYR_W_INIT,   D3      ; Width
0000143A  2839 0000158E            602      MOVE.L  PLAYER_Y,   D4 
00001440  5084                     603      ADD.L   #PLYR_H_INIT,   D4      ; Height
00001442                           604      
00001442                           605      ; Draw Player
00001442  103C 0057                606      MOVE.B  #87,        D0          ; Draw Player
00001446  4E4F                     607      TRAP    #15                     ; Trap (Perform action)
00001448  4E75                     608      RTS                             ; Return to subroutine
0000144A                           609  
0000144A                           610  *-----------------------------------------------------------
0000144A                           611  * Subroutine    : Draw Enemy
0000144A                           612  * Description   : Draw Enemy Square
0000144A                           613  *-----------------------------------------------------------
0000144A                           614  DRAW_ENEMY:
0000144A                           615      ; Set Pixel Colors
0000144A  223C 000000FF            616      MOVE.L  #RED,       D1          ; Set Background color
00001450  103C 0050                617      MOVE.B  #80,        D0          ; Task for Background Color
00001454  4E4F                     618      TRAP    #15                     ; Trap (Perform action)
00001456                           619  
00001456                           620      ; Set X, Y, Width and Height
00001456  2239 000015A2            621      MOVE.L  ENEMY_X,    D1          ; X
0000145C  2439 000015A6            622      MOVE.L  ENEMY_Y,    D2          ; Y
00001462  2639 000015A2            623      MOVE.L  ENEMY_X,    D3
00001468  5083                     624      ADD.L   #ENMY_W_INIT,   D3      ; Width
0000146A  2839 000015A6            625      MOVE.L  ENEMY_Y,    D4 
00001470  5084                     626      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001472                           627      
00001472                           628      ; Draw Enemy    
00001472  103C 0057                629      MOVE.B  #87,        D0          ; Draw Enemy
00001476  4E4F                     630      TRAP    #15                     ; Trap (Perform action)
00001478  4E75                     631      RTS                             ; Return to subroutine
0000147A                           632  
0000147A                           633  *-----------------------------------------------------------
0000147A                           634  * Subroutine    : Collision Check
0000147A                           635  * Description   : Axis-Aligned Bounding Box Collision Detection
0000147A                           636  * Algorithm checks for overlap on the 4 sides of the Player and 
0000147A                           637  * Enemy rectangles
0000147A                           638  * PLAYER_X <= ENEMY_X + ENEMY_W &&
0000147A                           639  * PLAYER_X + PLAYER_W >= ENEMY_X &&
0000147A                           640  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
0000147A                           641  * PLAYER_H + PLAYER_Y >= ENEMY_Y
0000147A                           642  *-----------------------------------------------------------
0000147A                           643  CHECK_COLLISIONS:
0000147A  4281                     644      CLR.L   D1                      ; Clear D1
0000147C  4282                     645      CLR.L   D2                      ; Clear D2
0000147E                           646  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000147E  2239 0000158A            647      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001484  2439 000015A2            648      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
0000148A  D4B8 0008                649      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000148E  B481                     650      CMP.L   D1,         D2          ; Do the Overlap ?
00001490  6F00 0006                651      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001494  6000 0044                652      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001498                           653  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001498  D2B8 0008                654      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000149C  2439 000015A2            655      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
000014A2  B481                     656      CMP.L   D1,         D2          ; Do they OverLap ?
000014A4  6C00 0006                657      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
000014A8  6000 0030                658      BRA     COLLISION_CHECK_DONE    ; If not no collision   
000014AC                           659  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000014AC  2239 0000158E            660      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000014B2  2439 000015A6            661      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
000014B8  D4B8 0008                662      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000014BC  B481                     663      CMP.L   D1,         D2          ; Do they Overlap ?
000014BE  6F00 0006                664      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
000014C2  6000 0016                665      BRA     COLLISION_CHECK_DONE    ; If not no collision 
000014C6                           666  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
000014C6  D2B8 0008                667      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
000014CA  2439 000015A6            668      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
000014D0  B481                     669      CMP.L   D1,         D2          ; Do they OverLap ?
000014D2  6C00 0016                670      BGE     COLLISION               ; Collision !
000014D6  6000 0002                671      BRA     COLLISION_CHECK_DONE    ; If not no collision
000014DA                           672  COLLISION_CHECK_DONE:               ; No Collision Update points
000014DA  5281                     673      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
000014DC  D2B9 00001592            674      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
000014E2  23C1 00001592            675      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
000014E8  4E75                     676      RTS                             ; Return to subroutine
000014EA                           677  
000014EA                           678  COLLISION:
000014EA  6100 FF22                679      BSR     PLAY_OPPS               ; Play Opps Wav
000014EE  23FC 00000000 00001592   680      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000014F8  4E75                     681      RTS                             ; Return to subroutine
000014FA                           682  
000014FA                           683  *-----------------------------------------------------------
000014FA                           684  * Subroutine    : EXIT
000014FA                           685  * Description   : Exit message and End Game
000014FA                           686  *-----------------------------------------------------------
000014FA                           687  EXIT:
000014FA                           688      ; Show if Exiting is Running
000014FA  103C 000B                689      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014FE  323C 4004                690      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001502  4E4F                     691      TRAP    #15                     ; Trap (Perform action)
00001504  43F9 00001575            692      LEA     EXIT_MSG,   A1          ; Exit
0000150A  303C 000D                693      MOVE    #13,        D0          ; No Line feed
0000150E  4E4F                     694      TRAP    #15                     ; Trap (Perform action)
00001510  103C 0009                695      MOVE.B  #TC_EXIT,   D0          ; Exit Code
00001514  4E4F                     696      TRAP    #15                     ; Trap (Perform action)
00001516  FFFF FFFF                697      SIMHALT
0000151A                           698  
0000151A                           699  *-----------------------------------------------------------
0000151A                           700  * Section       : Messages
0000151A                           701  * Description   : Messages to Print on Console, names should be
0000151A                           702  * self documenting
0000151A                           703  *-----------------------------------------------------------
0000151A= 53 63 6F 72 65 20 ...    704  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001523= 4B 65 79 43 6F 64 ...    705  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
0000152E= 4A 75 6D 70 2E 2E ...    706  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
00001537                           707  ;---------------------------------------------------------
00001537= 55 70 2E 2E 2E 2E 00     708  UP_MSG          DC.B    'Up....', 0       ; Up Message
0000153E= 44 6F 77 6E 2E 2E ...    709  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
00001547                           710  ;-----------------------------------------------------------
00001547                           711  
00001547= 49 64 6C 65 2E 2E ...    712  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
00001550= 55 70 64 61 74 65 ...    713  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
0000155B= 44 72 61 77 2E 2E ...    714  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00001564                           715  
00001564= 58 3A 00                 716  X_MSG           DC.B    'X:', 0             ; X Position Message
00001567= 59 3A 00                 717  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
0000156A= 56 3A 00                 718  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
0000156D= 47 3A 00                 719  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
00001570= 47 4E 44 3A 00           720  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
00001575                           721  
00001575= 45 78 69 74 69 6E ...    722  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
00001581                           723  
00001581                           724  *-----------------------------------------------------------
00001581                           725  * Section       : Graphic Colors
00001581                           726  * Description   : Screen Pixel Color
00001581                           727  *-----------------------------------------------------------
00001581  =00FFFFFF                728  WHITE           EQU     $00FFFFFF
00001581  =000000FF                729  RED             EQU     $000000FF
00001581                           730  
00001581                           731  *-----------------------------------------------------------
00001581                           732  * Section       : Screen Size
00001581                           733  * Description   : Screen Width and Height
00001581                           734  *-----------------------------------------------------------
00001582                           735  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001584                           736  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001586                           737  
00001586                           738  *-----------------------------------------------------------
00001586                           739  * Section       : Keyboard Input
00001586                           740  * Description   : Used for storing Keypresses
00001586                           741  *-----------------------------------------------------------
00001586                           742  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
0000158A                           743  
0000158A                           744  *-----------------------------------------------------------
0000158A                           745  * Section       : Character Positions
0000158A                           746  * Description   : Player and Enemy Position Memory Locations
0000158A                           747  *-----------------------------------------------------------
0000158A                           748  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
0000158E                           749  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001592                           750  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001596                           751  
00001596                           752  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
0000159A                           753  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
0000159E                           754  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000015A2                           755  
000015A2                           756  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
000015A6                           757  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
000015AA                           758  
000015AA                           759  *-----------------------------------------------------------
000015AA                           760  * Section       : Sounds
000015AA                           761  * Description   : Sound files, which are then loaded and given
000015AA                           762  * an address in memory, they take a longtime to process and play
000015AA                           763  * so keep the files small. Used https://voicemaker.in/ to 
000015AA                           764  * generate and Audacity to convert MP3 to WAV
000015AA                           765  *-----------------------------------------------------------
000015AA= 6A 75 6D 70 2E 77 ...    766  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
000015B3= 72 75 6E 2E 77 61 ...    767  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
000015BB= 6F 70 70 73 2E 77 ...    768  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
000015C4                           769  
000015C4                           770      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    147A
COLLISION           14EA
COLLISION_CHECK_DONE  14DA
CURRENT_KEY         1586
DOWN                1182
DOWNARROW           28
DOWN_MSG            153E
DRAW                11AA
DRAW_ENEMY          144A
DRAW_MSG            155B
DRAW_PLAYER         141A
DRAW_PLYR_DATA      11C8
ENEMY_X             15A2
ENEMY_Y             15A6
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                14FA
EXIT_MSG            1575
GAME                10A4
GAMELOOP            10A8
GND_FALSE           0
GND_MSG             1570
GND_TRUE            1
G_MSG               156D
IDLE                13BA
IDLE_MSG            1547
INITIALISE          1000
INPUT               10D2
IS_PLAYER_ON_GND    1342
JMP_INDEX           1
JUMP                1396
JUMP_DONE           13B8
JUMP_LOAD           13DE
JUMP_MSG            152E
JUMP_WAV            15AA
KEYCODE_MSG         1523
LEFTARROW           25
MOVE_ENEMY          1192
OPPS_INDEX          2
OPPS_LOAD           13FC
OPPS_WAV            15BB
PERFORM_JUMP        13A8
PLAYER_SCORE        1592
PLAYER_X            158A
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  147E
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1498
PLAYER_Y            158E
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  14AC
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  14C6
PLAY_JUMP           13F0
PLAY_OPPS           140E
PLAY_RUN            13D2
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_DOWN_V         2
PLYR_GRAVITY        159A
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         159E
PLYR_UP_V           FFFFFFFB
PLYR_VELOCITY       1596
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       10F0
RED                 FF
RESET_ENEMY_POSITION  119A
RIGHTARROW          27
RUN_INDEX           0
RUN_LOAD            13C0
RUN_WAV             15B3
SCORE_MSG           151A
SCREEN_H            1584
SCREEN_W            1582
SET_OFF_GROUND      138A
SET_ON_GROUND       1362
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UP                  1170
UPARROW             26
UPDATE              1134
UPDATE_MSG          1550
UP_MSG              1537
V_MSG               156A
WAIT                10C4
WHITE               FFFFFF
X_MSG               1564
Y_MSG               1567
