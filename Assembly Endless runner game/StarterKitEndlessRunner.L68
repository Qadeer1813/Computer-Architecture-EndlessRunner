00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 01/03/2023 22:52:53

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =0000000E                 29  PLYR_W_INIT EQU         14          ; Players initial Width
00001000  =0000000E                 30  PLYR_H_INIT EQU         14          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000                            34  ;-----------------------------------------------------------
00001000                            35  ;PLYR_UP_V   EQU         -05          ; Player UP Velocity
00001000                            36  ;PLYR_DOWN_V EQU         02          ; Player DOWN Velocity
00001000                            37  ;-----------------------------------------------------------
00001000  =00000001                 38  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            39  
00001000  =00000001                 40  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 41  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            42  
00001000  =00000000                 43  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 44  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 45  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            46  
00001000  =0000000E                 47  ENMY_W_INIT EQU         14          ; Enemy initial Width
00001000  =0000000E                 48  ENMY_H_INIT EQU         14          ; Enemy initial Height
00001000                            49  
00001000                            50  ;ENEMY_LIST  EQU         
00001000                            51  *-----------------------------------------------------------
00001000                            52  * Section       : Game Stats
00001000                            53  * Description   : Points, Health
00001000                            54  *-----------------------------------------------------------
00001000  =00000001                 55  POINTS      EQU         01          ; Points added
00001000  =00002000                 56  HEALTH      EQU         $2000       ; Health Sub
00001000                            57  *-----------------------------------------------------------
00001000                            58  * Section       : Keyboard Keys
00001000                            59  * Description   : Spacebar and Escape or two functioning keys
00001000                            60  * Spacebar to JUMP and Escape to Exit Game
00001000                            61  *-----------------------------------------------------------
00001000  =00000020                 62  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 63  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            64  ;------------------------------------------------------------  
00001000  =00000026                 65  UPARROW     EQU         $26         ; Right key ASCII Keycode
00001000  =00000028                 66  DOWNARROW   EQU         $28         ; Down Key ASCII Keycode 
00001000                            67  ;------------------------------------------------------------    
00001000                            68  *-----------------------------------------------------------
00001000                            69  * Subroutine    : Initialise
00001000                            70  * Description   : Initialise game data into memory such as 
00001000                            71  * sounds and screen size
00001000                            72  *-----------------------------------------------------------
00001000                            73  INITIALISE:
00001000                            74      ; Initialise Sounds
00001000  6100 02F0                 75      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 030A                 76      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 0324                 77      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            78  
0000100C                            79      ; Screen Size
0000100C  103C 0021                 80      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      81      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      82      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 000014DC             83      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      84      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 000014DA             85      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            86  
00001022                            87      ; Place the Player at the center of the screen
00001022  4281                      88      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024                            89      ;MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001024                            90      ;DIVU    #02,        D1          ; divide by 2 for center on X Axis
00001024  23FC 00000000 000014E2    91      MOVE.L  #00,         PLAYER_X    ; Players X set to 0 Position
0000102E                            92  
0000102E  4281                      93      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001030  3239 000014DC             94      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001036  82FC 0002                 95      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000103A  23C1 000014E6             96      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001040                            97  
00001040                            98      ; Initialise Player Score
00001040  4281                      99      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001042  7200                     100      MOVE.L  #0,         D1          ; Init Score
00001044  23C1 000014EA            101      MOVE.L  D1,         PLAYER_SCORE
0000104A                           102      
0000104A                           103      ;Initialize Health
0000104A  4281                     104      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000104C  7264                     105      MOVE.L  #100,       D1          ; Init Score
0000104E  23C1 000014EE            106      MOVE.L  D1,         HEALTH_VALUE
00001054                           107  
00001054                           108      ; Initialize Player on Ground
00001054  23FC 00000001 000014FA   109      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
0000105E                           110  
0000105E                           111      ; Initial Position for Enemy
0000105E  4281                     112      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001060  3239 000014DA            113      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001066  23C1 000014FE            114      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000106C                           115  
0000106C  4281                     116      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000106E  3239 000014DC            117      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001074  82FC 0002                118      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001078  23C1 00001502            119      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
0000107E                           120      
0000107E                           121  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000107E                           122  *    MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000107E                           123  *    MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000107E                           124  *
0000107E                           125  *    CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000107E                           126  *    MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000107E                           127  *    DIVU    RANDOM_NUMBER,        D1          ; divide by 2 for center on Y Axis
0000107E                           128  *    MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
0000107E                           129  
0000107E                           130  
0000107E                           131      ; Enable the screen back buffer(see easy 68k help)
0000107E  103C 005C                132      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001082  123C 0011                133      MOVE.B  #17,        D1          ; Combine Tasks
00001086  4E4F                     134      TRAP    #15                     ; Trap (Perform action)
00001088                           135  
00001088                           136      ; Clear the screen (see easy 68k help)
00001088  103C 000B                137      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000108C  323C FF00                138      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
00001090  4E4F                     139      TRAP    #15                     ; Trap (Perform action)
00001092                           140  
00001092                           141  *-----------------------------------------------------------
00001092                           142  * Subroutine    : Game
00001092                           143  * Description   : Game including main GameLoop. GameLoop is like
00001092                           144  * a while loop in that it runs forever until interupted
00001092                           145  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
00001092                           146  *-----------------------------------------------------------
00001092                           147  GAME:
00001092  6100 0270                148      BSR     PLAY_RUN                ; Play Run Wav
00001096                           149  GAMELOOP:
00001096  7008                     150      MOVEQ   #08,D0                   ; Get time in 1/100 seconds
00001098  4E4F                     151      TRAP    #15
0000109A                           152  
0000109A  2F01                     153      MOVE.L  D1,-(SP)                ; Push time on the stack
0000109C                           154      
0000109C                           155      ; Main Gameloop
0000109C  6100 0022                156      BSR     INPUT                   ; Check Keyboard Input
000010A0  6100 006E                157      BSR     UPDATE                  ; Update positions and points
000010A4                           158      ;BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010A4  6100 0316                159      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010A8  6100 00F6                160      BSR     DRAW                    ; Draw the Scene
000010AC  6100 00C6                161      BSR     Random_Number
000010B0                           162      ;BRA     GAMELOOP               ; Loop back to GameLoop
000010B0                           163      
000010B0  2E1F                     164      MOVE.L  (SP)+,D7
000010B2                           165  WAIT:
000010B2  7008                     166      MOVEQ   #8,D0                   ; Get time in 1/100 ths seconds
000010B4  4E4F                     167      TRAP    #15
000010B6  9287                     168      SUB.L   D7,D1                   ; Subtract previous time from current time
000010B8  B23C 0001                169      CMP.B   #01,D1                   ; Compare with 9/100ths adding the wait allowed the character and enemy to slow down to the same pace 
000010BC                           170                                      ;but i also changed the speed of the enenemy  so the enemy is slightly faster than character
000010BC  6BF4                     171      BMI.S   WAIT                    ; Loop if time not up yet
000010BE                           172  
000010BE  60D6                     173      BRA     GAMELOOP                ; Loop back to Game loop
000010C0                           174      
000010C0                           175  
000010C0                           176  *-----------------------------------------------------------
000010C0                           177  * Subroutine    : Input
000010C0                           178  * Description   : Process Keyboard Input
000010C0                           179  *-----------------------------------------------------------
000010C0                           180  INPUT:
000010C0                           181      ; Process Input
000010C0  4281                     182      CLR.L   D1                      ; Clear Data Register
000010C2  103C 0013                183      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010C6  4E4F                     184      TRAP    #15                     ; Trap (Perform action)
000010C8  1401                     185      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010CA  B43C 0000                186      CMP.B   #00,        D2          ; Key is pressed
000010CE  6700 000E                187      BEQ     PROCESS_INPUT           ; Process Key
000010D2  4E4F                     188      TRAP    #15                     ; Trap for Last Key
000010D4                           189      ; Check if key still pressed
000010D4  B23C 00FF                190      CMP.B   #$FF,       D1          ; Is it still pressed
000010D8  6700 0004                191      BEQ     PROCESS_INPUT           ; Process Last Key
000010DC  4E75                     192      RTS                             ; Return to subroutine
000010DE                           193  
000010DE                           194  *-----------------------------------------------------------
000010DE                           195  * Subroutine    : Process Input
000010DE                           196  * Description   : Branch based on keys pressed
000010DE                           197  *-----------------------------------------------------------
000010DE                           198  PROCESS_INPUT:
000010DE  23C2 000014DE            199      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000010E4  0CB9 0000001B 000014DE   200      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000010EE  6700 0380                201      BEQ     EXIT                    ; Exit if Escape
000010F2                           202      ;--------------------------------------------------
000010F2  0CB9 00000026 000014DE   203      CMP.L   #UPARROW,  CURRENT_KEY  ; Is Current Key UP
000010FC  6700 002C                204      BEQ     UP                      ; Up
00001100  0CB9 00000028 000014DE   205      CMP.L   #DOWNARROW,CURRENT_KEY  ; Is Current Key Down
0000110A  6700 003E                206      BEQ     DOWN                    ; Down
0000110E                           207      ;--------------------------------------------------
0000110E                           208      ;BRA     IDLE                    ; Or Idle
0000110E  4E75                     209      RTS                             ; Return to subroutine
00001110                           210  
00001110                           211  *-----------------------------------------------------------
00001110                           212  * Subroutine    : Update
00001110                           213  * Description   : Main update loop update Player and Enemies
00001110                           214  *-----------------------------------------------------------
00001110                           215  UPDATE:
00001110                           216      ; Move the Enemy
00001110  4281                     217      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001112  4281                     218      CLR.L   D1                      ; Clear the contents of D0
00001114  2239 000014FE            219      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
0000111A  B2BC 00000000            220      CMP.L   #00,        D1
00001120  6F00 006E                221      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
00001124  6000 0046                222      BRA     MOVE_ENEMY              ; Move the Enemy
00001128                           223  
00001128  4E75                     224      RTS                             ; Return to subroutine  
0000112A                           225  *-----------------------------------------------------------
0000112A                           226  * Subroutine    : UP
0000112A                           227  * Description   : Move the enemy up 2 frames
0000112A                           228  * By: Qadeer Hussain
0000112A                           229  *-----------------------------------------------------------
0000112A                           230  UP:  
0000112A  55B9 000014E6            231      SUB.L   #2, PLAYER_Y
00001130                           232     
00001130                           233      
00001130                           234      ; Check if player is out of bounds
00001130  0CB9 00000055 000014E6   235      CMP.L   #85, PLAYER_Y     ; check if player is above top of screen
0000113A  6D00 0004                236      BLT     OUT_OF_BOUNDS
0000113E  4E75                     237      RTS
00001140                           238      
00001140                           239  OUT_OF_BOUNDS:
00001140                           240      ; Player is out of bounds, move back into screen
00001140  7402                     241      MOVE.L  #2, D2   ; set D2 to the amount to move
00001142  D5B9 000014E6            242      ADD.L   D2, PLAYER_Y  ; move player down
00001148  4E75                     243      RTS
0000114A                           244  *-----------------------------------------------------------
0000114A                           245  * Subroutine    : DOWN
0000114A                           246  * Description   : Move the enemy down 2 frames
0000114A                           247  * By: Qadeer Hussain
0000114A                           248  *-----------------------------------------------------------
0000114A                           249  DOWN:
0000114A  54B9 000014E6            250      ADD.L   #2, PLAYER_Y 
00001150                           251      ; Check if player is out of bounds
00001150  0CB9 000001CC 000014E6   252      CMP.L   #460, PLAYER_Y  ; check if player is below bottom of screen
0000115A  6C00 0004                253      BGE     OUT_OF_BOUNDS_DOWN
0000115E  4E75                     254      RTS    
00001160                           255  
00001160                           256  OUT_OF_BOUNDS_DOWN:
00001160                           257      ; Player is out of bounds, move back into screen
00001160  7402                     258      MOVE.L  #2, D2   ; set D2 to the amount to move
00001162  4482                     259      NEG.L   D2      ; negate D2 to move upwards
00001164  D5B9 000014E6            260      ADD.L   D2, PLAYER_Y  ; move player up
0000116A  4E75                     261      RTS
0000116C                           262  *-----------------------------------------------------------
0000116C                           263  * Subroutine    : Move Enemy
0000116C                           264  * Description   : Move Enemy Right to Left
0000116C                           265  *-----------------------------------------------------------
0000116C                           266  MOVE_ENEMY:
0000116C  51B9 000014FE            267      SUB.L   #08,        ENEMY_X     ; Move enemy by X Value
00001172  4E75                     268      RTS
00001174                           269  *-----------------------------------------------------------
00001174                           270  * Subroutine    : Random Number Generator
00001174                           271  * Description   : Generate random number for the enemey to spawn
00001174                           272  * By: Qadeer Hussain
00001174                           273  *-----------------------------------------------------------
00001174                           274  RANDOM_NUMBER:
00001174  103C 0008                275      MOVE.B #8, D0 #Loads D1 with Time in 100's of Seconds since midnight (6 Bits)
00001178  4E4F                     276      TRAP #15  #Place time in D1
0000117A  C2BC 0000FFFF            277      AND.L #$0000FFFF, D1 # AND 6 Bits to prevent any overflow
00001180  82FC 000A                278      DIVU #10, D1 #Divide by 10, 100, 1000, 10000 depending on Number range required
00001184  4841                     279      SWAP D1 #SWAP Higher Order Word and Lower Order Word in D1
00001186  5241                     280      ADDQ.W #1, D1 #Add 1 to D1.W so number is at least 1
00001188  3401                     281      MOVE.W D1, D2 #Extract the number from D1.W
0000118A  4281                     282      CLR.L D1 # Clear contents of D1
0000118C  3202                     283      MOVE.W D2, D1 #Move the generated number to D1
0000118E  4E75                     284      RTS    
00001190                           285  
00001190                           286  *    MOVE.L #0,D0 ; Load the address of the enemy list into D1
00001190                           287  *    MOVE.L #ENEMY_LIST,D1 ; Load the address of the enemy list into D1
00001190                           288  *
00001190                           289  *spawn_enemies:
00001190                           290  *    ; Generate a random number to determine if an enemy should be spawned
00001190                           291  *    MOVE #0,D2 ; Set D2 to 0
00001190                           292  *    MOVE #255,D3 ; Set D3 to 255
00001190                           293  *    JSR Random_Number ; Call a subroutine to generate a random number between 0 and 255
00001190                           294  *    CMP #128,D0 ; Compare the result to 128
00001190                           295  *    BCS no_spawn ; If the result is greater than or equal to 128, skip spawning an enemy
00001190                           296  *    
00001190                           297  *    ;Spawn an enemy
00001190                           298  *    MOVE.L D1,(A0)+ ; Add the address of the enemy list to A0 and store it in the current node
00001190                           299  *    ADDQ.L #1,D0 ; Increment the enemy counter
00001190                           300  *    CMP.L #MAX_ENEMIES,D0 ; Compare the counter to the maximum number of enemies
00001190                           301  *    BNE spawn_enemies ; If the counter is less than the maximum, loop to spawn more enemies
00001190                           302  *    
00001190                           303  *no_spawn:
00001190                           304  *    RTS
00001190                           305  *-----------------------------------------------------------
00001190                           306  * Subroutine    : Reset Enemy
00001190                           307  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001190                           308  *-----------------------------------------------------------
00001190                           309  RESET_ENEMY_POSITION:
00001190  4281                     310      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001192  3239 000014DA            311      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001198  23C1 000014FE            312      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000119E  4E75                     313      RTS
000011A0                           314  
000011A0                           315  *-----------------------------------------------------------
000011A0                           316  * Subroutine    : Draw
000011A0                           317  * Description   : Draw Screen
000011A0                           318  *-----------------------------------------------------------
000011A0                           319  DRAW: 
000011A0                           320      ; Enable back buffer
000011A0  103C 005E                321      MOVE.B  #94,        D0
000011A4  4E4F                     322      TRAP    #15
000011A6                           323  
000011A6                           324      ; Clear the screen
000011A6  103C 000B                325      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011AA  323C FF00                326      MOVE.W  #$FF00,     D1          ; Clear contents
000011AE  4E4F                     327      TRAP    #15                     ; Trap (Perform action)
000011B0                           328  
000011B0  6100 000C                329      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
000011B4  6100 0196                330      BSR     DRAW_PLAYER             ; Draw Player
000011B8  6100 01CA                331      BSR     DRAW_ENEMY              ; Draw Enemy
000011BC  4E75                     332      RTS                             ; Return to subroutine
000011BE                           333  
000011BE                           334  *-----------------------------------------------------------
000011BE                           335  * Subroutine    : Draw Player Data
000011BE                           336  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
000011BE                           337  *-----------------------------------------------------------
000011BE                           338  DRAW_PLYR_DATA:
000011BE  4281                     339      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000011C0                           340  
000011C0                           341      ; Player Score Message
000011C0  103C 000B                342      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011C4  323C 0201                343      MOVE.W  #$0201,     D1          ; Col 02, Row 01
000011C8  4E4F                     344      TRAP    #15                     ; Trap (Perform action)
000011CA  43F9 00001490            345      LEA     SCORE_MSG,  A1          ; Score Message
000011D0  303C 000D                346      MOVE    #13,        D0          ; No Line feed
000011D4  4E4F                     347      TRAP    #15                     ; Trap (Perform action)
000011D6                           348  
000011D6                           349      ; Player Score Value
000011D6  103C 000B                350      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011DA  323C 0901                351      MOVE.W  #$0901,     D1          ; Col 09, Row 01
000011DE  4E4F                     352      TRAP    #15                     ; Trap (Perform action)
000011E0  103C 0003                353      MOVE.B  #03,        D0          ; Display number at D1.L
000011E4  2239 000014EA            354      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000011EA  4E4F                     355      TRAP    #15                     ; Trap (Perform action)
000011EC                           356      
000011EC                           357      ; Health Message
000011EC  103C 000B                358      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011F0  323C 0203                359      MOVE.W  #$0203,     D1          ; Col 02, Row 03
000011F4  4E4F                     360      TRAP    #15                     ; Trap (Perform action)
000011F6  43F9 000014C3            361      LEA     HEALTH_MSG,   A1          ; Health Message
000011FC  303C 000D                362      MOVE    #13,        D0          ; No Line feed
00001200  4E4F                     363      TRAP    #15                     ; Trap (Perform action)
00001202                           364      
00001202                           365      ; Health Value
00001202  103C 000B                366      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001206  323C 0903                367      MOVE.W  #$0903,     D1          ; Col 09, Row 03
0000120A  4E4F                     368      TRAP    #15                     ; Trap (Perform action)
0000120C  103C 0003                369      MOVE.B  #03,        D0          ; Display number at D1.L
00001210  2239 000014EE            370      MOVE.L  HEALTH_VALUE,  D1          ; Move Score to D1.L
00001216  4E4F                     371      TRAP    #15                     ; Trap (Perform action)
00001218                           372      
00001218                           373      ; Player X Message
00001218  103C 000B                374      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000121C  323C 0202                375      MOVE.W  #$0202,     D1          ; Col 02, Row 02
00001220  4E4F                     376      TRAP    #15                     ; Trap (Perform action)
00001222  43F9 000014BD            377      LEA     X_MSG,      A1          ; X Message
00001228  303C 000D                378      MOVE    #13,        D0          ; No Line feed
0000122C  4E4F                     379      TRAP    #15                     ; Trap (Perform action)
0000122E                           380      
0000122E                           381      ; Player X
0000122E  103C 000B                382      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
00001232  323C 0502                383      MOVE.W  #$0502,     D1          ; Col 05, Row 02
00001236  4E4F                     384      TRAP    #15                     ; Trap (Perform action)
00001238  103C 0003                385      MOVE.B  #03,        D0          ; Display number at D1.L
0000123C  2239 000014E2            386      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
00001242  4E4F                     387      TRAP    #15                     ; Trap (Perform action)
00001244                           388      
00001244                           389      ; Player Y Message
00001244  103C 000B                390      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001248  323C 1002                391      MOVE.W  #$1002,     D1          ; Col 10, Row 02
0000124C  4E4F                     392      TRAP    #15                     ; Trap (Perform action)
0000124E  43F9 000014C0            393      LEA     Y_MSG,      A1          ; Y Message
00001254  303C 000D                394      MOVE    #13,        D0          ; No Line feed
00001258  4E4F                     395      TRAP    #15                     ; Trap (Perform action)
0000125A                           396      
0000125A                           397      ; Player Y
0000125A  103C 000B                398      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000125E  323C 1202                399      MOVE.W  #$1202,     D1          ; Col 12, Row 02
00001262  4E4F                     400      TRAP    #15                     ; Trap (Perform action)
00001264  103C 0003                401      MOVE.B  #03,        D0          ; Display number at D1.L
00001268  2239 000014E6            402      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
0000126E  4E4F                     403      TRAP    #15                     ; Trap (Perform action) 
00001270                           404      
00001270                           405      ; Show Keys Pressed
00001270  103C 000B                406      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001274  323C 2001                407      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00001278  4E4F                     408      TRAP    #15                     ; Trap (Perform action)
0000127A  43F9 00001499            409      LEA     KEYCODE_MSG, A1         ; Keycode
00001280  303C 000D                410      MOVE    #13,        D0          ; No Line feed
00001284  4E4F                     411      TRAP    #15                     ; Trap (Perform action)
00001286                           412  
00001286                           413      ; Show KeyCode
00001286  103C 000B                414      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000128A  323C 3001                415      MOVE.W  #$3001,     D1          ; Col 30, Row 1
0000128E  4E4F                     416      TRAP    #15                     ; Trap (Perform action)    
00001290  2239 000014DE            417      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
00001296  103C 0003                418      MOVE.B  #03,        D0          ; Display the contents of D1
0000129A  4E4F                     419      TRAP    #15                     ; Trap (Perform action)
0000129C                           420  
0000129C  4E75                     421      RTS  
0000129E                           422      
0000129E                           423  *-----------------------------------------------------------
0000129E                           424  * Subroutine    : Player is on Ground
0000129E                           425  * Description   : Check if the Player is on or off Ground
0000129E                           426  *-----------------------------------------------------------
0000129E                           427  IS_PLAYER_ON_GND:
0000129E                           428      ; Check if Player is on Ground
0000129E  4281                     429      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012A0  4282                     430      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000012A2  3239 000014DC            431      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000012A8  82FC 0002                432      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000012AC  2439 000014E6            433      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
000012B2  B441                     434      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
000012B4  6C00 0008                435      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
000012B8  6D00 002C                436      BLT     SET_OFF_GROUND          ; The Player is off the Ground
000012BC  4E75                     437      RTS                             ; Return to subroutine
000012BE                           438      
000012BE                           439  *-----------------------------------------------------------
000012BE                           440  * Subroutine    : On Ground
000012BE                           441  * Description   : Set the Player On Ground
000012BE                           442  *-----------------------------------------------------------
000012BE                           443  SET_ON_GROUND:
000012BE  4281                     444      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012C0  3239 000014DC            445      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000012C6  82FC 0002                446      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000012CA  23C1 000014E6            447      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
000012D0  4281                     448      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012D2  7200                     449      MOVE.L  #00,        D1          ; Player Velocity
000012D4  23C1 000014F2            450      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
000012DA  23FC 00000001 000014FA   451      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
000012E4  4E75                     452      RTS
000012E6                           453  
000012E6                           454  *-----------------------------------------------------------
000012E6                           455  * Subroutine    : Off Ground
000012E6                           456  * Description   : Set the Player Off Ground
000012E6                           457  *-----------------------------------------------------------
000012E6                           458  SET_OFF_GROUND:
000012E6  23FC 00000000 000014FA   459      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
000012F0  4E75                     460      RTS                             ; Return to subroutine
000012F2                           461  
000012F2                           462  *-----------------------------------------------------------
000012F2                           463  * Subroutine    : Jump
000012F2                           464  * Description   : Perform a Jump
000012F2                           465  *-----------------------------------------------------------
000012F2                           466  *JUMP:
000012F2                           467  *    CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
000012F2                           468  *    BEQ     PERFORM_JUMP            ; Do Jump
000012F2                           469  *    BRA     JUMP_DONE               ;
000012F2                           470  *PERFORM_JUMP:
000012F2                           471  *    BSR     PLAY_JUMP               ; Play jump sound
000012F2                           472  *    MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
000012F2                           473  *    RTS                             ; Return to subroutine
000012F2                           474  *JUMP_DONE:
000012F2                           475  *    RTS                             ; Return to subroutine
000012F2                           476  *IDLE:
000012F2                           477  *    BSR     PLAY_RUN                ; Play Run Wav
000012F2                           478  *    RTS                             ; Return to subroutine
000012F2                           479  
000012F2                           480  *-----------------------------------------------------------
000012F2                           481  * Subroutines   : Sound Load and Play
000012F2                           482  * Description   : Initialise game sounds into memory 
000012F2                           483  * Current Sounds are RUN, JUMP and Opps for Collision
000012F2                           484  *-----------------------------------------------------------
000012F2                           485  RUN_LOAD:
000012F2  43F9 0000150F            486      LEA     RUN_WAV,    A1          ; Load Wav File into A1
000012F8  323C 0000                487      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
000012FC  303C 0047                488      MOVE    #71,        D0          ; Load into memory
00001300  4E4F                     489      TRAP    #15                     ; Trap (Perform action)
00001302  4E75                     490      RTS                             ; Return to subroutine
00001304                           491  
00001304                           492  PLAY_RUN:
00001304  323C 0000                493      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
00001308  303C 0048                494      MOVE    #72,        D0          ; Play Sound
0000130C  4E4F                     495      TRAP    #15                     ; Trap (Perform action)
0000130E  4E75                     496      RTS                             ; Return to subroutine
00001310                           497  
00001310                           498  JUMP_LOAD:
00001310  43F9 00001506            499      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
00001316  323C 0001                500      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
0000131A  303C 0047                501      MOVE    #71,        D0          ; Load into memory
0000131E  4E4F                     502      TRAP    #15                     ; Trap (Perform action)
00001320  4E75                     503      RTS                             ; Return to subroutine
00001322                           504  
00001322                           505  PLAY_JUMP:
00001322  323C 0001                506      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
00001326  303C 0048                507      MOVE    #72,        D0          ; Play Sound
0000132A  4E4F                     508      TRAP    #15                     ; Trap (Perform action)
0000132C  4E75                     509      RTS                             ; Return to subroutine
0000132E                           510  
0000132E                           511  OPPS_LOAD:
0000132E  43F9 00001517            512      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
00001334  323C 0002                513      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
00001338  303C 0047                514      MOVE    #71,        D0          ; Load into memory
0000133C  4E4F                     515      TRAP    #15                     ; Trap (Perform action)
0000133E  4E75                     516      RTS                             ; Return to subroutine
00001340                           517  
00001340                           518  PLAY_OPPS:
00001340  323C 0002                519      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
00001344  303C 0048                520      MOVE    #72,        D0          ; Play Sound
00001348  4E4F                     521      TRAP    #15                     ; Trap (Perform action)
0000134A  4E75                     522      RTS                             ; Return to subroutine
0000134C                           523  
0000134C                           524  *-----------------------------------------------------------
0000134C                           525  * Subroutine    : Draw Player
0000134C                           526  * Description   : Draw Player Square
0000134C                           527  *-----------------------------------------------------------
0000134C                           528  DRAW_PLAYER:
0000134C                           529      ; Set Pixel Colors
0000134C  223C 00FFFFFF            530      MOVE.L  #WHITE,     D1          ; Set Background color
00001352  103C 0050                531      MOVE.B  #80,        D0          ; Task for Background Color
00001356  4E4F                     532      TRAP    #15                     ; Trap (Perform action)
00001358                           533  
00001358                           534      ; Set X, Y, Width and Height
00001358  2239 000014E2            535      MOVE.L  PLAYER_X,   D1          ; X
0000135E  2439 000014E6            536      MOVE.L  PLAYER_Y,   D2          ; Y
00001364  2639 000014E2            537      MOVE.L  PLAYER_X,   D3
0000136A  0683 0000000E            538      ADD.L   #PLYR_W_INIT,   D3      ; Width
00001370  2839 000014E6            539      MOVE.L  PLAYER_Y,   D4 
00001376  0684 0000000E            540      ADD.L   #PLYR_H_INIT,   D4      ; Height
0000137C                           541      
0000137C                           542      ; Draw Player
0000137C  103C 0057                543      MOVE.B  #87,        D0          ; Draw Player
00001380  4E4F                     544      TRAP    #15                     ; Trap (Perform action)
00001382  4E75                     545      RTS                             ; Return to subroutine
00001384                           546  
00001384                           547  *-----------------------------------------------------------
00001384                           548  * Subroutine    : Draw Enemy
00001384                           549  * Description   : Draw Enemy Square
00001384                           550  *-----------------------------------------------------------
00001384                           551  DRAW_ENEMY:
00001384                           552      ; Set Pixel Colors
00001384  223C 000000FF            553      MOVE.L  #RED,       D1          ; Set Background color
0000138A  103C 0050                554      MOVE.B  #80,        D0          ; Task for Background Color
0000138E  4E4F                     555      TRAP    #15                     ; Trap (Perform action)
00001390                           556  
00001390                           557      ; Set X, Y, Width and Height
00001390  2239 000014FE            558      MOVE.L  ENEMY_X,    D1          ; X
00001396  2439 00001502            559      MOVE.L  ENEMY_Y,    D2          ; Y
0000139C  2639 000014FE            560      MOVE.L  ENEMY_X,    D3
000013A2  0683 0000000E            561      ADD.L   #ENMY_W_INIT,   D3      ; Width
000013A8  2839 00001502            562      MOVE.L  ENEMY_Y,    D4 
000013AE  0684 0000000E            563      ADD.L   #ENMY_H_INIT,   D4      ; Height
000013B4                           564      
000013B4                           565      ; Draw Enemy    
000013B4  103C 0057                566      MOVE.B  #87,        D0          ; Draw Enemy
000013B8  4E4F                     567      TRAP    #15                     ; Trap (Perform action)
000013BA  4E75                     568      RTS                             ; Return to subroutine
000013BC                           569  *-----------------------------------------------------------
000013BC                           570  * Subroutine    : Collision Check
000013BC                           571  * Description   : Axis-Aligned Bounding Box Collision Detection
000013BC                           572  * Algorithm checks for overlap on the 4 sides of the Player and 
000013BC                           573  * Enemy rectangles
000013BC                           574  * PLAYER_X <= ENEMY_X + ENEMY_W &&
000013BC                           575  * PLAYER_X + PLAYER_W >= ENEMY_X &&
000013BC                           576  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
000013BC                           577  * PLAYER_H + PLAYER_Y >= ENEMY_Y
000013BC                           578  *-----------------------------------------------------------
000013BC                           579  CHECK_COLLISIONS:
000013BC  4281                     580      CLR.L   D1                      ; Clear D1
000013BE  4282                     581      CLR.L   D2                      ; Clear D2
000013C0                           582      
000013C0                           583  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
000013C0  2239 000014E2            584      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
000013C6  2439 000014FE            585      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
000013CC  D4B8 000E                586      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
000013D0  B481                     587      CMP.L   D1,         D2          ; Do the Overlap ?
000013D2  6F00 0006                588      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
000013D6  6000 0044                589      BRA     COLLISION_CHECK_DONE    ; If not no collision
000013DA                           590      
000013DA                           591  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
000013DA  D2B8 000E                592      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
000013DE  2439 000014FE            593      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
000013E4  B481                     594      CMP.L   D1,         D2          ; Do they OverLap ?
000013E6  6C00 0006                595      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
000013EA  6000 0030                596      BRA     COLLISION_CHECK_DONE    ; If not no collision
000013EE                           597     
000013EE                           598  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
000013EE  2239 000014E6            599      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
000013F4  2439 00001502            600      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
000013FA  D4B8 000E                601      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
000013FE  B481                     602      CMP.L   D1,         D2          ; Do they Overlap ?
00001400  6F00 0006                603      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00001404  6000 0016                604      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001408                           605      
00001408                           606  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001408  D2B8 000E                607      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
0000140C  2439 00001502            608      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
00001412  B481                     609      CMP.L   D1,         D2          ; Do they OverLap ?
00001414  6C00 0016                610      BGE     COLLISION               ; Collision !
00001418  6000 0002                611      BRA     COLLISION_CHECK_DONE    ; If not no collision
0000141C                           612      
0000141C                           613  COLLISION_CHECK_DONE:               ; No Collision Update points
0000141C  5281                     614      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
0000141E  D2B9 000014EA            615      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001424  23C1 000014EA            616      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
0000142A  4E75                     617      RTS                             ; Return to subroutine
0000142C                           618      
0000142C                           619  COLLISION:
0000142C  6100 FF12                620      BSR     PLAY_OPPS               ; Play Opps Wav
00001430  42B9 000014EA            621      CLR.L   PLAYER_SCORE            ; Reset Player Score
00001436  04B9 00000014 000014EE   622      SUB.L   #20, HEALTH_VALUE
00001440                           623      IF.L    (HEALTH_VALUE) <EQ> #0 THEN
0000144E                           624      
0000144E  103C 000B                625              MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001452  323C FF00                626              MOVE.W  #$FF00,     D1          ; Clear contents
00001456  4E4F                     627              TRAP    #15                     ; Trap (Perform action)
00001458                           628              
00001458  6100 FD64                629              BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000145C  6100 FEEE                630              BSR     DRAW_PLAYER             ; Draw Player
00001460  6100 FF22                631              BSR     DRAW_ENEMY              ; Draw Enemy
00001464                           632  
00001464  103C 005E                633              MOVE.B  #94,        D0
00001468  4E4F                     634              TRAP    #15
0000146A                           635              
0000146A  6100 0004                636              BSR EXIT
0000146E                           637      ENDI
0000146E  4E75                     638      RTS                             ; Return to subroutine
00001470                           639  
00001470                           640  *-----------------------------------------------------------
00001470                           641  * Subroutine    : EXIT
00001470                           642  * Description   : Exit message and End Game
00001470                           643  *-----------------------------------------------------------
00001470                           644  EXIT:
00001470                           645      ; Show if Exiting is Running
00001470  103C 000B                646      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001474  323C 4004                647      MOVE.W  #$4004,     D1          ; Col 40, Row 1
00001478  4E4F                     648      TRAP    #15                     ; Trap (Perform action)
0000147A  43F9 000014CD            649      LEA     EXIT_MSG,   A1          ; Exit
00001480  303C 000D                650      MOVE    #13,        D0          ; No Line feed
00001484  4E4F                     651      TRAP    #15                     ; Trap (Perform action)
00001486  103C 0009                652      MOVE.B  #TC_EXIT,   D0          ; Exit Code
0000148A  4E4F                     653      TRAP    #15                     ; Trap (Perform action)
0000148C  FFFF FFFF                654      SIMHALT
00001490                           655  
00001490                           656  *-----------------------------------------------------------
00001490                           657  * Section       : Messages
00001490                           658  * Description   : Messages to Print on Console, names should be
00001490                           659  * self documenting
00001490                           660  *-----------------------------------------------------------
00001490= 53 63 6F 72 65 20 ...    661  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
00001499= 4B 65 79 43 6F 64 ...    662  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
000014A4= 4A 75 6D 70 2E 2E ...    663  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
000014AD                           664  ;---------------------------------------------------------
000014AD= 55 70 2E 2E 2E 2E 00     665  UP_MSG          DC.B    'Up....', 0       ; Up Message
000014B4= 44 6F 77 6E 2E 2E ...    666  DOWN_MSG        DC.B    'Down....', 0       ; Down Message
000014BD                           667  ;-----------------------------------------------------------
000014BD= 58 3A 00                 668  X_MSG           DC.B    'X:', 0             ; X Position Message
000014C0= 59 3A 00                 669  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
000014C3= 48 65 61 6C 74 68 ...    670  HEALTH_MSG      DC.B    'Health : ',0       ; Health message
000014CD                           671  
000014CD                           672  
000014CD= 45 78 69 74 69 6E ...    673  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
000014D9                           674  
000014D9                           675  *-----------------------------------------------------------
000014D9                           676  * Section       : Graphic Colors
000014D9                           677  * Description   : Screen Pixel Color
000014D9                           678  *-----------------------------------------------------------
000014D9  =00FFFFFF                679  WHITE           EQU     $00FFFFFF
000014D9  =000000FF                680  RED             EQU     $000000FF
000014D9                           681  
000014D9                           682  *-----------------------------------------------------------
000014D9                           683  * Section       : Screen Size
000014D9                           684  * Description   : Screen Width and Height
000014D9                           685  *-----------------------------------------------------------
000014DA                           686  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
000014DC                           687  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
000014DE                           688  
000014DE                           689  *-----------------------------------------------------------
000014DE                           690  * Section       : Keyboard Input
000014DE                           691  * Description   : Used for storing Keypresses
000014DE                           692  *-----------------------------------------------------------
000014DE                           693  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
000014E2                           694  
000014E2                           695  *-----------------------------------------------------------
000014E2                           696  * Section       : Character Positions
000014E2                           697  * Description   : Player and Enemy Position Memory Locations
000014E2                           698  *-----------------------------------------------------------
000014E2                           699  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
000014E6                           700  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
000014EA                           701  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
000014EE                           702  HEALTH_VALUE    DS.L    01  ; Reserve Space for Health Value
000014F2                           703  
000014F2                           704  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
000014F6                           705  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
000014FA                           706  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
000014FE                           707  
000014FE                           708  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001502                           709  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001506                           710  
00001506                           711  *-----------------------------------------------------------
00001506                           712  * Section       : Sounds
00001506                           713  * Description   : Sound files, which are then loaded and given
00001506                           714  * an address in memory, they take a longtime to process and play
00001506                           715  * so keep the files small. Used https://voicemaker.in/ to 
00001506                           716  * generate and Audacity to convert MP3 to WAV
00001506                           717  *-----------------------------------------------------------
00001506= 6A 75 6D 70 2E 77 ...    718  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
0000150F= 72 75 6E 2E 77 61 ...    719  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
00001517= 6F 70 70 73 2E 77 ...    720  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001520                           721  
00001520                           722      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    13BC
COLLISION           142C
COLLISION_CHECK_DONE  141C
CURRENT_KEY         14DE
DOWN                114A
DOWNARROW           28
DOWN_MSG            14B4
DRAW                11A0
DRAW_ENEMY          1384
DRAW_PLAYER         134C
DRAW_PLYR_DATA      11BE
ENEMY_X             14FE
ENEMY_Y             1502
ENMY_H_INIT         E
ENMY_W_INIT         E
ESCAPE              1B
EXIT                1470
EXIT_MSG            14CD
GAME                1092
GAMELOOP            1096
GND_FALSE           0
GND_TRUE            1
HEALTH              2000
HEALTH_MSG          14C3
HEALTH_VALUE        14EE
INITIALISE          1000
INPUT               10C0
IS_PLAYER_ON_GND    129E
JMP_INDEX           1
JUMP_LOAD           1310
JUMP_MSG            14A4
JUMP_WAV            1506
KEYCODE_MSG         1499
MOVE_ENEMY          116C
OPPS_INDEX          2
OPPS_LOAD           132E
OPPS_WAV            1517
OUT_OF_BOUNDS       1140
OUT_OF_BOUNDS_DOWN  1160
PLAYER_SCORE        14EA
PLAYER_X            14E2
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  13C0
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  13DA
PLAYER_Y            14E6
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  13EE
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1408
PLAY_JUMP           1322
PLAY_OPPS           1340
PLAY_RUN            1304
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        14F6
PLYR_H_INIT         E
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         14FA
PLYR_VELOCITY       14F2
PLYR_W_INIT         E
POINTS              1
PROCESS_INPUT       10DE
RANDOM_NUMBER       1174
RED                 FF
RESET_ENEMY_POSITION  1190
RUN_INDEX           0
RUN_LOAD            12F2
RUN_WAV             150F
SCORE_MSG           1490
SCREEN_H            14DC
SCREEN_W            14DA
SET_OFF_GROUND      12E6
SET_ON_GROUND       12BE
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UP                  112A
UPARROW             26
UPDATE              1110
UP_MSG              14AD
WAIT                10B2
WHITE               FFFFFF
X_MSG               14BD
Y_MSG               14C0
_00000000           146E
